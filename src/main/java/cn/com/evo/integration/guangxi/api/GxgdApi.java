package cn.com.evo.integration.guangxi.api;import cn.com.evo.cms.constant.ProvinceCodeEnum;import cn.com.evo.cms.domain.entity.pay.PayConfig;import cn.com.evo.cms.domain.entity.pay.Product;import cn.com.evo.cms.domain.entity.pay.Rule;import cn.com.evo.cms.domain.entity.vip.User;import cn.com.evo.cms.domain.entity.vip.UserAccount;import cn.com.evo.cms.service.pay.OrderService;import cn.com.evo.cms.service.pay.PayConfigService;import cn.com.evo.cms.service.pay.ProductService;import cn.com.evo.cms.service.pay.RuleService;import cn.com.evo.cms.service.vip.UserAccountService;import cn.com.evo.cms.service.vip.UserServerService;import cn.com.evo.cms.service.vip.UserService;import cn.com.evo.integration.guangxi.content.dto.ContentSynResponse;import cn.com.evo.integration.guangxi.pay.PaySDK;import cn.com.evo.integration.guangxi.pay.dto.pay.ProductInfo;import cn.com.evo.integration.guangxi.pay.dto.pay.dto.OrderInfo;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.frameworks.core.web.controller.BaseController;import com.frameworks.core.web.result.DataResultForAPI;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.util.List;/** * @Description: 广西广电接口 * @author: lu.xin * @create: 2019-05-22 10:07 AM **/@Controller@RequestMapping("/api/gxgd")@CrossOrigin(origins = "*", maxAge = 3600)public class GxgdApi extends BaseController {    @Autowired    private ProductService productService;    @Autowired    private RuleService ruleService;    @Autowired    private PayConfigService payConfigService;    @Autowired    private UserAccountService userAccountService;    @Autowired    private UserService userService;    @Autowired    private OrderService orderService;    @Autowired    private UserServerService userServerService;    /**     * 产品套餐订单创建接口     *     * @param productCode 系统产品编码     * @param cardNo      智能卡号（用户id）     * @param stbId       机顶盒号     * @param areaCode    用户区域码     * @param isHD        机顶盒类型 "720P"高清,"480P"标清     * @param appId       应用id     * @param type        支付方式 1微信 2支付宝 3银联 4boss     * @return     */    @RequestMapping(value = "/productOrder", method = {RequestMethod.GET, RequestMethod.POST})    @ResponseBody    public DataResultForAPI productOrder(@RequestParam("productCode") String productCode,                                         @RequestParam("cardNo") String cardNo,                                         @RequestParam("stbId") String stbId,                                         @RequestParam("areaCode") String areaCode,                                         @RequestParam("isHD") String isHD,                                         @RequestParam("appId") String appId,                                         @RequestParam("type") Integer type) {        DataResultForAPI dataResult = new DataResultForAPI();        JSONObject json = new JSONObject();        try {            //判断该用户是否有未到期服务            UserAccount userAccount = userAccountService.getByAccountNoAndAccountType(cardNo, 3, stbId);            User user = userService.findById(userAccount.getUserId());            Boolean isExpire = userServerService.checkUserServerIsExpire(user.getId(), appId);            // 没开通过／没有未到期 服务            if (isExpire) {                // 根据系统产品编码获取三方产品id                Product product = productService.getByCode(productCode);                if (product == null) {                    logger.error("产品编码错误，请确认平台相关配置。");                    json.put("retCode", "-2");                    json.put("retMsg", "产品编码错误，请确认平台相关配置");                    dataResult.setData(json);                    dataResult.pushOk("产品编码错误，请确认平台相关配置");                    return dataResult;                }                // 局方产品id                String thirdProductId = product.getThirdPartyId();                // 调用局方产品查询接口 获取产品id、产品名称、资费id、单价。                ProductInfo productInfo = PaySDK.queryProductInfo(stbId, thirdProductId);                if (productInfo == null) {                    // 调用局方查询产品信息失败                    logger.error("调用局方查询产品信息失败。");                    json.put("retCode", "-3");                    json.put("retMsg", "调用局方查询产品信息失败");                    dataResult.setData(json);                    dataResult.pushOk("调用局方查询产品信息失败");                    return dataResult;                }                // 局方产品id                String productId = productInfo.getProductId();                // 局方产品名称                String productName = productInfo.getProductName();                // 局方资费id                String tariffId = productInfo.getTariffId();                // 局方产品单价                String unitPrice = productInfo.getUnitPrice();                // 根据系统配置的产品编码获取订购周期。                List<Rule> rules = ruleService.findByProductCodeAndServerCode(productCode, "10001");                if (rules.size() == 0) {                    logger.error("产品未配置规则周期。");                    json.put("retCode", "-4");                    json.put("retMsg", "产品未配置规则周期");                    dataResult.setData(json);                    dataResult.pushOk("产品未配置规则周期");                    return dataResult;                }                String unit = rules.get(0).getUnit();                Integer count = rules.get(0).getCount();                // 订购周期                String qty = unitHandle(unit, count);                // 调用局方订单创建接口生成支付订单                OrderInfo orderInfo = PaySDK.orderCreate(productId, productName, tariffId, qty, cardNo,                        stbId, areaCode, unitPrice, isHD);                if (orderInfo != null) {                    // 局方接口创建订单成功                    PayConfig payConfig = payConfigService.getByPayTypeAndProvinceCodeAndEnable(type, ProvinceCodeEnum.GuangXi.getCode(), 1);                    //创建订单记录                    orderService.createOrder(orderInfo.getOrderId(), payConfig.getId(), user.getId(),                            product.getId(), unitPrice, unitPrice, type, appId, userAccount.getId());                    json.put("retCode", "1");                    json.put("retMsg", "订单创建成功");                    json.put("orderId", orderInfo.getOrderId());                    json.put("orderUrl", orderInfo.getOrderUrl());                    dataResult.setData(json);                    dataResult.pushOk("订单创建失败");                } else {                    // 局方接口创建订单失败                    logger.error("订单创建失败");                    json.put("retCode", "-5");                    json.put("retMsg", "订单创建失败");                    dataResult.setData(json);                    dataResult.pushOk("订单创建失败");                }            } else {                json.put("retCode", -1);                json.put("retMsg", "有未到期服务，请勿重复订购");                dataResult.setData(json);                dataResult.pushOk("有未到期服务，请勿重复订购");            }        } catch (Exception e) {            logger.error("订购异常:" + e.getMessage(), e);            dataResult.pushError("订购异常:" + e.getMessage());        }        return dataResult;    }    /**     * 订购回调接口     *     * @param request     * @param response     */    @RequestMapping(value = "/orderCallBack")    public void orderCallBack(HttpServletRequest request,                              HttpServletResponse response) {        try {            //订单号            String retCode = request.getParameter("retCode");            String retMsg = request.getParameter("retMsg");            String or6derId = request.getParameter("orderId");            String handleTime = request.getParameter("handleTime");            String totalFee = request.getParameter("totalFee");            String partner = request.getParameter("partner");            String stbId = request.getParameter("stbId");            String productId = request.getParameter("productId");            String productName = request.getParameter("productName");            // TODO 根据订单号查询相关订单            // TODO 判断订单支付状态，未支付则开通相关服务。            response.getWriter().write("success");        } catch (Exception e) {            logger.error("异常:" + e.getMessage(), e);        }    }    /**     * 内容注入回调通知     * 只有收到“片源id”+“type=media”+“opt_type=2”+“status=0”（片源注入成功） 的消息回调时，此片源才能正常鉴权取串。     *     * @param request     * @param response     */    @RequestMapping(value = "/contentSynCallBack")    public void contentSynCallBack(HttpServletRequest request,                                   HttpServletResponse response) {        JSONArray jsonArrayStr = new JSONArray();        try {            String verifyResult = request.getParameter("verify_result");            // 转化回调参数            List<ContentSynResponse> contentSynResponses = JSONArray.parseArray(verifyResult, ContentSynResponse.class);            for (ContentSynResponse contentSynRespons : contentSynResponses) {                contentSynRespons.getMsgId();                contentSynRespons.getId();// 媒资id                contentSynRespons.getType();//                contentSynRespons.getOptType();                contentSynRespons.getStatus();                // TODO 未完成            }            response.getWriter().write(jsonArrayStr.toJSONString());        } catch (Exception e) {            logger.error("异常:" + e.getMessage(), e);        }    }    private String unitHandle(String unit, Integer count) {        try {            if ("3".equals(unit)) {                return count.toString();            } else if ("4".equals(unit)) {                return "12";            } else {                return "1";            }        } catch (Exception e) {            logger.error("订购周期转换异常" + e.getMessage(), e);            throw new RuntimeException("订购周期转换异常" + e.getMessage(), e);        }    }}