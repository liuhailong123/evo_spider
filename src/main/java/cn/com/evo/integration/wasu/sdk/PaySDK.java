package cn.com.evo.integration.wasu.sdk;import cn.com.evo.cms.utils.HttpUtil;import cn.com.evo.cms.utils.OrderUtils;import cn.com.evo.integration.common.ConstantFactory;import cn.com.evo.integration.wasu.common.ConstantEnum;import cn.com.evo.integration.wasu.common.pay.PayRequestContent;import cn.com.evo.integration.wasu.common.pay.PayResponse;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.frameworks.utils.DateUtil;import com.google.common.collect.Lists;import com.maywide.payplat.request.CommonRequest;import com.maywide.payplat.request.reqcontent.PayplatPayCustInfo;import com.maywide.payplat.request.reqcontent.PayplatPayOrderInfo;import com.maywide.payplat.request.reqcontent.PayplatPayProductInfo;import com.maywide.payplat.response.CommonResponse;import java.util.List;import java.util.Map;/** * @Description: 支付类接口封装 * @author: lu.xin * @create: 2019-05-28 10:02 AM **/public class PaySDK {    /**     * 支付接口     *     * @param ppvId       产品id     * @param payMoney    产品价格 单位：分     * @param productName 产品名称     * @param custName    客户名称     * @param custId      客户编号     * @param cardNo      智能卡号     * @param area        业务区标识     * @param city        区域标识     * @return PayResponse     */    public static PayResponse pay(String ppvId, double payMoney, String productName,                                  String custName, String custId, String cardNo, String area,                                  String city) {        // 订单号        String orderNo = OrderUtils.createOrderNo(3);        CommonRequest request = createRequestContent(ppvId, payMoney, orderNo,                productName, custName, custId,                cardNo, area, city, ConstantFactory.map.get(ConstantEnum.callback.getKey()));        JSONObject params = (JSONObject) JSON.toJSON(request);        String resultStr = HttpUtil.post(ConstantFactory.map.get(ConstantEnum.payUrl.getKey()), params,                "请求华数二维码支付接口");        // 响应参数格式化        CommonResponse commonResponse = JSONObject.parseObject(resultStr, CommonResponse.class);        Map<String, String> outPut = (Map) commonResponse.getOutput();        PayResponse response = new PayResponse(commonResponse.getStatus(), commonResponse.getMessage(), commonResponse.getRequestid(), orderNo,                outPut.get("codeContent"), outPut.get("codeImgUrl"));        return response;    }    /**     * 创建请求内容对象     *     * @param ppvId       产品id     * @param payMoney    支付金额     * @param orderNo     订单号     * @param productName 产品名称     * @param custName    客户名称     * @param custId      客户编号     * @param cardNo      智能卡号     * @param area        业务区标识     * @param city        区域标识     * @param callBackUrl 回调接口地址     */    private static CommonRequest createRequestContent(String ppvId, double payMoney, String orderNo,                                                      String productName, String custName, String custId,                                                      String cardNo, String area, String city, String callBackUrl) {        CommonRequest request = new CommonRequest();        request.setVersion("01");        request.setClienttype("01");        request.setClientcode(ConstantFactory.map.get(ConstantEnum.clientCode.getKey()));        request.setClientpwd(ConstantFactory.map.get(ConstantEnum.clientPwd.getKey()));        // 支付接口编码        request.setServicecode("SimpleCode");        // 请求流水号 规则：clientcode+YYYYMMDD+8位流水        String requestId = ConstantFactory.map.get(ConstantEnum.clientCode.getKey()) +                DateUtil.getDateTime(DateUtil.DATE_PATTERN.YYYYMMDD) + OrderUtils.getRandom8();        request.setRequestid(requestId);        PayRequestContent requestContent = new PayRequestContent(ppvId + ":" + payMoney);        // 订单信息(页面展示)        PayplatPayOrderInfo orderInfo = createOrderInfo(orderNo, productName, payMoney);        requestContent.setOrderInfo(orderInfo);        // 客户信息        PayplatPayCustInfo custInfo = createCustInfo(custName, custId, cardNo, area, city);        requestContent.setCustInfo(custInfo);        // 支付总金额        requestContent.setTotalFee(payMoney);        // 支付方式；空        requestContent.setPayments("");        // 前台通知接口        requestContent.setRedirectUrl("");        // 后台通知接口        requestContent.setNoticeAction(callBackUrl);        // 订单号        requestContent.setOrderNo(orderNo);        // 01缴费业务；02一次性业务        requestContent.setOrderType("02");        // Y或N 是否Boss订单确认        requestContent.setIsOrder("N");        // 是否直接返回二维码        requestContent.setOnlyQrCodeUrl("Y");        // 请求参数        request.setRequestContent(requestContent);        try {            // 参数加密            request.sign(ConstantFactory.map.get(ConstantEnum.payPrivateKey.getKey()));            return request;        } catch (Exception e) {            throw new RuntimeException("参数加签名异常" + e.getMessage(), e);        }    }    /**     * 创建订单对象     *     * @param orderNo     订单号     * @param productName 产品名称     * @param payMoney    支付金额     * @return     */    private static PayplatPayOrderInfo createOrderInfo(String orderNo, String productName, double payMoney) {        PayplatPayOrderInfo orderInfo = new PayplatPayOrderInfo();        orderInfo.setOrderNo(orderNo);        List<PayplatPayProductInfo> productList = Lists.newArrayList();        PayplatPayProductInfo productInfo = new PayplatPayProductInfo();        productInfo.setProductName(productName);        productInfo.setFee(payMoney);        productList.add(productInfo);        orderInfo.setProductList(productList);        return orderInfo;    }    /**     * 创建客户对象     *     * @param custName 客户名称     * @param custId   客户编码     * @param cardNo   智能卡号     * @param area     业务区标识     * @param city     区域标识     * @return     */    private static PayplatPayCustInfo createCustInfo(String custName, String custId, String cardNo,                                                     String area, String city) {        PayplatPayCustInfo custInfo = new PayplatPayCustInfo();        custInfo.setCustname(custName);        custInfo.setCustid(custId);        custInfo.setCardNo(cardNo);        custInfo.setArea(area);        custInfo.setCity(city);        return custInfo;    }}