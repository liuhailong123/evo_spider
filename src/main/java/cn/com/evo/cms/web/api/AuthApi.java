package cn.com.evo.cms.web.api;import cn.com.evo.admin.manage.domain.entity.Province;import cn.com.evo.admin.manage.service.ProvinceService;import cn.com.evo.cms.constant.ProvinceCodeEnum;import cn.com.evo.cms.domain.entity.cms.CatalogueRelation;import cn.com.evo.cms.domain.entity.cms.Column;import cn.com.evo.cms.domain.entity.cms.Content;import cn.com.evo.cms.domain.entity.pay.Product;import cn.com.evo.cms.domain.entity.vip.UserAccount;import cn.com.evo.cms.domain.enums.ContentClassifyEnum;import cn.com.evo.cms.service.cms.CatalogueRelationService;import cn.com.evo.cms.service.cms.ColumnService;import cn.com.evo.cms.service.cms.ContentService;import cn.com.evo.cms.service.pay.LimitFreeService;import cn.com.evo.cms.service.pay.OrderService;import cn.com.evo.cms.service.pay.ProductRelService;import cn.com.evo.cms.service.vip.UserAccountService;import cn.com.evo.cms.service.vip.UserServerService;import cn.com.evo.cms.web.api.vo.VideoApiVo;import cn.com.evo.cms.web.voService.CommonPlayAuthService;import cn.com.evo.cms.web.voService.VideoVoService;import cn.com.evo.integration.chongqing.CqgdAuthServiceImpl;import cn.com.evo.integration.chongqing.common.CqgdAuthRequest;import cn.com.evo.integration.common.dto.PlayAuthDto;import cn.com.evo.integration.common.request.AuthRequest;import cn.com.evo.integration.common.result.AuthContentResponse;import cn.com.evo.integration.common.result.AuthResponse;import cn.com.evo.integration.jinanyouxian.JnyxAuthServiceImpl;import cn.com.evo.integration.jinanyouxian.common.JnyxAuthRequest;import cn.com.evo.integration.nxsp.NxAuthServiceImpl;import cn.com.evo.integration.nxsp.pay.model.NxAuthRequest;import cn.com.evo.integration.qinghai.QingHaiAuthServiceImpl;import cn.com.evo.integration.qinghai.sdk.request.QingHaiAuthRequest;import cn.com.evo.integration.scyd.ScydPayServiceImpl;import cn.com.evo.integration.scyd.common.ScydAuthRequest;import cn.com.evo.integration.shenzheng.SZAuthServiceImpl;import cn.com.evo.integration.wasu.WasuAuthServiceImpl;import cn.com.evo.integration.wasu.common.auth.WasuAuthRequest;import cn.com.evo.integration.xjTvos.XJAuthServiceImpl;import cn.com.evo.integration.xjTvos.common.XJTvosAuthRequest;import cn.com.evo.integration.xjnt.XjntAuthServiceImpl;import cn.com.evo.integration.xjnt.common.XjntAuthRequest;import com.alibaba.fastjson.JSONObject;import com.frameworks.core.web.controller.BaseController;import com.frameworks.core.web.result.DataResultForAPI;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletRequest;import java.util.List;/** * @Description: 鉴权接口api * @author: lu.xin * @create: 2019-04-02 2:14 PM **/@RestController@RequestMapping("/api/auth")@CrossOrigin(origins = "*", maxAge = 3600)public class AuthApi extends BaseController {    @Autowired    private ProvinceService provinceService;    @Autowired    private CatalogueRelationService catalogueRelationService;    @Autowired    private ContentService contentService;    @Autowired    private UserAccountService userAccountService;    @Autowired    private LimitFreeService limitFreeService;    @Autowired    private ProductRelService productRelService;    @Autowired    private UserServerService userServerService;    @Autowired    private OrderService orderService;    @Autowired    private ColumnService columnService;    @Autowired    private XjntAuthServiceImpl xjntAuthService;    @Autowired    private ScydPayServiceImpl scydPayService;    @Autowired    private JnyxAuthServiceImpl jnyxAuthService;    @Autowired    private WasuAuthServiceImpl wasuAuthService;    @Autowired    private NxAuthServiceImpl nxAuthService;    @Autowired    private CqgdAuthServiceImpl cqgdAuthService;    @Autowired    private VideoVoService videoVoService;    @Autowired    private CommonPlayAuthService commonPlayAuthService;    @Autowired    private QingHaiAuthServiceImpl qingHaiAuthService;    @Autowired    private XJAuthServiceImpl xjAuthService;    @Autowired    private SZAuthServiceImpl szAuthService;    /**     * 播放鉴权     *     * @param cardNo         智能卡号     * @param stbNo          机顶盒号 新疆省网必填     * @param stbIp          机顶盒ip 新疆省网必填     * @param appId          应用id     * @param contentId      内容id（电影id、剧集id）     * @param number         当前集数,电影可为空     * @param childContentId 剧集子集id,电影可为空，此字段在剧集时与number互斥     * @param accesstoken    用户登录token 济南有线/新疆广电视开演示版本必填     * @return     */    @RequestMapping(value = "/play", method = {RequestMethod.GET, RequestMethod.POST})    @ResponseBody    public DataResultForAPI play(@RequestParam("cardNo") String cardNo,                                 @RequestParam(value = "stbNo", required = false) String stbNo,                                 @RequestParam(value = "stbIp", required = false) String stbIp,                                 @RequestParam("appId") String appId,                                 @RequestParam("contentId") String contentId,                                 @RequestParam(value = "number", required = false) Integer number,                                 @RequestParam(value = "childContentId", required = false) String childContentId,                                 @RequestParam(value = "accesstoken", required = false) String accesstoken) {        DataResultForAPI dataRet = new DataResultForAPI();        AuthResponse response = new AuthResponse();        try {            if (StringUtils.isBlank(cardNo)) {                logger.error("智能卡号为空!!!");                response.pushError1("智能卡号为空");                dataRet.setData(response);                dataRet.pushOk("播放鉴权接口调用成功！");                return dataRet;            }            Province province = provinceService.getByEnable(1);            if (province == null) {                logger.error("平台省网配置错误!!!");                response.pushError2("错误-平台省网配置错误");                dataRet.setData(response);                dataRet.pushOk("播放鉴权接口调用成功！");                return dataRet;            }            CatalogueRelation catalogueRelation = catalogueRelationService.findById(contentId);            if (catalogueRelation == null) {                logger.error("内容id：" + contentId + " 错误!!!");                response.pushError5("错误-内容id错误");                dataRet.setData(response);                dataRet.pushOk("播放鉴权接口调用成功！");                return dataRet;            }            // 获取当前集剧集id            if (StringUtils.isBlank(childContentId)) {                Content content = contentService.findById(catalogueRelation.getBId());                if (ContentClassifyEnum.episode.getIndex() == content.getClassify()) {                    Content child = contentService.findContentByNumber(contentId, number);                    if (child == null) {                        logger.error("无当前子集信息!!!name:" + content.getName() + "|number:" + number);                        response.pushError4("错误-无当前子集信息");                        dataRet.setData(response);                        dataRet.pushOk("播放鉴权接口调用成功！");                        return dataRet;                    } else {                        childContentId = child.getId();                    }                }            }            // 省网code枚举            ProvinceCodeEnum provinceCodeEnum = ProvinceCodeEnum.getByName(province.getCode());            switch (provinceCodeEnum) {                case XinJiang:                    // 新疆广电播放鉴权逻辑                    response = xjntAuthService.playAuth(XjntAuthRequest.playAuthInit(cardNo, stbNo, stbIp, appId,                            catalogueRelation.getAId(), catalogueRelation.getBId(), childContentId, accesstoken));                    break;                case SiChuanYiDong:                    // 四川移动播放鉴权逻辑                    response = scydPayService.playAuth(ScydAuthRequest.playAuthInit(cardNo, appId,                            catalogueRelation.getAId(), catalogueRelation.getBId(), childContentId));                    break;                case Longjiang:                    break;                case Wasu:                    // 浙江华数播放鉴权逻辑                    response = wasuAuthService.playAuth(WasuAuthRequest.playAuthInit(cardNo, appId,                            catalogueRelation.getAId(), catalogueRelation.getBId(), childContentId));                    break;                case JinanYouxian:                    // 济南有线播放鉴权逻辑                    response = jnyxAuthService.playAuth(JnyxAuthRequest.playAuthInit(cardNo, appId,                            catalogueRelation.getAId(), catalogueRelation.getBId(), childContentId,                            accesstoken));                    break;                case NingXia:                    // 宁夏广电播放鉴权逻辑                    response = nxAuthService.playAuth(NxAuthRequest.playAuthInit(cardNo, appId,                            catalogueRelation.getAId(), catalogueRelation.getBId(), childContentId, accesstoken));                    break;                case ChongQing:                    // 重庆广电播放鉴权逻辑                    response = cqgdAuthService.playAuth(CqgdAuthRequest.playAuthInit(cardNo, appId,                            catalogueRelation.getAId(), catalogueRelation.getBId(), childContentId));                    break;                case QingHai:                    // 青海视开播放鉴权逻辑                    response = qingHaiAuthService.playAuth(QingHaiAuthRequest.playAuthInit(cardNo, appId,                            catalogueRelation.getAId(), catalogueRelation.getBId(), childContentId));                    break;                case ShenZhen:                    //深圳播放鉴权逻辑                    response = szAuthService.playAuth(AuthRequest.playAuthInit(cardNo, appId,                            catalogueRelation.getAId(), catalogueRelation.getBId(), childContentId));                    break;                case GuangXi:                    // TODO 广西亲多多播放鉴权逻辑                    break;                case Evo:                    // 未来媒体测试鉴权逻辑(没有省网个性化逻辑)                    AuthRequest authRequest = AuthRequest.playAuthInit(cardNo, appId, catalogueRelation.getAId(),                            catalogueRelation.getBId(), childContentId);                    response = evoPlayAuth(authRequest);                    break;                case XJTvos:                    // 新疆tvos播放鉴权逻辑                    response = xjAuthService.playAuth(XJTvosAuthRequest.playAuthInit(cardNo, appId,                            catalogueRelation.getAId(), catalogueRelation.getBId(), childContentId, accesstoken));                    break;                case ERROR:                    logger.error("暂不支持该省网：【" + province.getName() + "】进行播放鉴权!!!");                    response.pushError3("暂不支持该省网：【" + province.getName() + "】进行播放鉴权!!!");                    break;                default:                    logger.error("平台省网配置错误!!!");                    response.pushError2("错误-平台省网配置错误");                    break;            }            //  将内容信息和子集信息写入接口数据            AuthContentResponse contentResponse;            Content content = contentService.findById(catalogueRelation.getBId());            if (StringUtils.isNotBlank(childContentId)) {                Content child = contentService.findById(childContentId);                contentResponse = new AuthContentResponse(catalogueRelation, content, child);            } else {                contentResponse = new AuthContentResponse(catalogueRelation, content);            }            response.setContent(contentResponse);            dataRet.setData(response);            dataRet.pushOk("播放鉴权接口调用成功！");        } catch (Exception e) {            logger.error("服务器异常" + e.getMessage(), e);            dataRet.pushError("服务器异常" + e.getMessage());        }        return dataRet;    }    /**     * 鉴权流程     * 通过流程配置表进行鉴权流程流转     *     * @param params  入参     * @param request     * @return     */    @RequestMapping(value = "/flow", method = {RequestMethod.GET, RequestMethod.POST})    @ResponseBody    public DataResultForAPI flow(@RequestParam("params") String params, HttpServletRequest request) {        DataResultForAPI dataRet = new DataResultForAPI();        try {            PlayAuthDto playAuthDto = JSONObject.parseObject(params, PlayAuthDto.class);            AuthResponse response = commonPlayAuthService.invokeAuth(playAuthDto, request);            dataRet.setData(response);            dataRet.pushOk("播放鉴权接口调用成功！");        } catch (Exception e) {            logger.error("异常:" + e.getMessage(), e);            dataRet.pushError("异常:" + e.getMessage());        }        return dataRet;    }    /**     * 未来媒体播放鉴权逻辑     *     * @param authRequest     * @return     */    private AuthResponse evoPlayAuth(AuthRequest authRequest) {        AuthResponse response = new AuthResponse();        try {            // 获取用户信息            UserAccount userAccount = userAccountService.getByAccountNoAndAccountType(authRequest.getCardNo(),                    3, null);            if (userAccount == null) {                // 用户不存在或创建失败，返回应用鉴权失败                response.pushUserAuthFail();                return response;            } else {                Column app = columnService.findById(authRequest.getAppId());                // 获取内容对应播放地址                List<VideoApiVo> videos = videoVoService.findVideos(authRequest.getContentId(),                        authRequest.getChildContentId(), app.getPlatform());                // 判断内容是否是剧集如果是剧集则判断是否前三集免费                if (StringUtils.isNotBlank(authRequest.getChildContentId())) {                    // 鉴权内容是剧集                    CatalogueRelation rel = catalogueRelationService.getByAIdAndBIdAndType(authRequest.getColumnId(),                            authRequest.getContentId(), 2);                    if (rel != null) {                        Content child = contentService.findById(authRequest.getChildContentId());                        if (rel.getFreeNum() != null) {                            if (child.getSort() <= rel.getFreeNum()) {                                // 剧集前N集免费                                response.pushLimitFreeSuccess(videos);                                return response;                            }                        }                    }                }                // 栏目是否存在限时免费                boolean isFree = limitFreeService.isFree(authRequest.getColumnId(), authRequest.getAppId());                if (isFree) {                    // 限免，返回限免通过                    response.pushLimitFreeSuccess(videos);                    return response;                } else {                    // 非限免                    // 栏目是否配置产品，如果配置产品则判断产品订购状态                    // 获取有效期内的产品                    List<Product> products = productRelService.findByBizId(authRequest.getColumnId());                    if (products.size() == 0) {                        // 栏目未配置产品定价,开始判断应用服务开通情况                        // 根据serverCode、userId查询服务开通表，判断是否到期                        boolean flag = userServerService.checkUserServer(userAccount.getUserId(),                                "10001", authRequest.getAppId());                        if (!flag) {                            // 服务已开通并且未过期,返回鉴权通过                            response.pushAuthSuccess(videos);                            return response;                        } else {                            // 服务未开通                            response.pushServerAuthFail(videos);                            return response;                        }                    } else {                        // 栏目已配置产品定价,                        // 调用底层逻辑判断产品订购情况                        boolean flag = orderService.orderAuth("10001", userAccount.getUserId(),                                authRequest.getAppId(), products);                        if (!flag) {                            response.pushAuthSuccess(videos);                        } else {                            response.pushOrderAuthFail(products.get(0).getId(), videos);                        }                    }                }            }            return response;        } catch (Exception e) {            throw new RuntimeException("新疆省网播放鉴权逻辑异常：" + e.getMessage(), e);        }    }}