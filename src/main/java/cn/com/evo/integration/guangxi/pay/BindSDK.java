package cn.com.evo.integration.guangxi.pay;import cn.com.evo.cms.domain.entity.cms.Content;import cn.com.evo.cms.utils.HttpUtil;import cn.com.evo.integration.common.ConstantFactory;import cn.com.evo.integration.guangxi.common.ConstantEnum;import cn.com.evo.integration.guangxi.pay.dto.bind.*;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.google.common.collect.Lists;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import java.util.List;/** * @Description: 广西广电媒资与产品关系类接口封装 * @author: lu.xin * @create: 2019-05-15 3:30 PM **/public class BindSDK {    protected static Logger logger = LogManager.getLogger(BindSDK.class);    /**     * 接口成功返回码     */    private static final String OK = "300000";    /**     * 添加媒资绑定产品(添加内容与产品绑定接口)     *     * @param contents 内容list     * @return true-成功；false-失败     */    public static Boolean add(List<Content> contents) {        try {            BindAddRequest request = new BindAddRequest(BindAddContent.init(contents));            String resultStr = HttpUtil.get(ConstantFactory.map.get(ConstantEnum.asset_url.getKey()) +                    "?" + request.toParams(), "添加媒资绑定产品");            BindResponse response = JSONObject.toJavaObject(JSONObject.parseObject(resultStr), BindResponse.class);            logger.error("添加媒资绑定产品接口返回：" + response.toString());            if (OK.equals(response.getState())) {                return true;            } else {                logger.error("失败：" + response.getSub_state() + "|" + response.getReason());                return false;            }        } catch (Exception e) {            throw new RuntimeException("调用局方添加媒资绑定产品接口异常" + e.getMessage(), e);        }    }    /**     * 删除媒资绑定产品(删除内容与产品绑定接口)     *     * @param contents 内容list     * @return true-成功；false-失败     */    public static Boolean remove(List<Content> contents) {        try {            BindRemoveRequest request = new BindRemoveRequest(BindRemoveContent.init(contents));            String resultStr = HttpUtil.get(ConstantFactory.map.get(ConstantEnum.asset_url.getKey()) +                    "?" + request.toParams(), "删除媒资绑定产品");            BindResponse response = JSONObject.toJavaObject(JSONObject.parseObject(resultStr), BindResponse.class);            logger.error("删除媒资绑定产品接口返回：" + response.toString());            if (OK.equals(response.getState())) {                return true;            } else {                logger.error("失败：" + response.getSub_state() + "|" + response.getReason());                return false;            }        } catch (Exception e) {            throw new RuntimeException("调用局方删除媒资绑定产品接口异常" + e.getMessage(), e);        }    }    /**     * 获取已绑定产品的媒资id列表     *     * @return 媒资id列表     */    public static List<String> findByProductId() {        List<String> list = Lists.newArrayList();        try {            List<String> contents = Lists.newArrayList();            contents.add(ConstantFactory.map.get(ConstantEnum.product_id.getKey()));            BindQueryContentRequest request = new BindQueryContentRequest(contents);            String resultStr = HttpUtil.get(ConstantFactory.map.get(ConstantEnum.asset_url.getKey()) +                    "?" + request.toParams(), "根据产品id获取媒资id集合");            BindResponse response = JSONObject.toJavaObject(JSONObject.parseObject(resultStr), BindResponse.class);            logger.error("根据产品id获取媒资id集合接口返回：" + response.toString());            if (OK.equals(response.getState())) {                String data = response.getData();                JSONObject jsonObject = JSONObject.parseObject(data);                JSONArray jsonArray = jsonObject.getJSONArray(ConstantFactory.map.get(ConstantEnum.product_id.getKey()));                for (Object o : jsonArray) {                    list.add(o + "");                }                return list;            } else {                logger.error("失败：" + response.getSub_state() + "|" + response.getReason());                return list;            }        } catch (Exception e) {            throw new RuntimeException("调用局方根据产品id获取媒资id集合接口异常" + e.getMessage(), e);        }    }    /**     * 根据视频ID查询绑定产品列表     *     * @param contentId 内容id     * @return 产品id列表     */    public static List<String> findByContentId(String contentId) {        List<String> list = Lists.newArrayList();        try {            List<String> contents = Lists.newArrayList();            contents.add(contentId);            BindQueryProductRequest request = new BindQueryProductRequest(contents);            String resultStr = HttpUtil.get(ConstantFactory.map.get(ConstantEnum.asset_url.getKey()) +                    "?" + request.toParams(), "根据视频ID查询绑定产品列表");            BindResponse response = JSONObject.toJavaObject(JSONObject.parseObject(resultStr), BindResponse.class);            logger.error("根据视频ID查询绑定产品列表接口返回：" + response.toString());            if (OK.equals(response.getState())) {                String data = response.getData();                JSONObject jsonObject = JSONObject.parseObject(data);                JSONArray jsonArray = jsonObject.getJSONArray(contentId);                for (Object o : jsonArray) {                    list.add(o + "");                }                return list;            } else {                logger.error("失败：" + response.getSub_state() + "|" + response.getReason());                return list;            }        } catch (Exception e) {            throw new RuntimeException("调用局方根据视频ID查询绑定产品列表接口异常" + e.getMessage(), e);        }    }}