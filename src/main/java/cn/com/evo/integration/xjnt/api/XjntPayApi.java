package cn.com.evo.integration.xjnt.api;import cn.com.evo.cms.constant.PayTypeEnum;import cn.com.evo.cms.constant.ProvinceCodeEnum;import cn.com.evo.cms.domain.entity.pay.Order;import cn.com.evo.cms.domain.entity.pay.PayConfig;import cn.com.evo.cms.domain.entity.pay.PayConfigParams;import cn.com.evo.cms.domain.entity.pay.Product;import cn.com.evo.cms.domain.entity.vip.User;import cn.com.evo.cms.domain.entity.vip.UserAccount;import cn.com.evo.cms.service.pay.OrderService;import cn.com.evo.cms.service.pay.PayConfigParamsService;import cn.com.evo.cms.service.pay.PayConfigService;import cn.com.evo.cms.service.pay.ProductService;import cn.com.evo.cms.service.vip.UserAccountService;import cn.com.evo.cms.service.vip.UserServerService;import cn.com.evo.cms.service.vip.UserService;import cn.com.evo.integration.xjnt.sdk.PayUtilXinJiang;import cn.com.evo.integration.xjnt.sdk.dto.XinJiangPayReq;import cn.com.evo.integration.xjnt.sdk.dto.XinJiangPayRsp;import com.alibaba.fastjson.JSONObject;import com.frameworks.core.web.controller.BaseController;import com.frameworks.core.web.result.DataResultForAPI;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;/** * 新疆支付对外接口 */@RestController@RequestMapping("/api/xjnt/pay")@CrossOrigin(origins = "*", maxAge = 3600)public class XjntPayApi extends BaseController {    @Autowired    private PayConfigParamsService payConfigParamsService;    @Autowired    private PayConfigService payConfigService;    @Autowired    private ProductService productService;    @Autowired    private UserAccountService userAccountService;    @Autowired    private UserService userService;    @Autowired    private OrderService orderService;    @Autowired    private UserServerService userServerService;    /**     * 支付订购接口     *     * @param type     支付类型 1微信 2支付宝 3电视互动-BOSS 4增值业务-sp 5银联     * @param cardNo   卡号     * @param prodCode 产品套餐编码     * @param stbNo    机顶盒号     * @param appId    应用id     * @return     */    @RequestMapping(value = "/payQrCode", method = {RequestMethod.GET, RequestMethod.POST})    public DataResultForAPI payQrCode(@RequestParam("type") Integer type, @RequestParam("cardNo") String cardNo,                                      @RequestParam("prodCode") String prodCode, @RequestParam("stbNo") String stbNo,                                      @RequestParam("appId") String appId) {        DataResultForAPI dataRet = new DataResultForAPI();        JSONObject result = new JSONObject();        try {            logger.error("payQrCode-REQ:" + "type:" + type);            logger.error("payQrCode-REQ:" + "cardNo:" + cardNo);            logger.error("payQrCode-REQ:" + "prodCode:" + prodCode);            logger.error("payQrCode-REQ:" + "stbNo:" + stbNo);            //判断该用户是否有未到期服务            UserAccount userAccount = userAccountService.getByAccountNoAndAccountType(cardNo, 3, stbNo);            User user = userService.findById(userAccount.getUserId());            Boolean isExpire = userServerService.checkUserServerIsExpire(user.getId(), appId);            // 没开通过／没有未到期 服务            if (isExpire) {                //获取系统配置请求参数                PayConfig payConfig = payConfigService.getByPayTypeAndProvinceCodeAndEnable(type, ProvinceCodeEnum.XinJiang.getCode(), 1);                List<PayConfigParams> configParams = payConfigParamsService.findByConfigId(payConfig.getId());                //参数转换                Map<String, Object> params = transform(configParams);                Product product = productService.getByCode(prodCode);                XinJiangPayReq req = new XinJiangPayReq(params.get("authCode") + "", cardNo, stbNo, params.get("stbIp") + "", Integer.valueOf(params.get("bookId") + ""), product.getThirdPartyCode(), product.getContentCode(),                        params.get("backUrl") + "", "");                XinJiangPayRsp rsp = new XinJiangPayRsp();                //判断支付类型                switch (PayTypeEnum.getByType(type)) {                    case ALi://支付宝                        rsp = PayUtilXinJiang.aliPayQrcode(req);                        break;                    case WeiXin://微信                        rsp = PayUtilXinJiang.weixinPayQrcode(req);                        break;                    case BOSS://BOSS                        rsp = PayUtilXinJiang.bossPay(req);                        break;                    case SP://SP                        rsp = PayUtilXinJiang.spPay(req);                        break;                    case Union:                        break;                    default:                        break;                }                if (rsp.getRetCode().equals("0") || rsp.getRetCode().equals("SUCCESS")) {//获取支付二维码成功                    //创建订单记录                    Order order = orderService.createOrder(rsp.getOrderNo(), payConfig.getId(), user.getId(),                            product.getId(), product.getOriginalPrice(),                            product.getCurrentPrice(), type, appId, userAccount.getId());                    // 如果 支付方式为 BOSS／SP 则直接开通服务 其他支付方式在 支付结果回调 时开通                    if (PayTypeEnum.BOSS.getType().equals(type) || PayTypeEnum.SP.getType().equals(type)) {                        //开通服务                        userServerService.openServer(user.getId(), appId, product.getId());                    }                    //返回数据处理                    result.put("orderId", order.getOrderNo());                    result.put("qrcodeUrl", rsp.getQrcodeUrl());                    result.put("qrcode", rsp.getQrcode());                    result.put("retCode", 0);                    dataRet.setData(result);                    dataRet.pushOk("成功！");                    logger.error("PayApi-payResult-payQrCode" + result.toJSONString());                } else {                    result.put("retCode", rsp.getRetCode());                    dataRet.setData(result);                    dataRet.pushOk("支付失败：" + rsp.getRetMsg());                    logger.error("支付失败：" + rsp.getRetMsg());                }            } else {                result.put("retCode", -1);                dataRet.setData(result);                dataRet.pushOk("有未到期服务，请勿重复订购");            }        } catch (Exception e) {            dataRet.pushError("失败：" + e.getMessage());            logger.error("获取支付二维码时，发生异常！", e);        }        return dataRet;    }    /**     * 支付回调     *     * @return     */    @RequestMapping(value = "/callback")    public void callback(HttpServletRequest request,                         HttpServletResponse response) {        try {            //订单号            String orderNo = request.getParameter("orderNo");            //处理结果            String status = request.getParameter("status");            Order order = orderService.getByThirdPartyOrderNo(orderNo);            if (status.equals("SUCCESS")) {//支付成功                order.setOverDate(new Date());                order.setOrderType(1);                //开通服务                userServerService.openServer(order.getUser().getId(), order.getApp().getId(), order.getProduct().getId());            } else if (status.equals("REFUND")) {//已退款                order.setOrderType(3);            } else if (status.equals("FAILED")) {//支付失败                order.setOrderType(2);            }            orderService.update(order);//更新订单状态            response.getWriter().write("success");        } catch (Exception e) {            logger.error("系统发生异常！", e);        }    }    /**     * 根据订单号获取支付结果     *     * @param orderNo     * @return     */    @RequestMapping(value = "/payResult", method = {RequestMethod.GET, RequestMethod.POST})    public DataResultForAPI payResult(@RequestParam("orderNo") String orderNo) {        DataResultForAPI dataRet = new DataResultForAPI();        JSONObject result = new JSONObject();        try {//            logger.error("PayApi-payResult-orderNo" + orderNo);            if (StringUtils.isNotBlank(orderNo)) {                Order order = orderService.getByOrderNo(orderNo);                if (order != null) {                    result.put("payResult", order.getOrderType());                    dataRet.setData(result);                    dataRet.pushOk("成功！");                } else {                    dataRet.pushError("订单号不存在");                }            } else {                dataRet.pushError("订单号不能为空");            }        } catch (Exception e) {            dataRet.pushError("失败：" + e.getMessage());            logger.error("根据订单号获取支付结果时，发生异常！", e);        }        return dataRet;    }    /**     * 参数转换     *     * @param configParams     * @return     */    private Map<String, Object> transform(List<PayConfigParams> configParams) {        Map<String, Object> params = new HashMap<>();        for (PayConfigParams configParam : configParams) {            if ("authCode".equals(configParam.getNameEn())) {                params.put("authCode", configParam.getValue());            }            if ("stbIp".equals(configParam.getNameEn())) {                params.put("stbIp", configParam.getValue());            }            if ("bookId".equals(configParam.getNameEn())) {                params.put("bookId", configParam.getValue());            }            if ("backUrl".equals(configParam.getNameEn())) {                params.put("backUrl", configParam.getValue());            }        }        return params;    }}