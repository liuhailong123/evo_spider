package cn.com.evo.cms.web.voService;import cn.com.evo.admin.manage.domain.entity.Province;import cn.com.evo.admin.manage.service.ProvinceService;import cn.com.evo.cms.domain.entity.cms.Picture;import cn.com.evo.cms.domain.entity.cms.SourceRel;import cn.com.evo.cms.domain.entity.pay.*;import cn.com.evo.cms.domain.entity.vip.UserServer;import cn.com.evo.cms.domain.enums.SourceTypeEnum;import cn.com.evo.cms.service.cms.PictureService;import cn.com.evo.cms.service.cms.SourceRelService;import cn.com.evo.cms.service.pay.ProductPayTypeRelService;import cn.com.evo.cms.service.pay.ProductServerRelService;import cn.com.evo.cms.service.pay.ProductService;import cn.com.evo.cms.service.pay.ServerService;import cn.com.evo.cms.service.vip.UserServerService;import cn.com.evo.cms.web.api.vo.*;import com.frameworks.utils.DateUtil;import com.google.common.collect.Lists;import org.dozer.Mapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.text.ParseException;import java.util.List;/** * @Description: * @author: lu.xin * @create: 2019-01-09 10:30 PM **/@Service@Transactionalpublic class ProductVoService {    @Autowired    private ProductService productService;    @Autowired    private ProductServerRelService productServerRelService;    @Autowired    private ProductPayTypeRelService payTypeRelService;    @Autowired    private SourceRelService sourceRelService;    @Autowired    private PictureService pictureService;    @Autowired    private UserServerService userServerService;    @Autowired    private ServerService serverService;    @Autowired    private ProvinceService provinceService;    @Autowired    private Mapper mapper;        /**     * 转换用户产品详情     *     * @param prodCode     * @param maturityTime     * @return     */    public UserProductDetailApiVo transProductData(String prodCode, String maturityTime) {        Product product = productService.getByCode(prodCode);        // 获取产品套餐下关联的产品服务List        List<ProductServerRel> productServerRels = productServerRelService.findByProductId(product.getId());        List<UserProductServerApiVo> apiVos = Lists.newArrayList();        if (productServerRels != null) {            for (ProductServerRel productServerRel : productServerRels) {                ServerRuleRel serverRuleRel = productServerRel.getServerRuleRel();                UserProductServerApiVo apiVo = new UserProductServerApiVo(serverRuleRel.getServer(), maturityTime);                apiVos.add(apiVo);            }        }        if (apiVos.size() > 0) {            UserProductDetailApiVo productDetailApivo = new UserProductDetailApiVo(product, apiVos);            //vo 增加图片返回            List<SourceRel> sourceRels = sourceRelService.findByFId(product.getId(), SourceTypeEnum.image.getIndex());            //获取当前省网资源服务器配置            Province provice = provinceService.getByEnable(1);            if (sourceRels.size() > 0) {                Picture picture = pictureService.findById(sourceRels.get(0).getSourceId());                productDetailApivo.setPictureUrl(provice.getImageHost() + picture.getFileName());            }            return productDetailApivo;        } else {            // 无未过期的服务            return null;        }    }    /**     * 将产品对象转化为产品详情对象     *     * @param product     * @return     */    public ProductDetailApivo transProductData(Product product) {        // 获取产品套餐下关联的产品服务List        List<ProductServerRel> productServerRels = productServerRelService.findByProductId(product.getId());        List<ProductServerApiVo> apiVos = Lists.newArrayList();        if (productServerRels != null) {            for (ProductServerRel productServerRel : productServerRels) {                ServerRuleRel serverRuleRel = productServerRel.getServerRuleRel();                ProductServerApiVo apiVo = new ProductServerApiVo(serverRuleRel.getServer(), serverRuleRel.getRule());                apiVos.add(apiVo);            }        }        // 获取产品套餐下关联的支付方式list        List<PayConfig> payConfig = payTypeRelService.findByProductId(product.getId());        List<PayConfigApiVo> payConfigVos = Lists.newArrayList();        for (PayConfig config : payConfig) {            PayConfigApiVo vo = mapper.map(config, PayConfigApiVo.class);            payConfigVos.add(vo);        }        ProductDetailApivo productDetailApivo = new ProductDetailApivo(product, apiVos, payConfigVos);        //vo 增加图片返回        List<SourceRel> sourceRels = sourceRelService.findByFId(product.getId(), SourceTypeEnum.image.getIndex());        //获取当前省网资源服务器配置        Province provice = provinceService.getByEnable(1);        if (sourceRels.size() > 0) {            Picture picture = pictureService.findById(sourceRels.get(0).getSourceId());            productDetailApivo.setPictureUrl(provice.getImageHost() + picture.getFileName());        }        return productDetailApivo;    }    /**     * 将用户订单转化为用户产品详情对象     *     * @param order     * @return     * @throws ParseException     */    public UserProductDetailApiVo transProductData(Order order) throws ParseException {        List<UserProductServerApiVo> apiVos = Lists.newArrayList();        // 用户所有服务        List<UserServer> userServers = userServerService.findByUserIdAndAppId(order.getUser().getId(), order.getApp().getId());        for (UserServer userServer : userServers) {            if (!DateUtil.compareTime(userServer.getMaturityTime())) {                //未过期                Server server = serverService.getByCode(userServer.getServerCode());                UserProductServerApiVo apiVo = new UserProductServerApiVo(server, userServer.getMaturityTime());                apiVos.add(apiVo);            }        }        if (apiVos.size() > 0) {            // 存在未过期的服务            Product product = productService.findById(order.getProduct().getId());            UserProductDetailApiVo productDetailApivo = new UserProductDetailApiVo(product, apiVos);            //vo 增加图片返回            List<SourceRel> sourceRels = sourceRelService.findByFId(product.getId(), SourceTypeEnum.image.getIndex());            //获取当前省网资源服务器配置            Province provice = provinceService.getByEnable(1);            if (sourceRels.size() > 0) {                Picture picture = pictureService.findById(sourceRels.get(0).getSourceId());                productDetailApivo.setPictureUrl(provice.getImageHost() + picture.getFileName());            }            return productDetailApivo;        } else {            // 无未过期的服务            return null;        }    }}