package cn.com.evo.integration.wasu.sdk;import cn.com.evo.cms.domain.entity.pay.Product;import cn.com.evo.cms.utils.HttpUtil;import cn.com.evo.integration.common.ConstantFactory;import cn.com.evo.integration.wasu.common.ConstantEnum;import cn.com.evo.integration.wasu.common.auth.RequestParameter;import cn.com.evo.integration.wasu.common.auth.ResponseBody;import com.alibaba.fastjson.JSONObject;import com.frameworks.utils.DateUtil;import org.apache.commons.lang3.StringUtils;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import java.util.List;/** * @Description: 华数鉴权SDK * @author: lu.xin * @create: 2019-04-19 9:53 AM **/public class AuthSDK {    protected static Logger logger = LogManager.getLogger(AuthSDK.class);    private static final String OK = "0";    /**     * 产品订购鉴权     *     * @param objectId 用户标识     * @param products 产品list     * @return true-通过 false-不通过     */    public static Boolean auth(String objectId, List<Product> products) {        boolean flag = false;        try {            ResponseBody responseBody = findUserOrders(objectId);            if (OK.equals(responseBody.getReturnCode())) {                List<ResponseBody.OutputBean.ProdSubscriptionBean> prodSubscriptionBeans =                        responseBody.getOutput().getProdSubscription();                if (prodSubscriptionBeans != null && prodSubscriptionBeans.size() > 0) {                    for (ResponseBody.OutputBean.ProdSubscriptionBean prodBean : prodSubscriptionBeans) {                        // 判断是否存在订购的亲多多产品                        for (Product product : products) {                            String productCode = product.getThirdPartyCode();                            if (StringUtils.isNotBlank(productCode)) {                                if (productCode.equals(prodBean.getProductId())) {                                    // 判断是否在有效期                                    if (DateUtil.compareTime(prodBean.getBusiValidDate() + " 00:00:00") &&                                            !DateUtil.compareTime(prodBean.getBusiExpriDate() + " 00:00:00")) {                                        flag = true;                                        break;                                    } else {                                        flag = false;                                    }                                } else {                                    flag = false;                                }                            } else {                                logger.error("产品未配置可用三方boss产品编码");                                flag = false;                            }                        }                    }                } else {                    logger.error("用户无已订购产品");                    flag = false;                }            } else {                logger.error("鉴权失败: returnCode:" + responseBody.getReturnCode());                flag = false;            }            return flag;        } catch (Exception e) {            throw new RuntimeException("华数产品鉴权异常:" + e.getMessage(), e);        }    }    /**     * 查询用户已订购产品list接口     *     * @param objectId     * @return ResponseBody     */    public static ResponseBody findUserOrders(String objectId) {        try {            RequestParameter requestParameter = new RequestParameter("31", "3104",                    new RequestParameter.InputBean(objectId,                            ConstantFactory.map.get(ConstantEnum.searchType.getKey()),                            ConstantFactory.map.get(ConstantEnum.operType.getKey())));            //参数json            JSONObject jsonObject = JSONObject.parseObject(JSONObject.toJSONString(requestParameter));            logger.error("请求参数：" + jsonObject);            String resultStr = HttpUtil.post(ConstantFactory.map.get(ConstantEnum.bossUrl.getKey()),                    jsonObject, "产品订购鉴权");            logger.error("返回结果：" + resultStr);            ResponseBody responseBody = JSONObject.parseObject(resultStr, ResponseBody.class);            return responseBody;        } catch (Exception e) {            logger.error("调用局方接口：查询已订购产品异常：" + e.getMessage(), e);            throw new RuntimeException("调用局方接口：查询已订购产品异常：" + e.getMessage(), e);        }    }}