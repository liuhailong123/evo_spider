package cn.com.evo.cms.web.voService;import cn.com.evo.cms.domain.entity.cms.Picture;import cn.com.evo.cms.domain.entity.cms.SourceRel;import cn.com.evo.cms.domain.entity.cms.Video;import cn.com.evo.cms.domain.vo.cms.SourcePictureVo;import cn.com.evo.cms.domain.vo.cms.SourceVideoVo;import cn.com.evo.cms.service.cms.PictureService;import cn.com.evo.cms.service.cms.SourceRelService;import cn.com.evo.cms.service.cms.VideoService;import com.google.common.collect.Lists;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import javax.transaction.Transactional;import java.util.List;/** * @Description: * @author: lu.xin * @create: 2018-11-12 5:11 PM **/@Service@Transactionalpublic class SourceVoService {    @Autowired    private VideoVoService videoVoService;    @Autowired    private PictureVoService pictureVoService;    @Autowired    private SourceRelService sourceRelService;    @Autowired    private PictureService pictureService;    @Autowired    private VideoService videoService;    /**     * 根据fId获取该fId下关联的视频资源Vo list     *     * @param fId     * @param type     * @return     */    public List<SourceVideoVo> findVideoByFId(String fId, int type) {        List<SourceVideoVo> sourceVideoVos = Lists.newArrayList();        try {            List<SourceRel> sourceRefs = sourceRelService.findByFId(fId, type);            sourceVideoVos = videoDataHandle(sourceRefs);        } catch (Exception e) {            throw new RuntimeException(e);        }        return sourceVideoVos;    }    /**     * 根据fId获取该fId下关联的图片资源Vo list     *     * @param fId     * @param type     * @return     */    public List<SourcePictureVo> findPictureByFId(String fId, int type) {        List<SourcePictureVo> sourcePictureVos = Lists.newArrayList();        try {            List<SourceRel> contentSources = sourceRelService.findByFId(fId, type);            sourcePictureVos = this.pictureDataHandle(contentSources);        } catch (Exception e) {            throw new RuntimeException(e);        }        return sourcePictureVos;    }    /**     * 图片资源数据处理     *     * @param sourceRefs     * @return     */    public List<SourcePictureVo> pictureDataHandle(List<SourceRel> sourceRefs) {        List<SourcePictureVo> sourcePictureVos = Lists.newArrayList();        for (SourceRel rel : sourceRefs) {            Picture picture = pictureService.findById(rel.getSourceId());            SourcePictureVo sourcePictureVo = pictureVoService.getSourcePictureVo(picture);            sourcePictureVo.setBusinessType(rel.getBusinessType());            sourcePictureVo.setSourceRelId(rel.getId());            sourcePictureVos.add(sourcePictureVo);        }        return sourcePictureVos;    }    /**     * 视频资源数据处理     *     * @param sourceRefs     * @return     */    public List<SourceVideoVo> videoDataHandle(List<SourceRel> sourceRefs) {        List<SourceVideoVo> sourceVideoVos = Lists.newArrayList();        for (SourceRel rel : sourceRefs) {            Video video = videoService.findById(rel.getSourceId());            if (video != null) {                SourceVideoVo sourceVideoVo = videoVoService.getSourceVideoVo(video);                sourceVideoVo.setSourceId(rel.getId());                sourceVideoVo.setSourceRelId(rel.getId());                sourceVideoVos.add(sourceVideoVo);            } else {                //无效的资源关系                sourceRelService.deleteById(rel.getId());            }        }        return sourceVideoVos;    }}