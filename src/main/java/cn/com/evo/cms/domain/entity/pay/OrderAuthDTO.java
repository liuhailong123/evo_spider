package cn.com.evo.cms.domain.entity.pay;import cn.com.evo.cms.domain.enums.UnitEnum;import com.frameworks.utils.DateUtil;import com.google.common.collect.Lists;import lombok.Data;import lombok.EqualsAndHashCode;import java.text.ParseException;import java.util.Calendar;import java.util.Date;import java.util.List;import java.util.Map;/** * @Description: * @author: lu.xin * @create: 2018-12-25 6:21 PM **/@Data@EqualsAndHashCode(callSuper = false)public class OrderAuthDTO {    private String productId;    private String overDate;    private Integer unit;    private Integer count;    public OrderAuthDTO() {    }    /**     * 通过sql映射实体     *     * @param map     */    public OrderAuthDTO(Map map) {        Object productIdTemp = map.get("productId");        if (productIdTemp == null) {            this.productId = null;        } else {            this.productId = productIdTemp.toString();        }        Object overDateTemp = map.get("overDate");        if (overDateTemp == null) {            this.overDate = null;        } else {            this.overDate = overDateTemp.toString();        }        Object unitTemp = map.get("unit");        if (unitTemp == null) {            this.unit = null;        } else {            this.unit = Integer.valueOf(unitTemp.toString());        }        Object countTemp = map.get("count");        if (countTemp == null) {            this.count = null;        } else {            this.count = Integer.valueOf(countTemp.toString());        }    }    /**     * 转换list     *     * @param list     * @return     */    public static List<OrderAuthDTO> toDto(List list) {        List<OrderAuthDTO> temp = Lists.newArrayList();        for (Object o : list) {            Map row = (Map) o;            OrderAuthDTO dto = new OrderAuthDTO(row);            temp.add(dto);        }        return temp;    }    /**     * 是否过期（时长类周期UnitEnum:0,1,2,3,4 ）     *     * @param dto     * @return false-未过期；true-已过期     */    public static boolean isOverTime(OrderAuthDTO dto) {        Integer count = dto.getCount();        Date overDate = DateUtil.stringToDate(dto.getOverDate());        Integer field = null;        if (overDate != null) {            switch (UnitEnum.getByValue(dto.getUnit())) {                case min:                    field = Calendar.MINUTE;                    break;                case hour:                    field = Calendar.HOUR_OF_DAY;                    break;                case day:                    field = Calendar.DAY_OF_MONTH;                    break;                case month:                    field = Calendar.MONTH;                    break;                case year:                    field = Calendar.YEAR;                    break;                default:                    break;            }        }        if (field != null) {            Date tempDate = DateUtil.addDate(overDate, field, count);            String endDate = DateUtil.format(tempDate, DateUtil.DATE_PATTERN.YYYY_MM_DD_HH_MM_SS);            try {                boolean flag = DateUtil.compareTime(endDate);                return flag;            } catch (ParseException e) {                throw new RuntimeException("时间转化异常", e);            }        } else {            throw new RuntimeException("周期有误");        }    }}