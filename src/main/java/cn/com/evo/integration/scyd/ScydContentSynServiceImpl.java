package cn.com.evo.integration.scyd;import cn.com.evo.admin.manage.domain.entity.Province;import cn.com.evo.cms.domain.entity.cms.CatalogueRelation;import cn.com.evo.cms.domain.entity.cms.Content;import cn.com.evo.cms.domain.entity.cms.Picture;import cn.com.evo.cms.domain.entity.cms.Video;import cn.com.evo.cms.domain.entity.total.ContentOperation;import cn.com.evo.cms.service.cms.CatalogueRelationService;import cn.com.evo.cms.service.cms.ContentService;import cn.com.evo.cms.service.cms.PictureService;import cn.com.evo.cms.service.cms.VideoService;import cn.com.evo.cms.service.total.ContentOperationService;import cn.com.evo.integration.common.ConstantFactory;import cn.com.evo.integration.common.enums.ActionEnum;import cn.com.evo.integration.scyd.common.ConstantEnum;import cn.com.evo.integration.scyd.common.ScydUtils;import cn.com.evo.integration.scyd.content.ScydWebserviceSDK;import cn.com.evo.integration.scyd.content.xml.ChildContentDto;import cn.com.evo.integration.scyd.content.xml.ContentDto;import cn.com.evo.integration.scyd.content.xml.CreateXML;import cn.com.evo.integration.scyd.query.ScydQuerySDK;import cn.com.evo.provincial.service.AbstractProvincialServiceImpl;import com.google.common.collect.Lists;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.io.File;import java.util.List;/** * @Description: 内容注入流程逻辑 服务 * @author: lu.xin * @create: 2019-03-11 1:57 PM **/@Service@Transactionalpublic class ScydContentSynServiceImpl extends AbstractProvincialServiceImpl {    @Autowired    private ContentService contentService;    @Autowired    private PictureService pictureService;    @Autowired    private VideoService videoService;    @Autowired    private ContentOperationService contentOperationService;    @Autowired    private CatalogueRelationService catalogueRelationService;    /**     * 服务文件至http目录     *     * @param picture     */    @Override    public void registImage(Picture picture, Province province, boolean deleteFlag) {        try {            String command = "chmod 777 " + picture.getCloudPath();            Runtime.getRuntime().exec(command).waitFor();        } catch (Exception e) {            throw new RuntimeException("上传资源至Nginx目录异常：" + e.getMessage(), e);        }    }    /**     * 视频文件逻辑     *     * @param video     */    @Override    public void registVideo(Video video, Province province) {        try {            String command = "chmod 777 " + video.getUrl();            Runtime.getRuntime().exec(command).waitFor();        } catch (Exception e) {            throw new RuntimeException("上传资源至Nginx目录异常：" + e.getMessage(), e);        }    }    /**     * 统一搜索数据同步接口     *     * @param catalogueRelationId     */    @Override    public void dataSyn(String catalogueRelationId) {        try {            CatalogueRelation catalogueRelation = catalogueRelationService.findById(catalogueRelationId);            if (catalogueRelation == null) {                throw new RuntimeException("catalogueRelationId错误：无法找到对应的对象");            }            if (catalogueRelation.getSynStatus() != 1) {                // 处理未同步的数据                Content content = contentService.findById(catalogueRelation.getBId());                if (content == null) {                    throw new RuntimeException("内容对象为空");                }                List<Picture> pictures = pictureService.findByContentId(content.getId());                if (pictures.size() == 0) {                    throw new RuntimeException("内容未挂载对应的封面海报");                }                String picUrl = pictureService.getImageUrl(pictures.get(0).getId());                // 生成json文件，提供给三方抓取                ScydQuerySDK.createJsonFile(catalogueRelation, content, picUrl);                // 修改当前栏目与内容关系对象的状态，防止重复的数据抓取                catalogueRelation.setSynStatus(1);                catalogueRelationService.saveOrUpdate(catalogueRelation);            }        } catch (Exception e) {            throw new RuntimeException("四川移动统一搜索数据同步逻辑异常" + e.getMessage(), e);        }    }    /**     * 电影首次注入     *     * @param contentId     * @param province     */    @Override    public void registMovie(String contentId, Province province) {        // 移动文件至指定目录//        moveMoviePictureAndVideoFile(contentId);        // 电影注入流程        movieProcess(contentId, province, ActionEnum.REGIST.getValue());    }    /**     * 电影修改注入     *     * @param contentId     * @param province     */    @Override    public void updateMovie(String contentId, Province province) {        movieProcess(contentId, province, ActionEnum.UPDATE.getValue());    }    /**     * 电影取消注入     *     * @param contentId     * @param province     */    @Override    public void deleteMovie(String contentId, Province province) {        movieProcess(contentId, province, ActionEnum.DELETE.getValue());    }    /**     * 剧集首次注入     *     * @param contentId     * @param province     */    @Override    public void registSeries(String contentId, Province province) {        Content episode = contentService.findById(contentId);        // 剧集获取内容对应子集内容列表        List<Content> contentChild = contentService.findByPIdOrderBySortAsc(contentId);        // 移动文件至指定目录//        moveSeriesPictureAndVideoFile(contentId, contentChild);        for (Content child : contentChild) {            Content temp = copyContent(episode, child);            // 剧集注入流程            seriesProcess(episode, temp, province, ActionEnum.REGIST.getValue());        }    }    /**     * 剧集子集首次注入     *     * @param contentId     * @param province     */    @Override    public void registSeriesChild(String contentId, Province province) {        Content child = contentService.findById(contentId);        Content episode = contentService.findById(child.getpId());        List<Content> contentChild = Lists.newArrayList();        contentChild.add(child);        // 移动文件至指定目录//        moveSeriesPictureAndVideoFile(contentId, contentChild);        Content temp = copyContent(episode, child);        // 剧集注入流程        seriesProcess(episode, temp, province, ActionEnum.REGIST.getValue());    }    /**     * 剧集修改注入     *     * @param contentId     * @param province     */    @Override    public void updateSeries(String contentId, Province province) {        Content episode = contentService.findById(contentId);        // 剧集获取内容对应子集内容列表        List<Content> contentChild = contentService.findByPIdOrderBySortAsc(contentId);        for (Content child : contentChild) {            Content temp = copyContent(episode, child);            // 剧集注入流程            seriesProcess(episode, temp, province, ActionEnum.UPDATE.getValue());        }    }    /**     * 剧集子集修改注入     *     * @param contentId     * @param province     */    @Override    public void updateSeriesChild(String contentId, Province province) {        Content child = contentService.findById(contentId);        Content episode = contentService.findById(child.getpId());        List<Content> contentChild = Lists.newArrayList();        contentChild.add(child);        Content temp = copyContent(episode, child);        // 剧集注入流程        seriesProcess(episode, temp, province, ActionEnum.UPDATE.getValue());    }    /**     * 剧集取消注入     *     * @param contentId     * @param province     */    @Override    public void deleteSeries(String contentId, Province province) {        Content episode = contentService.findById(contentId);        // 剧集获取内容对应子集内容列表        List<Content> contentChild = contentService.findByPIdOrderBySortAsc(contentId);        for (Content child : contentChild) {            Content temp = copyContent(episode, child);            // 剧集注入流程            seriesProcess(episode, temp, province, ActionEnum.DELETE.getValue());        }    }    /**     * 剧集子集取消注入     *     * @param contentId     * @param province     */    @Override    public void deleteSeriesChild(String contentId, Province province) {        Content child = contentService.findById(contentId);        Content episode = contentService.findById(child.getpId());        List<Content> contentChild = Lists.newArrayList();        contentChild.add(child);        Content temp = copyContent(episode, child);        // 剧集注入流程        seriesProcess(episode, temp, province, ActionEnum.DELETE.getValue());    }    /**     * 电影内容注入流程     *     * @param contentId     */    private void movieProcess(String contentId, Province province, String action) {        String xmlStr = "";        String xmlUrl = "";        try {            Content content = contentService.findById(contentId);            if (content == null) {                throw new RuntimeException("内容不存在!!!无法进行注入!!!");            }            // 获取内容对应图片对象list            List<Picture> pictures = pictureService.findByContentId(contentId);            // 电影则内容总集数为1            content.setSumNum(1);            // 电影直接通过内容对象构造子内容对象            List<Content> contentChild = Lists.newArrayList();            content.setSort(1);            contentChild.add(content);            // 转换            ContentDto contentDto = convertContentDto(content, contentChild, pictures, province);            // 创建xml文件            xmlStr = CreateXML.create(contentDto, action);        } catch (Exception e) {            throw new RuntimeException("根据电影内容创建xml异常！！！" + e.getMessage(), e);        }        try {            xmlUrl = ScydUtils.createLoaclXML(contentId, xmlStr, province);        } catch (Exception e) {            throw new RuntimeException("创建本地xml文件异常" + e.getMessage(), e);        }        try {            String xmlFtpUrl = ScydUtils.createXmlFtpUrl(xmlUrl, province);            // 调用局方接口：通知局方进行内容采集            String correlateId = ConstantFactory.map.get(ConstantEnum.csp_id.getKey()) + ScydUtils.createSixBitRandomNum();            ScydWebserviceSDK.callCTMS(correlateId, xmlFtpUrl);            // 更新内容注入状态            Content content = contentService.findById(contentId);            content.setSynType(1);            contentService.update(content);            // 保存内容采集记录表            ContentOperation contentOperation = new ContentOperation();            contentOperation.setContent(content);            contentOperation.setCorrelateId(correlateId);            contentOperation.setInfo(xmlFtpUrl);            contentOperation.setStatus(1);            contentOperationService.save(contentOperation);        } catch (Exception e) {            throw new RuntimeException("调用局方接口：通知局方进行内容采集异常" + e.getMessage(), e);        }    }    /**     * 剧集注入逻辑     *     * @param episode     * @param child     * @param province     * @param action     */    public void seriesProcess(Content episode, Content child, Province province, String action) {        String xmlStr = "";        String xmlUrl = "";        try {            if (child == null) {                throw new RuntimeException("内容不存在!!!无法进行注入!!!");            }            // 获取内容对应图片对象list            List<Picture> pictures = pictureService.findByContentId(episode.getId());            // 内容对象构造子内容对象            List<Content> contentChild = Lists.newArrayList();            contentChild.add(child);            // 转换            ContentDto contentDto = convertContentDto(episode, contentChild, pictures, province);            // 创建xml文件            xmlStr = CreateXML.create(contentDto, action);        } catch (Exception e) {            throw new RuntimeException("根据电影内容创建xml异常！！！" + e.getMessage(), e);        }        try {            xmlUrl = ScydUtils.createLoaclXML(child.getId(), xmlStr, province);        } catch (Exception e) {            throw new RuntimeException("创建本地xml文件异常" + e.getMessage(), e);        }        try {            String xmlFtpUrl = ScydUtils.createXmlFtpUrl(xmlUrl, province);            // 调用局方接口：通知局方进行内容采集            String correlateId = ConstantFactory.map.get(ConstantEnum.csp_id.getKey()) + ScydUtils.createSixBitRandomNum();            ScydWebserviceSDK.callCTMS(correlateId, xmlFtpUrl);            // 更新内容注入状态            Content temp = contentService.findById(child.getId());            temp.setSynType(1);            contentService.update(temp);            // 保存内容采集记录表            ContentOperation contentOperation = new ContentOperation();            contentOperation.setContent(temp);            contentOperation.setCorrelateId(correlateId);            contentOperation.setInfo(xmlFtpUrl);            contentOperation.setStatus(1);            contentOperationService.save(contentOperation);        } catch (Exception e) {            throw new RuntimeException("调用局方接口：通知局方进行内容采集异常" + e.getMessage(), e);        }    }    /**     * 移动电影内容相关图片和视频文件至指定目录     * 图片移动至： /home/evo_ftp/data/ftp/pub/image/     * 视频移动至： /home/evomedia/static/video/     *     * @param contentId     */    public void moveMoviePictureAndVideoFile(String contentId) {        try {            Content content = contentService.findById(contentId);            if (content == null) {                throw new RuntimeException("内容不存在!!!无法进行注入!!!");            }            // 获取内容对应图片对象list            List<Picture> pictures = pictureService.findByContentId(contentId);            // 获取内容相关视频对象list            List<Video> videos = videoService.findByContentId(contentId);            // 开始移动-图片文件            for (Picture picture : pictures) {                String localFile = picture.getCloudPath();                try {                    File temp = new File(localFile);                    ScydUtils.moveFile(localFile, ConstantFactory.map.get(ConstantEnum.image_ftp_dir.getKey()) + temp.getName());                } catch (Exception e) {                }            }            // 开始移动-视频文件            for (Video video : videos) {                String localFile = video.getUrl();                try {                    File temp = new File(localFile);                    ScydUtils.moveFile(localFile, ConstantFactory.map.get(ConstantEnum.video_ftp_dir.getKey()) + temp.getName());                } catch (Exception e) {                }            }        } catch (Exception e) {            throw new RuntimeException("移动内容相关图片和视频文件至指定目录异常:" + e.getMessage(), e);        }    }    /**     * 移动电影内容相关图片和视频文件至指定目录     * 图片移动至： /home/evo_ftp/data/ftp/pub/image/     * 视频移动至： /home/evomedia/static/video/     *     * @param contentId 内容id     * @param children  子集内容list对象     */    public void moveSeriesPictureAndVideoFile(String contentId, List<Content> children) {        try {            Content content = contentService.findById(contentId);            if (content == null) {                throw new RuntimeException("内容不存在!!!无法进行注入!!!");            }            // 获取内容对应图片对象list            List<Picture> pictures = pictureService.findByContentId(contentId);            // 开始移动-图片文件            for (Picture picture : pictures) {                String localFile = picture.getCloudPath();                try {                    File temp = new File(localFile);                    if (temp.exists()) {                        ScydUtils.moveFile(localFile, ConstantFactory.map.get(ConstantEnum.image_ftp_dir.getKey()) + temp.getName());                    }                } catch (Exception e) {                }            }            // 开始移动-视频文件            for (Content child : children) {                // 获取内容相关视频对象list                List<Video> videos = videoService.findByContentId(child.getId());                // 开始移动-视频文件                for (Video video : videos) {                    String localFile = video.getUrl();                    try {                        File temp = new File(localFile);                        if (temp.exists()) {                            ScydUtils.moveFile(localFile, ConstantFactory.map.get(ConstantEnum.video_ftp_dir.getKey()) + temp.getName());                        }                    } catch (Exception e) {                    }                }            }        } catch (Exception e) {            throw new RuntimeException("移动内容相关图片和视频文件至指定目录异常:" + e.getMessage(), e);        }    }    /**     * 数据处理转换     * 将 内容对象，子内容对象，海报对象 转换为底层接口需要的防范     *     * @param content  内容对象     * @param children 子内容对象     * @param pictures 海报对象     * @param province 省网配置信息     * @return     */    private ContentDto convertContentDto(Content content, List<Content> children, List<Picture> pictures, Province province) {        List<ChildContentDto> childrenDto = Lists.newArrayList();        for (Content child : children) {            ChildContentDto dto = new ChildContentDto();            // 设置子内容对象            dto.setChildContent(child);            // 获取子内容相关视频对象list            List<Video> videos = videoService.findByContentId(child.getId());            if (videos.size() > 0) {                // 设置视频对象                dto.setVideo(videos.get(0));            }            childrenDto.add(dto);        }        // 设置内容dto        ContentDto contentDto = new ContentDto();        contentDto.setContent(content);        contentDto.setPictureUrls(ScydUtils.createPictureFtpUrls(pictures, province));        contentDto.setChildren(childrenDto);        return contentDto;    }    private Content copyContent(Content episode, Content child) {        Content temp = new Content();        temp.setId(child.getId());        temp.setName(child.getName());        temp.setGrade(episode.getGrade());        temp.setTitle(episode.getTitle());        temp.setYear(episode.getYear());        temp.setInfo(episode.getInfo());        temp.setRunTime(child.getRunTime());        temp.setClassify(episode.getClassify());        temp.setClassifyTags(episode.getClassifyTags());        temp.setYearTags(episode.getYearTags());        temp.setAreaTags(episode.getAreaTags());        temp.setActorTags(episode.getActorTags());        temp.setDirectorTags(episode.getDirectorTags());        temp.setSumNum(episode.getSumNum());        temp.setSort(child.getSort());        temp.setLanguage(episode.getLanguage());        return temp;    }}