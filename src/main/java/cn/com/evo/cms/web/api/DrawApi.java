package cn.com.evo.cms.web.api;import cn.com.evo.admin.manage.domain.entity.Province;import cn.com.evo.admin.manage.service.ProvinceService;import cn.com.evo.cms.constant.ProvinceCodeEnum;import cn.com.evo.cms.domain.entity.activity.Draw;import cn.com.evo.cms.domain.entity.activity.DrawChild;import cn.com.evo.cms.domain.entity.activity.DrawQuery;import cn.com.evo.cms.domain.entity.pay.Product;import cn.com.evo.cms.domain.entity.vip.UserAccount;import cn.com.evo.cms.domain.vo.activity.DrawChildVo;import cn.com.evo.cms.service.activity.DrawChildService;import cn.com.evo.cms.service.activity.DrawQueryService;import cn.com.evo.cms.service.activity.DrawService;import cn.com.evo.cms.service.cms.PictureService;import cn.com.evo.cms.service.pay.ProductRelService;import cn.com.evo.cms.service.vip.UserAccountService;import cn.com.evo.cms.service.vip.UserServerService;import cn.com.evo.cms.web.api.vo.DrawApiVo;import cn.com.evo.cms.web.api.vo.DrawQueryApiVo;import cn.com.evo.integration.xjnt.sdk.PayUtilXinJiang;import cn.com.evo.integration.xjnt.sdk.dto.XinJiangBossIsOrderRsp;import com.alibaba.fastjson.JSONObject;import com.frameworks.core.web.controller.BaseController;import com.frameworks.core.web.page.Pager;import com.frameworks.core.web.result.DataResultForAPI;import com.frameworks.core.web.search.DynamicSpecifications;import com.frameworks.core.web.search.SearchFilter;import com.frameworks.utils.DateUtil;import com.google.common.collect.Lists;import org.dozer.Mapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.jpa.domain.Specification;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.*;import java.util.List;/** * @Description: 抽奖接口 * @author: lu.xin * @create: 2019-04-23 1:40 PM **/@Controller@RequestMapping("/api/draw")@CrossOrigin(origins = "*", maxAge = 3600)public class DrawApi extends BaseController {    @Autowired    private DrawService drawService;    @Autowired    private DrawQueryService drawQueryService;    @Autowired    private UserAccountService userAccountService;    @Autowired    private UserServerService userServerService;    @Autowired    private ProvinceService provinceService;    @Autowired    private ProductRelService productRelService;    @Autowired    private PictureService pictureService;    @Autowired    private DrawChildService drawChildService;    @Autowired    private Mapper mapper;    /**     * 抽奖接口     *     * @param cardNo 智能卡号     * @param appId  应用id     * @param drawId 抽奖活动id     * @param stbNo  机顶盒号 新疆省网必填     * @param stbIp  机顶盒ip 新疆省网必填     * @return     */    @RequestMapping(value = "/action", method = {RequestMethod.GET, RequestMethod.POST})    @ResponseBody    public DataResultForAPI action(@RequestParam("cardNo") String cardNo,                                   @RequestParam("appId") String appId,                                   @RequestParam("drawId") String drawId,                                   @RequestParam(value = "stbNo", required = false) String stbNo,                                   @RequestParam(value = "stbIp", required = false) String stbIp) {        DataResultForAPI dataRet = new DataResultForAPI();        JSONObject data = new JSONObject();        try {            //1 判断是否存在有效期内的抽奖            Draw draw = drawService.findById(drawId);            if (draw == null) {                dataRet.pushOk("暂无可用的抽奖活动");                data.put("retCode", "-1");                data.put("retMsg", "暂无可用的抽奖活动");                dataRet.setData(data);                return dataRet;            }            //2 判断用户是否存在            UserAccount userAccount = userAccountService.getByAccountNoAndAccountType(cardNo, 3,                    null);            if (userAccount == null) {                dataRet.pushOk("用户不存在或创建失败");                data.put("retCode", "-2");                data.put("retMsg", "用户不存在或创建失败");                dataRet.setData(data);                return dataRet;            }            //3 判断是否存在数量限制            Integer residueCount = drawQueryService.residueCount(userAccount.getUserId(), draw);            if (residueCount == 0) {                dataRet.pushOk("无剩余抽奖次数");                data.put("retCode", "-3");                data.put("retMsg", "无剩余抽奖次数");                dataRet.setData(data);                return dataRet;            }            //4 判断用户是否有资格进行抽奖            if (draw.getIsNeedOrder() == 1) {                // 根据serverCode、userId查询服务开通表，判断是否到期                boolean flag = userServerService.checkUserServer(userAccount.getUserId(),                        "10001", appId);                if (flag) {                    Province province = provinceService.getByEnable(1);                    if (province == null) {                        dataRet.pushOk("平台省网配置错误");                        data.put("retCode", "-4");                        data.put("retMsg", "平台省网配置错误");                        dataRet.setData(data);                        return dataRet;                    }                    boolean flag1 = false;                    // 省网code枚举                    ProvinceCodeEnum provinceCodeEnum = ProvinceCodeEnum.getByName(province.getCode());                    switch (provinceCodeEnum) {                        case XinJiang:                            // 栏目配置的BOSS产品列表                            List<Product> list = productRelService.findByBizIdAndType(appId, 2);                            if (list.size() > 0) {                                for (Product product : list) {                                    // 根据appId获取对应产品list上面的对应ppvid。                                    /*String ppvId = product.getThirdPartyId();                                    if (ppvId != null) {                                        // 通过上述三方boss产品编码调用boss接口，判断产品查询是否订购                                        XinJiangBossIsOrderRsp rsp = PayUtilXinJiang.queryIsOrdered(cardNo,                                                stbNo, stbIp, ppvId);                                        if ("0".equals(rsp.getRetCode())) {                                            flag1 = false;                                            break;                                        } else {                                            flag1 = true;                                        }                                    } else {                                        // 未配置三方boss产品编码，跳过验证                                        logger.error("产品未配置可用三方boss产品编码");                                        flag1 = true;                                    }*/                                    String productCode = product.getThirdPartyCode();                                    if (productCode != null) {                                        // 通过上述三方boss产品编码调用boss接口，判断产品查询是否订购                                        XinJiangBossIsOrderRsp rsp = PayUtilXinJiang.queryIsOrdered(cardNo,                                                productCode);                                        if ("0".equals(rsp.getRetCode())) {                                            flag1 = false;                                            break;                                        } else {                                            flag1 = true;                                        }                                    } else {                                        // 未配置三方boss产品编码，跳过验证                                        logger.error("产品未配置可用三方boss产品编码");                                        flag1 = true;                                    }                                }                            } else {                                logger.error("应用未配置可用产品");                                flag1 = true;                            }                            break;                        default:                            logger.error("无可用省网配置");                            flag1 = true;                            break;                    }                    // 最终判断                    if (flag1) {                        dataRet.pushOk("开通本产品的用户才有资格抽奖");                        data.put("retCode", "-5");                        data.put("retMsg", "开通本产品的用户才有资格抽奖");                        dataRet.setData(data);                        return dataRet;                    }                }            }            // 5 开始抽奖            DrawQuery drawQuery = drawQueryService.draw(userAccount.getUserId(), cardNo, appId, draw);            DrawChild drawChild = drawChildService.findById(drawQuery.getDrawChildId());            DrawQueryApiVo drawQueryApiVo = new DrawQueryApiVo(drawQuery, drawChild);            if (drawQuery.getIsOwn() == 0) {                // 未中奖                dataRet.pushOk("未中奖");                data.put("retCode", "0");                data.put("retMsg", "未中奖");                data.put("data", drawQueryApiVo);                dataRet.setData(data);            } else {                // 已中奖                dataRet.pushOk("已中奖");                data.put("retCode", "1");                data.put("retMsg", "已中奖");                data.put("data", drawQueryApiVo);                dataRet.setData(data);            }        } catch (Exception e) {            logger.error("抽奖异常:" + e.getMessage(), e);            dataRet.pushError("抽奖异常!!!" + e.getMessage());        }        return dataRet;    }    /**     * 获取抽奖详情接口     *     * @param appId 应用id     * @return     */    @RequestMapping(value = "/info", method = {RequestMethod.GET, RequestMethod.POST})    @ResponseBody    public DataResultForAPI info(@RequestParam("appId") String appId,                                 @RequestParam("cardNo") String cardNo) {        DataResultForAPI dataRet = new DataResultForAPI();        JSONObject data = new JSONObject();        try {            // 获取有效抽奖活动            List<Draw> list = drawService.findByEnableAndAppId(1, appId);            if (list.size() == 0) {                dataRet.pushOk("暂无可用的抽奖活动");                data.put("retCode", "-1");                data.put("retMsg", "暂无可用的抽奖活动");                dataRet.setData(data);                return dataRet;            }            Draw entity = list.get(0);            DrawApiVo vo = mapper.map(entity, DrawApiVo.class);            // 获取背景海报            String imageUrl = pictureService.getImageUrl(entity.getPictureId());            vo.setImageUrl(imageUrl);            // 获取用户剩余抽奖次数            UserAccount userAccount = userAccountService.getByAccountNoAndAccountType(cardNo, 3,                    null);            if (userAccount == null) {                dataRet.pushOk("用户不存在或创建失败");                data.put("retCode", "-2");                data.put("retMsg", "用户不存在或创建失败");                dataRet.setData(data);                return dataRet;            }            Integer residueCount = drawQueryService.residueCount(userAccount.getUserId(), entity);            vo.setResidueCount(residueCount);            // 获取奖品信息            List<DrawChild> drawChildren = drawChildService.findByDrawIdAndEnable(entity.getId(), 1);            List<DrawChildVo> awards = Lists.newArrayList();            for (DrawChild award : drawChildren) {                DrawChildVo drawChildVo = mapper.map(award, DrawChildVo.class);                String bgUrl = pictureService.getImageUrl(award.getPictureId());                drawChildVo.setBgUrl(bgUrl);                awards.add(drawChildVo);            }            vo.setAwards(awards);            // 判断抽奖活动是否开始            if (DateUtil.compareTime(entity.getBeginTime()) &&                    !DateUtil.compareTime(entity.getEndTime())) {                vo.setIsBegin(1);            } else {                vo.setIsBegin(0);            }            dataRet.pushOk("获取成功");            data.put("retCode", "1");            data.put("retMsg", "获取成功");            data.put("draw", vo);            dataRet.setData(data);        } catch (Exception e) {            logger.error("获取抽奖详情异常:" + e.getMessage(), e);            dataRet.pushError("获取抽奖详情异常!!!" + e.getMessage());        }        return dataRet;    }    /**     * 获取我的中奖信息接口     *     * @param cardNo   智能卡号     * @param appId    应用id     * @param pageSize 每页数据条数     * @param pageNum  页码     * @return     */    @RequestMapping(value = "/myRecord", method = {RequestMethod.GET, RequestMethod.POST})    @ResponseBody    public DataResultForAPI myRecord(@RequestParam("cardNo") String cardNo,                                     @RequestParam("appId") String appId,                                     @RequestParam("pageSize") Integer pageSize,                                     @RequestParam("pageNum") Integer pageNum    ) {        DataResultForAPI dataRet = new DataResultForAPI();        JSONObject data = new JSONObject();        try {            // 获取用户信息            UserAccount userAccount = userAccountService.getByAccountNoAndAccountType(cardNo, 3,                    null);            if (userAccount == null) {                dataRet.pushOk("用户不存在或创建失败");                data.put("retCode", "-2");                data.put("retMsg", "用户不存在或创建失败");                dataRet.setData(data);                return dataRet;            }            Pager page = new Pager();            page.setPageNumber(pageNum);            page.setPageSize(pageSize);            page.setSortName("createDate");            page.setSortOrder("desc");            List<SearchFilter> filters = Lists.newArrayList();            filters.add(new SearchFilter("userId", SearchFilter.Operator.EQ, userAccount.getUserId()));            filters.add(new SearchFilter("appId", SearchFilter.Operator.EQ, appId));            filters.add(new SearchFilter("isOwn", SearchFilter.Operator.EQ, 1));            filters.add(new SearchFilter("phone", SearchFilter.Operator.ISNOTNULL, null));            Specification<DrawQuery> specification = DynamicSpecifications                    .bySearchFilter(DrawQuery.class, filters);            List<DrawQuery> list = drawQueryService.findByCondition(specification, page);            List<DrawQueryApiVo> vos = Lists.newArrayList();            for (DrawQuery drawQuery : list) {                DrawChild drawchild = drawChildService.findById(drawQuery.getDrawChildId());                DrawQueryApiVo vo = new DrawQueryApiVo(drawQuery, drawchild);                vos.add(vo);            }            if (vos.size() == 0) {                dataRet.pushOk("暂无数据");                data.put("retCode", "1");                data.put("retMsg", "暂无数据");                data.put("drawQuerys", vos);                dataRet.setData(data);            } else {                dataRet.pushOk("获取成功");                data.put("retCode", "1");                data.put("retMsg", "获取成功");                data.put("drawQuerys", vos);                dataRet.setData(data);            }        } catch (Exception e) {            logger.error("获取我的中奖记录异常:" + e.getMessage(), e);            dataRet.pushError("获取我的中奖记录异常!!!" + e.getMessage());        }        return dataRet;    }    /**     * 获取全部中奖信息接口     *     * @param appId 应用id     * @return     */    @RequestMapping(value = "/record", method = {RequestMethod.GET, RequestMethod.POST})    @ResponseBody    public DataResultForAPI record(@RequestParam("appId") String appId,                                   @RequestParam("pageSize") Integer pageSize,                                   @RequestParam("pageNum") Integer pageNum) {        DataResultForAPI dataRet = new DataResultForAPI();        JSONObject data = new JSONObject();        try {            Pager page = new Pager();            page.setPageNumber(pageNum);            page.setPageSize(pageSize);            page.setSortName("createDate");            page.setSortOrder("desc");            List<SearchFilter> filters = Lists.newArrayList();            filters.add(new SearchFilter("isOwn", SearchFilter.Operator.EQ, 1));            filters.add(new SearchFilter("appId", SearchFilter.Operator.EQ, appId));            Specification<DrawQuery> specification = DynamicSpecifications                    .bySearchFilter(DrawQuery.class, filters);            List<DrawQuery> list = drawQueryService.findByCondition(specification, page);            List<DrawQueryApiVo> vos = Lists.newArrayList();            for (DrawQuery drawQuery : list) {                DrawChild drawchild = drawChildService.findById(drawQuery.getDrawChildId());                DrawQueryApiVo vo = new DrawQueryApiVo(drawQuery, drawchild);                vos.add(vo);            }            if (list.size() == 0) {                dataRet.pushOk("暂无数据");                data.put("retCode", "-1");                data.put("retMsg", "暂无数据");                data.put("drawQuerys", vos);                dataRet.setData(data);                return dataRet;            } else {                dataRet.pushOk("获取成功");                data.put("retCode", "1");                data.put("retMsg", "获取成功");                data.put("drawQuerys", vos);                dataRet.setData(data);            }        } catch (Exception e) {            logger.error("获取全部中奖记录异常:" + e.getMessage(), e);            dataRet.pushError("获取全部中奖记录异常!!!" + e.getMessage());        }        return dataRet;    }    /**     * 提交个人联系方式等信息接口     *     * @param cardNo      智能卡号     * @param phone       联系手机号     * @param drawQueryId 中奖记录id     * @return     */    @RequestMapping(value = "/submitPersonInfo", method = {RequestMethod.GET, RequestMethod.POST})    @ResponseBody    public DataResultForAPI submitPersonInfo(@RequestParam("cardNo") String cardNo,                                             @RequestParam("phone") String phone,                                             @RequestParam("drawQueryId") String drawQueryId) {        DataResultForAPI dataRet = new DataResultForAPI();        JSONObject data = new JSONObject();        try {            // 获取用户信息            UserAccount userAccount = userAccountService.getByAccountNoAndAccountType(cardNo, 3,                    null);            if (userAccount == null) {                dataRet.pushOk("用户不存在或创建失败");                data.put("retCode", "-2");                data.put("retMsg", "用户不存在或创建失败");                dataRet.setData(data);                return dataRet;            }            // 获取获奖记录            DrawQuery drawQuery = drawQueryService.findById(drawQueryId);            if (drawQuery == null) {                dataRet.pushOk("获奖记录不存在");                data.put("retCode", "-1");                data.put("retMsg", "获奖记录不存在");                dataRet.setData(data);                return dataRet;            }            //更新联系手机号            drawQuery.setPhone(phone);            drawQueryService.update(drawQuery);            dataRet.pushOk("提交成功");            data.put("retCode", "1");            data.put("retMsg", "提交成功");            dataRet.setData(data);        } catch (Exception e) {            logger.error("提交个人信息异常:" + e.getMessage(), e);            dataRet.pushError("提交个人信息异常!!!" + e.getMessage());        }        return dataRet;    }}