package cn.com.evo.integration.common;import cn.com.evo.cms.service.cms.SpService;import com.frameworks.core.logger.annotation.RunLogger;import com.frameworks.core.web.controller.BaseController;import com.frameworks.core.web.result.MsgResult;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.MediaType;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.*;/** * @Description: sp省网注入controller * @author: lu.xin * @create: 2019-03-15 1:53 PM **/@RequestMapping("/sp")@Controllerpublic class SpController extends BaseController {    @Autowired    private SpService spService;    @RunLogger(value = "电影省网注入", isSaveRequest = true)    @RequestMapping(value = "/spMovieSyn/{action}/{id}", method = {RequestMethod.POST}, produces = {MediaType.APPLICATION_JSON_VALUE})    @ResponseBody    public MsgResult spMovieSyn(@PathVariable("action") String action, @PathVariable("id") String contentId) {        MsgResult msgRet = new MsgResult();        try {            // 调用统一注入接口（省网注入的唯一入口）            spService.synMovie(contentId, action);            msgRet.pushOk("省网注入成功，部分省网可能需要等待一段时间才能注入完成！！请等待！！！");        } catch (Exception e) {            msgRet.pushError("省网注入失败：" + e.getMessage());            logger.error("省网注入时，发生异常！", e);        }        return msgRet;    }    @RunLogger(value = "电影批量省网注入", isSaveRequest = true)    @RequestMapping(value = "/spMovieSyn/{action}", method = {RequestMethod.POST}, produces = {MediaType.APPLICATION_JSON_VALUE})    @ResponseBody    public MsgResult spMovieSyn(@PathVariable("action") String action, @RequestParam("ids[]") String[] contentIds) {        MsgResult msgRet = new MsgResult();        try {            // 调用统一注入接口（省网注入的唯一入口）            spService.synMovies(contentIds, action);            msgRet.pushOk("批量省网注入成功，部分省网可能需要等待一段时间才能注入完成！！请等待！！！");        } catch (Exception e) {            msgRet.pushError("批量省网注入失败：" + e.getMessage());            logger.error("批量省网注入时，发生异常！", e);        }        return msgRet;    }    @RunLogger(value = "剧集省网注入", isSaveRequest = true)    @RequestMapping(value = "/spEpisodeSyn/{action}/{id}", method = {RequestMethod.POST}, produces = {MediaType.APPLICATION_JSON_VALUE})    @ResponseBody    public MsgResult spEpisodeSyn(@PathVariable("action") String action, @PathVariable("id") String contentId) {        MsgResult msgRet = new MsgResult();        try {            // 调用统一注入接口（省网注入的唯一入口）            spService.synEpisode(contentId, action);            msgRet.pushOk("省网注入成功，部分省网可能需要等待一段时间才能注入完成！！请等待！！！");        } catch (Exception e) {            msgRet.pushError("省网注入失败：" + e.getMessage());            logger.error("省网注入时，发生异常！", e);        }        return msgRet;    }    @RunLogger(value = "剧集批量省网注入", isSaveRequest = true)    @RequestMapping(value = "/spEpisodeSyn/{action}", method = {RequestMethod.POST}, produces = {MediaType.APPLICATION_JSON_VALUE})    @ResponseBody    public MsgResult spEpisodeSyn(@PathVariable("action") String action, @RequestParam("ids[]") String[] contentIds) {        MsgResult msgRet = new MsgResult();        try {            // 调用统一注入接口（省网注入的唯一入口）            spService.synEpisodes(contentIds, action);            msgRet.pushOk("批量省网注入成功，部分省网可能需要等待一段时间才能注入完成！！请等待！！！");        } catch (Exception e) {            msgRet.pushError("批量省网注入失败：" + e.getMessage());            logger.error("批量省网注入时，发生异常！", e);        }        return msgRet;    }    @RunLogger(value = "剧集子集省网注入", isSaveRequest = true)    @RequestMapping(value = "/spEpisodeChildSyn/{action}/{id}", method = {RequestMethod.POST}, produces = {MediaType.APPLICATION_JSON_VALUE})    @ResponseBody    public MsgResult spEpisodeChildSyn(@PathVariable("action") String action, @PathVariable("id") String contentId) {        MsgResult msgRet = new MsgResult();        try {            // 调用统一注入接口（省网注入的唯一入口）            spService.synEpisodeChild(contentId, action);            msgRet.pushOk("省网注入成功，部分省网可能需要等待一段时间才能注入完成！！请等待！！！");        } catch (Exception e) {            msgRet.pushError("省网注入失败：" + e.getMessage());            logger.error("省网注入时，发生异常！", e);        }        return msgRet;    }    @RunLogger(value = "剧集子集批量省网注入", isSaveRequest = true)    @RequestMapping(value = "/spEpisodeChildSyn/{action}", method = {RequestMethod.POST}, produces = {MediaType.APPLICATION_JSON_VALUE})    @ResponseBody    public MsgResult spEpisodeChildSyn(@PathVariable("action") String action, @RequestParam("ids[]") String[] contentIds) {        MsgResult msgRet = new MsgResult();        try {            // 调用统一注入接口（省网注入的唯一入口）            spService.synEpisodeChilds(contentIds, action);            msgRet.pushOk("批量省网注入成功，部分省网可能需要等待一段时间才能注入完成！！请等待！！！");        } catch (Exception e) {            msgRet.pushError("批量省网注入失败：" + e.getMessage());            logger.error("批量省网注入时，发生异常！", e);        }        return msgRet;    }    @RunLogger(value = "视频数据同步", isSaveRequest = true)    @RequestMapping(value = "/dataSyn", method = {RequestMethod.POST}, produces = {MediaType.APPLICATION_JSON_VALUE})    @ResponseBody    public MsgResult dataSyn() {        MsgResult msgRet = new MsgResult();        try {            spService.pullResource();            msgRet.pushOk("视频同步成功！");        } catch (Exception e) {            msgRet.pushError("视频同步失败：" + e.getMessage());            logger.error("视频同步时，发生异常！", e);        }        return msgRet;    }    @RunLogger(value = "语音搜索数据同步", isSaveRequest = true)    @RequestMapping(value = "/voiceSyn/{id}", method = {RequestMethod.POST}, produces = {MediaType.APPLICATION_JSON_VALUE})    @ResponseBody    public MsgResult voiceSyn(@PathVariable("id") String catalogueRelationId) {        MsgResult msgRet = new MsgResult();        try {            spService.voiceSyn(catalogueRelationId);            msgRet.pushOk("语音搜索数据同步成功！！！");        } catch (Exception e) {            msgRet.pushError("语音搜索数据同步失败：" + e.getMessage());            logger.error("语音搜索数据同步时，发生异常！", e);        }        return msgRet;    }    @RunLogger(value = "批量语音搜索数据同步", isSaveRequest = true)    @RequestMapping(value = "/voiceSyn", method = {RequestMethod.POST}, produces = {MediaType.APPLICATION_JSON_VALUE})    @ResponseBody    public MsgResult voiceSyn(@RequestParam("ids[]") String[] catalogueRelationIds) {        MsgResult msgRet = new MsgResult();        try {            for (String catalogueRelationId : catalogueRelationIds) {                spService.voiceSyn(catalogueRelationId);            }            msgRet.pushOk("批量语音搜索数据同步成功");        } catch (Exception e) {            msgRet.pushError("批量语音搜索数据同步失败：" + e.getMessage());            logger.error("批量语音搜索数据同步时，发生异常！", e);        }        return msgRet;    }    @RunLogger(value = "电影媒资处理", isSaveRequest = true)    @RequestMapping(value = "/spMovieAssetSyn/{type}/{id}", method = {RequestMethod.POST}, produces = {MediaType.APPLICATION_JSON_VALUE})    @ResponseBody    public MsgResult spMovie(@PathVariable("type") Integer type, @PathVariable("id") String contentId) {        MsgResult msgRet = new MsgResult();        try {            switch (type) {                case 1:                    spService.publish(contentId);                    break;                case 2:                    spService.unPublish(contentId);                    break;                case 3:                    spService.bindProduct(contentId, type);                    break;                case 5:                    spService.bindProduct(contentId, type);                    break;                case 4:                    spService.delete(contentId);                    break;                default:                    break;            }            msgRet.pushOk("操作成功！！请等待！！！");        } catch (Exception e) {            msgRet.pushError("省网注入失败：" + e.getMessage());            logger.error("省网注入时，发生异常！", e);        }        return msgRet;    }    @RunLogger(value = "电影媒资批量处理", isSaveRequest = true)    @RequestMapping(value = "/spMovieAssetSyn/{type}/delete", method = {RequestMethod.POST}, produces = {MediaType.APPLICATION_JSON_VALUE})    @ResponseBody    public MsgResult spMovie(@PathVariable("type") Integer type, @RequestParam("ids[]") String[] contentIds) {        MsgResult msgRet = new MsgResult();        try {            switch (type) {                case 1:                    spService.publishs(contentIds);                    break;                case 2:                    spService.unPublishs(contentIds);                    break;                case 3:                    spService.bindProducts(contentIds, type);                    break;                case 4:                    spService.deletes(contentIds);                    break;                case 5:                    spService.bindProducts(contentIds, type);                    break;                default:                    break;            }            msgRet.pushOk("操作成功！！请等待！！！");        } catch (Exception e) {            msgRet.pushError("批量省网注入失败：" + e.getMessage());            logger.error("批量省网注入时，发生异常！", e);        }        return msgRet;    }    @RunLogger(value = "剧集媒资处理", isSaveRequest = true)    @RequestMapping(value = "/spEpisodeAssetSyn/{type}/{id}", method = {RequestMethod.POST}, produces = {MediaType.APPLICATION_JSON_VALUE})    @ResponseBody    public MsgResult spEpisode(@PathVariable("type") Integer type, @PathVariable("id") String contentId) {        MsgResult msgRet = new MsgResult();        try {            switch (type) {                case 1:                    spService.publish(contentId);                    break;                case 2:                    spService.unPublish(contentId);                    break;                case 3:                    spService.bindProduct(contentId, type);                    break;                case 5:                    spService.bindProduct(contentId, type);                    break;                case 4:                    spService.delete(contentId);                    break;                default:                    break;            }            msgRet.pushOk("操作成功！！请等待！！！");        } catch (Exception e) {            msgRet.pushError("省网注入失败：" + e.getMessage());            logger.error("省网注入时，发生异常！", e);        }        return msgRet;    }    @RunLogger(value = "剧集媒资批量处理", isSaveRequest = true)    @RequestMapping(value = "/spEpisodeAssetSyn/{type}", method = {RequestMethod.POST}, produces = {MediaType.APPLICATION_JSON_VALUE})    @ResponseBody    public MsgResult spEpisode(@PathVariable("type") Integer type, @RequestParam("ids[]") String[] contentIds) {        MsgResult msgRet = new MsgResult();        try {            switch (type) {                case 1:                    spService.publishs(contentIds);                    break;                case 2:                    spService.unPublishs(contentIds);                    break;                case 3:                    spService.bindProducts(contentIds, type);                    break;                case 5:                    spService.bindProducts(contentIds, type);                    break;                case 4:                    spService.deletes(contentIds);                    break;                default:                    break;            }            msgRet.pushOk("操作成功！！请等待！！！");        } catch (Exception e) {            msgRet.pushError("批量省网注入失败：" + e.getMessage());            logger.error("批量省网注入时，发生异常！", e);        }        return msgRet;    }    @RunLogger(value = "剧集子集媒资处理", isSaveRequest = true)    @RequestMapping(value = "/spEpisodeChildAssetSyn/{type}/{id}", method = {RequestMethod.POST}, produces = {MediaType.APPLICATION_JSON_VALUE})    @ResponseBody    public MsgResult spEpisodeChild(@PathVariable("type") Integer type, @PathVariable("id") String contentId) {        MsgResult msgRet = new MsgResult();        try {            switch (type) {                case 1:                    spService.publish(contentId);                    break;                case 2:                    spService.unPublish(contentId);                    break;                case 3:                    spService.bindProduct(contentId, type);                    break;                case 5:                    spService.bindProduct(contentId, type);                    break;                case 4:                    spService.delete(contentId);                    break;                default:                    break;            }            msgRet.pushOk("操作成功！！请等待！！！");        } catch (Exception e) {            msgRet.pushError("省网注入失败：" + e.getMessage());            logger.error("省网注入时，发生异常！", e);        }        return msgRet;    }    @RunLogger(value = "剧集子集媒资批量处理", isSaveRequest = true)    @RequestMapping(value = "/spEpisodeChildAssetSyn/{type}", method = {RequestMethod.POST}, produces = {MediaType.APPLICATION_JSON_VALUE})    @ResponseBody    public MsgResult spEpisodeChild(@PathVariable("type") Integer type, @RequestParam("ids[]") String[] contentIds) {        MsgResult msgRet = new MsgResult();        try {            switch (type) {                case 1:                    spService.publishs(contentIds);                    break;                case 2:                    spService.unPublishs(contentIds);                    break;                case 3:                    spService.bindProducts(contentIds, type);                    break;                case 5:                    spService.bindProducts(contentIds, type);                    break;                case 4:                    spService.deletes(contentIds);                    break;                default:                    break;            }            msgRet.pushOk("操作成功！！请等待！！！");        } catch (Exception e) {            msgRet.pushError("批量省网注入失败：" + e.getMessage());            logger.error("批量省网注入时，发生异常！", e);        }        return msgRet;    }}