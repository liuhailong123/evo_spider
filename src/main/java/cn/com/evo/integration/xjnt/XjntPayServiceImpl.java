package cn.com.evo.integration.xjnt;import cn.com.evo.cms.constant.PayTypeEnum;import cn.com.evo.cms.constant.ProvinceCodeEnum;import cn.com.evo.cms.domain.entity.pay.Order;import cn.com.evo.cms.domain.entity.pay.PayConfig;import cn.com.evo.cms.domain.entity.pay.PayConfigParams;import cn.com.evo.cms.domain.entity.pay.Product;import cn.com.evo.cms.domain.entity.vip.User;import cn.com.evo.cms.domain.entity.vip.UserAccount;import cn.com.evo.cms.service.pay.OrderService;import cn.com.evo.cms.service.pay.PayConfigParamsService;import cn.com.evo.cms.service.pay.PayConfigService;import cn.com.evo.cms.service.pay.ProductService;import cn.com.evo.cms.service.vip.UserServerService;import cn.com.evo.integration.common.result.PayResult;import cn.com.evo.integration.xjnt.sdk.PayUtilXinJiang;import cn.com.evo.integration.xjnt.sdk.dto.XinJiangPayReq;import cn.com.evo.integration.xjnt.sdk.dto.XinJiangPayRsp;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.HashMap;import java.util.List;import java.util.Map;/** * @Description: * @author: lu.xin * @create: 2019-03-18 1:37 PM **/@Service@Transactionalpublic class XjntPayServiceImpl {    @Autowired    private PayConfigService payConfigService;    @Autowired    private ProductService productService;    @Autowired    private UserServerService userServerService;    @Autowired    private OrderService orderService;    @Autowired    private PayConfigParamsService payConfigParamsService;    /**     * 获取二维码支付接口     *     * @param type        支付类型 1微信 2支付宝 3电视互动-BOSS 4增值业务-SP     * @param prodCode    产品编码     * @param cardNo      智能卡号     * @param stbNo       机顶盒号     * @param appId       应用id     * @param user        用户     * @param userAccount 用户账号     * @return     */    public PayResult qrCodePay(Integer type, String prodCode,                               String cardNo, String stbNo, String appId, User user, UserAccount userAccount) {        try {            //获取系统配置请求参数            PayConfig payConfig = payConfigService.getByPayTypeAndProvinceCodeAndEnable(type, ProvinceCodeEnum.XinJiang.getCode(), 1);            List<PayConfigParams> configParams = payConfigParamsService.findByConfigId(payConfig.getId());            //参数转换            Map<String, Object> params = transform(configParams);            Product product = productService.getByCode(prodCode);            XinJiangPayReq req = new XinJiangPayReq(params.get("authCode") + "", cardNo, stbNo,                    params.get("stbIp") + "", Integer.valueOf(params.get("bookId") + ""),                    product.getThirdPartyCode(), product.getContentCode(),                    params.get("backUrl") + "", "");            XinJiangPayRsp rsp;            //判断支付类型            switch (PayTypeEnum.getByType(type)) {                case ALi:                    //支付宝                    rsp = PayUtilXinJiang.aliPayQrcode(req);                    break;                case WeiXin:                    //微信                    rsp = PayUtilXinJiang.weixinPayQrcode(req);                    break;                case BOSS:                    //BOSS                    rsp = PayUtilXinJiang.bossPay(req);                    break;                case SP:                    //SP                    rsp = PayUtilXinJiang.spPay(req);                    break;                default:                    throw new RuntimeException("支付类型错误!!!");            }            //返回数据处理            PayResult payResult = new PayResult(rsp.getQrcodeUrl(), rsp.getQrcode(), rsp.getRetCode(), rsp.getRetMsg());            if ("0".equals(rsp.getRetCode()) || "SUCCESS".equals(rsp.getRetCode())) {                //获取支付二维码成功                //创建订单记录                Order order = orderService.createOrder(rsp.getOrderNo(), payConfig.getId(), user.getId(),                        product.getId(), product.getOriginalPrice(),                        product.getCurrentPrice(), type, appId, userAccount.getId());                // 如果 支付方式为 BOSS／SP 则直接开通服务 其他支付方式在 支付结果回调 时开通                if (PayTypeEnum.BOSS.getType().equals(type) || PayTypeEnum.SP.getType().equals(type)) {                    //开通服务                    userServerService.openServer(user.getId(), appId, product.getId());                }                payResult.setOrderId(order.getOrderNo());                // 成功                payResult.setRetCode("0");                payResult.setRetMsg("成功！！！");            } else {                // 异常                payResult.setRetCode(rsp.getRetCode());                payResult.setRetMsg(rsp.getRetMsg());            }            return payResult;        } catch (Exception e) {            throw new RuntimeException("调用底层XJNT支付接口获取二维码异常" + e.getMessage(), e);        }    }    /**     * 参数转换     *     * @param configParams     * @return     */    private Map<String, Object> transform(List<PayConfigParams> configParams) {        Map<String, Object> params = new HashMap<>();        for (PayConfigParams configParam : configParams) {            if (configParam.getNameEn().equals("authCode")) {                params.put("authCode", configParam.getValue());            }            if (configParam.getNameEn().equals("stbIp")) {                params.put("stbIp", configParam.getValue());            }            if (configParam.getNameEn().equals("bookId")) {                params.put("bookId", configParam.getValue());            }            if (configParam.getNameEn().equals("backUrl")) {                params.put("backUrl", configParam.getValue());            }        }        return params;    }}