package cn.com.evo.integration.wasu;import cn.com.evo.admin.manage.domain.entity.Province;import cn.com.evo.cms.domain.entity.cms.*;import cn.com.evo.cms.service.cms.*;import cn.com.evo.cms.utils.HttpUtil;import cn.com.evo.integration.common.ConstantFactory;import cn.com.evo.integration.wasu.common.*;import cn.com.evo.integration.wasu.common.content.*;import cn.com.evo.integration.wasu.common.player.WasuPlayer;import cn.com.evo.provincial.service.AbstractProvincialServiceImpl;import com.alibaba.fastjson.JSONObject;import com.github.stuxuhai.jpinyin.PinyinException;import org.apache.commons.lang3.StringUtils;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.io.File;import java.util.List;/** * @Description: * @author: lu.xin * @create: 2019-04-25 9:44 AM **/@Service@Transactionalpublic class WasuContentServiceImpl extends AbstractProvincialServiceImpl {    protected Logger logger = LogManager.getLogger(this.getClass());    @Autowired    private SourceService sourceService;    @Autowired    private VideoService videoService;    @Autowired    private ColumnService columnService;    @Autowired    private ContentService contentService;    @Autowired    private SourceRelService sourceRelService;    @Autowired    private CatalogueRelationService catalogueRelationService;    /**     * 获取真实播放地址     *     * @param contentId     * @return     */    public WasuPlayer getPlayUrl(String contentId) {        Content content = contentService.findById(contentId);        if (content == null) {            throw new RuntimeException("内容id有误");        }        List<Video> videos = videoService.findByContentId(contentId);        if (videos.size() == 0) {            throw new RuntimeException("该内容【" + content.getName() + "】未维护相关视频对象");        }        Video video = videos.get(0);        Source source = video.getSource();        String folderCode = content.getCode();        String _contentId = video.getUrl();        String contentType = source.getInfo();        WasuPlayer player = new WasuPlayer(folderCode, _contentId, contentType);        return player;    }    /**     * 浙江华数有线 移动图片至nginx目录     *     * @param picture     */    @Override    public void registImage(Picture picture, Province province, boolean deleteFlag) {        try {            String command = "chmod 777 " + picture.getCloudPath();            Runtime.getRuntime().exec(command).waitFor();            // 获取海报，进行上传            File file = new File(picture.getCloudPath());            if (file.exists()) {                String command2 = "mv " + picture.getCloudPath() + " /image/" + picture.getFileName();                Runtime.getRuntime().exec(command2).waitFor();            }        } catch (Exception e) {            throw new RuntimeException("上传资源至Nginx目录异常：" + e.getMessage(), e);        }    }    /**     * 拉取内容数据     */    @Override    public void pull() {        try {            Column app = columnService.getByThirdCode(ConstantFactory.map.get(ConstantEnum.folderCode.getKey()));            List<Column> columns = columnService.findByPId(app.getId());            for (Column column : columns) {                String columnCode = column.getThirdCode();                if (StringUtils.isBlank(columnCode)) {                    break;                }                // 根据columnCode获取剧集数据                String childColumnUrl1 = ConstantFactory.map.get(ConstantEnum.hdcxUrl.getKey()) +                        "/dataquery/childFolders?folderCode=" + columnCode + "&depth=1&pageIndex=1&pageItems=20";                String responseStr1 = HttpUtil.get(childColumnUrl1, "调用局方接口获取剧集信息");                WasuColumnData apiResult = JSONObject.parseObject(responseStr1, WasuColumnData.class);                if (apiResult != null) {                    List<WasuColumn> episodes = apiResult.getFolders();                    for (WasuColumn episode : episodes) {                        // 保存或者更新 剧集总集对象                        Content content = dataContentHandle(episode, column.getName());                        // 保存或者更新 剧集与栏目关系                        dataCatalogueRelationHandle(column, content);                        // 调用局方接口获取剧集总集下的子集数据                        String url = ConstantFactory.map.get(ConstantEnum.hdcxUrl.getKey()) +                                "/dataquery/foldersContents?folderCode=" + content.getCode() +                                "&pageIndex=1&pageItems=10000&cImageMode=300,400,JPEG&fields=veidoo,colour,captionLang";                        String responseStr = HttpUtil.get(url, "调用局方接口获取多栏目下内容信息");                        WasuContentFoldersData wasuContentData = JSONObject.parseObject(responseStr, WasuContentFoldersData.class);                        if (wasuContentData != null) {                            WasuContentData contentData = wasuContentData.getFolders().get(0);                            List<WasuContent> wasuContents = contentData.getContents();                            // 更新总集数                            content.setSumNum(wasuContents.size());                            contentService.saveOrUpdate(content);                            for (WasuContent wasuContent : wasuContents) {                                // 保存剧集子集内容                                Content child = dataContentChildHandle(wasuContent, content);                                // 保存视频媒资对象                                Video video = dataVideoHandle(wasuContent, content.getCode());                                // 保存剧集子集与视频媒资关系                                dataSourceRelHandle(child, video);                            }                        }                    }                }            }            logger.error("---调用局方接口：拉取内容数据完成---");        } catch (Exception e) {            throw new RuntimeException("调用局方接口：拉取内容数据异常" + e.getMessage(), e);        }    }    /**     * 处理获取到剧集总集数据     *     * @param episode     * @param classifyTags     * @return     */    private Content dataContentHandle(WasuColumn episode, String classifyTags) throws PinyinException {        String contentName = episode.getFolderName();        String contentCode = episode.getFolderCode();        Content content = contentService.getByName(contentName);        if (content == null) {            content = new Content();        }        content.setNameSpellShort(null);        content.setNameSpellLong(null);        content.setGrade("9.0");        content.setClassifyTags(classifyTags);        content.setYear("2019");        content.setRunTime("100");        content.setClassify(2);        content.setName(contentName);        content.setCode(contentCode);        content.setEnable(1);        content.setSort(1);        contentService.setPinYin(content);        contentService.saveOrUpdate(content);        return content;    }    /**     * 处理栏目与内容关系     *     * @param column     * @param content     */    private void dataCatalogueRelationHandle(Column column, Content content) {        CatalogueRelation catalogueRelation = catalogueRelationService.getByAIdAndBIdAndType(column.getId(), content.getId(), 2);        if (catalogueRelation == null) {            catalogueRelation = new CatalogueRelation();            catalogueRelation.setPublish(0);        }        catalogueRelation.setAId(column.getId());        catalogueRelation.setBId(content.getId());        catalogueRelation.setType(2);        catalogueRelation.setContentType(2);        catalogueRelation.setBusinessType(1);        catalogueRelation.setIsHot(0);        catalogueRelation.setFreeNum(3);        catalogueRelationService.saveOrUpdate(catalogueRelation);    }    /**     * 处理剧集子集数据     *     * @param wasuContent     * @param content     */    private Content dataContentChildHandle(WasuContent wasuContent, Content content) throws PinyinException {        Content child = contentService.getByName(wasuContent.getName());        if (child == null) {            child = new Content();        }        child.setCode(content.getCode());        child.setClassify(3);        child.setName(wasuContent.getName());        child.setpId(content.getId());        child.setRunTime("100");        child.setSort(wasuContent.getSortIndex());        child.setEnable(1);        contentService.setPinYin(child);        contentService.saveOrUpdate(child);        return child;    }    /**     * 处理获取到的内容数据     *     * @param content     * @param folderCode     */    private Video dataVideoHandle(WasuContent content, String folderCode) {        String contentId = content.getContentId();        String contentType = content.getContentType();        String contentName = content.getName();        String url = "wasu://" + folderCode + "." + contentId + "." + contentType;        Source source = sourceService.getByName(contentName);        if (source == null) {            source = new Source();            source.setName(contentName);            source.setType(1);            source.setInfo(contentType);            sourceService.save(source);            Video video = new Video();            video.setSource(source);            video.setUrl(url);            video.setType(1);            video.setPlatform("4");            videoService.save(video);            return video;        } else {            source.setName(contentName);            source.setType(1);            source.setInfo(contentType);            sourceService.update(source);            Video video = videoService.getByUrl(url);            if (video == null) {                video = new Video();                video.setSource(source);                video.setUrl(url);                video.setType(1);                video.setPlatform("4");                videoService.save(video);            } else {                video.setSource(source);                video.setUrl(url);                video.setType(1);                video.setPlatform("4");                videoService.update(video);            }            return video;        }    }    /**     * 处理内容与视频关系     *     * @param child     * @param video     */    private void dataSourceRelHandle(Content child, Video video) {        SourceRel rel = sourceRelService.getByFIdAndSourceId(child.getId(), video.getId());        if (rel == null) {            rel = new SourceRel();        }        rel.setSourceId(video.getId());        rel.setfId(child.getId());        rel.setBusinessType(4);        rel.setSourcetype(1);        rel.setRelType(1);        sourceRelService.save(rel);    }    @Override    public void registMovie(String contentId, Province province) {    }    @Override    public void updateMovie(String contentId, Province province) {    }    @Override    public void deleteMovie(String contentId, Province province) {    }    @Override    public void registSeries(String contentId, Province province) {    }    @Override    public void updateSeries(String contentId, Province province) {    }    @Override    public void deleteSeries(String contentId, Province province) {    }}