package cn.com.evo.integration.guangxi.content;import cn.com.evo.cms.utils.HttpUtil;import cn.com.evo.integration.common.ConstantFactory;import cn.com.evo.integration.common.utils.BeanToXml;import cn.com.evo.integration.guangxi.common.ConstantEnum;import cn.com.evo.integration.guangxi.content.dto.*;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;/** * @Description: 广西广电内容类接口封装 * 删除逻辑说明: * <p> * 1、整部电影或者电视剧删除时： * 1）调用主媒资下线接口，将主媒资下线； *  2）调用主媒资删除接口，删除主媒资。 * <p> *  2、删除剧集中的某一集时： * 1）调用片源下线接口，将片源下线； *  2）调用片源删除接口，删除片源； * 3) 调用分集下线接口，将分集下线； * 4）调用分集删除接口，删除分集。 * @author: lu.xin * @create: 2019-05-15 1:41 PM **/public class ContentSDK {    protected static Logger logger = LogManager.getLogger(ContentSDK.class);    /**     * 成功     */    private static final String OK = "0";    /**     * 片源不存在     */    private static final String exists = "7";    /**     * 主媒资上下线接口     *     * @param contentId 内容id     * @param type      0:上线     *                  1:下线     * @return true 成功 false 失败     */    public static boolean mainAssetUnLine(String contentId, Integer type) {        try {            MainUnlineRequest request = new MainUnlineRequest(contentId, type);            String resultStr = HttpUtil.post(ConstantFactory.map.get(ConstantEnum.asset_url.getKey()), request.toJson(), "主媒资上下线");            GxgdContentResponse response = (GxgdContentResponse) BeanToXml.convertXmlStrToObject(GxgdContentResponse.class, resultStr);            logger.error("主媒资上下线接口返回：" + response.toString());            if (OK.equals(response.getRet())) {                return true;            } else {                logger.error("失败：" + response.getRet() + "|" + response.getReason());                return false;            }        } catch (Exception e) {            throw new RuntimeException("调用局方主媒资上下线接口异常" + e.getMessage(), e);        }    }    /**     * 分集上下线接口     *     * @param contentId 内容id     * @param childId   子集id     * @param type      0:上线     *                  1:下线     * @return true 成功 false 失败     */    public static boolean childAssetUnLine(String contentId, String childId, Integer type) {        try {            ChildUnlineRequest request = new ChildUnlineRequest(contentId, childId, type);            String resultStr = HttpUtil.post(ConstantFactory.map.get(ConstantEnum.asset_url.getKey()), request.toJson(), "分集上下线");            GxgdContentResponse response = (GxgdContentResponse) BeanToXml.convertXmlStrToObject(GxgdContentResponse.class, resultStr);            logger.error("分集上下线接口返回：" + response.toString());            if (OK.equals(response.getRet())) {                return true;            } else {                logger.error("失败：" + response.getRet() + "|" + response.getReason());                return false;            }        } catch (Exception e) {            throw new RuntimeException("调用局方分集上下线接口异常" + e.getMessage(), e);        }    }    /**     * 片源上下线接口     *     * @param videoId 视频id     * @param type    0:上线     *                1:下线     * @return true 成功 false 失败     */    public static boolean videoAssetUnLine(String videoId, Integer type) {        try {            VideoUnlineRequest request = new VideoUnlineRequest(videoId, type);            String resultStr = HttpUtil.post(ConstantFactory.map.get(ConstantEnum.asset_url.getKey()), request.toJson(), "片源上下线");            GxgdContentResponse response = (GxgdContentResponse) BeanToXml.convertXmlStrToObject(GxgdContentResponse.class, resultStr);            logger.error("片源上下线接口返回：" + response.toString());            if (OK.equals(response.getRet())) {                return true;            } else {                logger.error("失败：" + response.getRet() + "|" + response.getReason());                return false;            }        } catch (Exception e) {            throw new RuntimeException("调用局方片源上下线接口异常" + e.getMessage(), e);        }    }    /**     * 主媒资删除接口     *     * @param contentId 内容id     * @return true 成功 false 失败     */    public static boolean mainAssetDelete(String contentId) {        try {            MainDeleteRequest request = new MainDeleteRequest(contentId);            String resultStr = HttpUtil.post(ConstantFactory.map.get(ConstantEnum.asset_url.getKey()), request.toJson(), "主媒资删除");            GxgdContentResponse response = (GxgdContentResponse) BeanToXml.convertXmlStrToObject(GxgdContentResponse.class, resultStr);            logger.error("主媒资删除接口返回：" + response.toString());            if (OK.equals(response.getRet()) || exists.equals(response.getRet())) {                return true;            } else {                logger.error("失败：" + response.getRet() + "|" + response.getReason());                return false;            }        } catch (Exception e) {            throw new RuntimeException("调用局方主媒资删除接口异常" + e.getMessage(), e);        }    }    /**     * 分集删除接口     *     * @param contentId 内容id     * @param childId   子集id     * @return true 成功 false 失败     */    public static boolean childAssetDelete(String contentId, String childId, Integer type) {        try {            ChildDeleteRequest request = new ChildDeleteRequest(contentId, childId);            String resultStr = HttpUtil.post(ConstantFactory.map.get(ConstantEnum.asset_url.getKey()), request.toJson(), "分集删除");            GxgdContentResponse response = (GxgdContentResponse) BeanToXml.convertXmlStrToObject(GxgdContentResponse.class, resultStr);            logger.error("分集删除接口返回：" + response.toString());            if (OK.equals(response.getRet()) || exists.equals(response.getRet())) {                return true;            } else {                logger.error("失败：" + response.getRet() + "|" + response.getReason());                return false;            }        } catch (Exception e) {            throw new RuntimeException("调用局方分集删除接口异常" + e.getMessage(), e);        }    }    /**     * 片源删除接口     *     * @param videoId 视频id     * @return true 成功 false 失败     */    public static boolean videoAssetDelete(String videoId, Integer type) {        try {            VideoDeleteRequest request = new VideoDeleteRequest(videoId);            String resultStr = HttpUtil.post(ConstantFactory.map.get(ConstantEnum.asset_url.getKey()), request.toJson(), "片源删除");            GxgdContentResponse response = (GxgdContentResponse) BeanToXml.convertXmlStrToObject(GxgdContentResponse.class, resultStr);            logger.error("片源删除接口返回：" + response.toString());            if (OK.equals(response.getRet()) || exists.equals(response.getRet())) {                return true;            } else {                logger.error("失败：" + response.getRet() + "|" + response.getReason());                return false;            }        } catch (Exception e) {            throw new RuntimeException("调用局方片源删除接口异常" + e.getMessage(), e);        }    }}