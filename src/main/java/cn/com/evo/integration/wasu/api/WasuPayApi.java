package cn.com.evo.integration.wasu.api;import cn.com.evo.cms.constant.ProvinceCodeEnum;import cn.com.evo.cms.domain.entity.pay.Order;import cn.com.evo.cms.domain.entity.pay.PayConfig;import cn.com.evo.cms.domain.entity.pay.Product;import cn.com.evo.cms.domain.entity.vip.User;import cn.com.evo.cms.domain.entity.vip.UserAccount;import cn.com.evo.cms.service.pay.OrderService;import cn.com.evo.cms.service.pay.PayConfigService;import cn.com.evo.cms.service.pay.ProductService;import cn.com.evo.cms.service.vip.UserAccountService;import cn.com.evo.cms.service.vip.UserServerService;import cn.com.evo.cms.service.vip.UserService;import cn.com.evo.integration.wasu.common.pay.PayResponse;import cn.com.evo.integration.wasu.sdk.PaySDK;import com.alibaba.fastjson.JSONObject;import com.frameworks.core.web.controller.BaseController;import com.frameworks.core.web.result.DataResultForAPI;import com.google.common.collect.Lists;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.util.Date;import java.util.List;/** * @Description: 华数支付接口 * @author: lu.xin * @create: 2019-05-28 5:28 PM **/@RestController@RequestMapping("/api/wasu/pay")@CrossOrigin(origins = "*", maxAge = 3600)public class WasuPayApi extends BaseController {    /**     * 支付接口获取二维码成功     */    private static final String PAY_REQUEST_OK = "0";    /**     * 支付成功     */    private static final String PAY_RESULT_OK = "2";    @Autowired    private OrderService orderService;    @Autowired    private UserAccountService userAccountService;    @Autowired    private UserService userService;    @Autowired    private UserServerService userServerService;    @Autowired    private PayConfigService payConfigService;    @Autowired    private ProductService productService;    /**     * 支付订购接口     *     * @param type     支付类型 1微信 2支付宝 3电视互动-BOSS(✔) 4增值业务-sp 5银联     * @param cardNo   卡号     * @param prodCode 产品套餐编码     * @param appId    应用id     * @return     */    @RequestMapping(value = "/payQrCode", method = {RequestMethod.GET, RequestMethod.POST})    public DataResultForAPI payQrCode(@RequestParam("type") Integer type, @RequestParam("cardNo") String cardNo,                                      @RequestParam("prodCode") String prodCode, @RequestParam("appId") String appId,                                      @RequestParam("custName") String custName, @RequestParam("custId") String custId,                                      @RequestParam("area") String area, @RequestParam("city") String city) {        DataResultForAPI dataRet = new DataResultForAPI();        JSONObject result = new JSONObject();        try {            //判断该用户是否有未到期服务            UserAccount userAccount = userAccountService.getByAccountNoAndAccountType(cardNo, 3, null);            User user = userService.findById(userAccount.getUserId());            Boolean isExpire = userServerService.checkUserServerIsExpire(user.getId(), appId);            // 没开通过／没有未到期 服务            if (isExpire) {                //获取系统配置请求参数                PayConfig payConfig = payConfigService.getByPayTypeAndProvinceCodeAndEnable(type, ProvinceCodeEnum.Wasu.getCode(), 1);                //参数转换                Product product = productService.getByCode(prodCode);                PayResponse rsp = PaySDK.pay(product.getThirdPartyId(), Double.valueOf(product.getCurrentPrice()),                        product.getName(), custName, custId, cardNo, area, city);                if (PAY_REQUEST_OK.equals(rsp.getStatus())) {                    //获取支付二维码成功                    //创建订单记录                    Order order = orderService.createOrder(rsp.getOrderNo(), payConfig.getId(), user.getId(),                            product.getId(), product.getOriginalPrice(),                            product.getCurrentPrice(), type, appId, userAccount.getId());                    //返回数据处理                    result.put("orderId", order.getOrderNo());                    result.put("qrcodeUrl", rsp.getCodeImgUrl());                    result.put("qrcode", rsp.getCodeContent());                    result.put("retCode", 0);                    dataRet.setData(result);                    dataRet.pushOk("成功！");                    logger.error("PayApi-payResult-payQrCode" + result.toJSONString());                } else {                    result.put("retCode", rsp.getStatus());                    dataRet.setData(result);                    dataRet.pushOk("支付失败：" + rsp.getMessage());                    logger.error("支付失败：" + rsp.getMessage());                }            } else {                result.put("retCode", -1);                dataRet.setData(result);                dataRet.pushOk("有未到期服务，请勿重复订购");            }        } catch (Exception e) {            dataRet.pushError("失败：" + e.getMessage());            logger.error("获取支付二维码时，发生异常！", e);        }        return dataRet;    }    /**     * 支付回调     *     * @return     */    @RequestMapping(value = "/callback")    public void callback(HttpServletRequest request,                         HttpServletResponse response) {        try {            //订单号            String orderNo = request.getParameter("orderNo");            //处理结果            String status = request.getParameter("status");            Order order = orderService.getByThirdPartyOrderNo(orderNo);            if (order.getOrderType() != 1) {                if (PAY_RESULT_OK.equals(status)) {                    //支付成功                    order.setOverDate(new Date());                    order.setOrderType(1);                    //开通服务                    userServerService.openServer(order.getUser().getId(), order.getApp().getId(), order.getProduct().getId());                }                //更新订单状态                orderService.update(order);            }            response.getWriter().write("success");        } catch (Exception e) {            logger.error("系统发生异常！", e);        }    }}