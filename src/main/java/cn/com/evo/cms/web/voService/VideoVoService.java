package cn.com.evo.cms.web.voService;import cn.com.evo.admin.manage.domain.entity.DictData;import cn.com.evo.admin.manage.service.DictDataService;import cn.com.evo.cms.domain.entity.cms.CatalogueRelation;import cn.com.evo.cms.domain.entity.cms.SourceRel;import cn.com.evo.cms.domain.entity.cms.Video;import cn.com.evo.cms.domain.enums.SourceTypeEnum;import cn.com.evo.cms.domain.vo.cms.SourceVideoVo;import cn.com.evo.cms.service.cms.CatalogueRelationService;import cn.com.evo.cms.service.cms.SourceRelService;import cn.com.evo.cms.service.cms.VideoService;import cn.com.evo.cms.web.api.vo.VideoApiVo;import com.google.common.collect.Lists;import org.apache.commons.lang3.StringUtils;import org.dozer.Mapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import javax.transaction.Transactional;import java.util.List;/** * @Description: * @author: lu.xin * @create: 2018-11-12 5:15 PM **/@Service@Transactionalpublic class VideoVoService {    @Autowired    private DictDataService dictDataService;    @Autowired    private SourceRelService sourceRelService;    @Autowired    private VideoService videoService;    @Autowired    private CatalogueRelationService catalogueRelationService;    @Autowired    private Mapper mapper;    /**     * 视频对象转化视频资源VO     *     * @param entity     * @return     */    public SourceVideoVo getSourceVideoVo(Video entity) {        SourceVideoVo vo = mapper.map(entity, SourceVideoVo.class);        vo.setName(entity.getSource().getName());        List<DictData> dictDatas = dictDataService.findByDictClassifyCode("videoType");        for (DictData dictData : dictDatas) {            if (entity.getType() == Integer.valueOf(dictData.getCode())) {                vo.setTypeName(dictData.getName());                break;            }        }        List<DictData> definitionDictDatas = dictDataService.findByDictClassifyCode("videoDefinition");        for (DictData dictData : definitionDictDatas) {            if (entity.getDefinition() == Integer.valueOf(dictData.getCode())) {                vo.setDefinitionName(dictData.getName());                break;            }        }        List<DictData> platForms = dictDataService.findByDictClassifyCode("PlatForm");        for (DictData dictData : platForms) {            if (dictData.getCode().equals(entity.getPlatform())) {                vo.setPlatformName(dictData.getName());                break;            }        }        return vo;    }    /**     * 获取内容下关联的 视频ApiVo List     *     * @param fId     * @return     */    public List<VideoApiVo> getVideoApiVos(String fId) {        List<VideoApiVo> apiVos = Lists.newArrayList();        List<SourceRel> sourceRels = sourceRelService.findByFId(fId, SourceTypeEnum.video.getIndex());        for (SourceRel sourceRel : sourceRels) {            Video video = videoService.findById(sourceRel.getSourceId());            VideoApiVo vo = new VideoApiVo(video);            apiVos.add(vo);        }        return apiVos;    }    /**     * 视频对象List 转化视频资源VO List     *     * @param entitys     * @return     */    public List<SourceVideoVo> handle(List<Video> entitys) {        List<SourceVideoVo> sourceVideoVos = Lists.newArrayList();        for (Video entity : entitys) {            SourceVideoVo vo = this.getSourceVideoVo(entity);            sourceVideoVos.add(vo);        }        return sourceVideoVos;    }    public List<VideoApiVo> findByContentId(String contentId) {        List<VideoApiVo> videos = Lists.newArrayList();        List<Video> videoList = videoService.findByContentId(contentId);        if (videoList != null) {            if (videoList.size() > 0) {                for (Video video : videoList) {                    VideoApiVo vo = new VideoApiVo(video);                    videos.add(vo);                }            }        }        return videos;    }    /**     * 获取内容对应视频对象列表     *     * @param contentId      栏目内容关系id     * @param childContentId 剧集子集id 可为空     * @param platform       平台来源     * @return     */    public List<VideoApiVo> findVideos(String contentId, String childContentId, String platform) {        String temp;        if (StringUtils.isNotBlank(childContentId)) {            temp = childContentId;        } else {            temp = contentId;        }        CatalogueRelation catalogueRelation = catalogueRelationService.findById(temp);        if (catalogueRelation != null) {            temp = catalogueRelation.getBId();        }        /**         * 获取时至获取相同平台来源的数据         * 2019年06月04日18:27:27         * luxin         */        List<VideoApiVo> temps = Lists.newArrayList();        List<VideoApiVo> videos = this.findByContentId(temp);        for (VideoApiVo video : videos) {            if (platform.equals(video.getPlatForm())) {                temps.add(video);            }        }        return temps;    }}