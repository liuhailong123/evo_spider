package cn.com.evo.integration.qinghai.sdk;import cn.com.evo.cms.utils.HttpUtil;import cn.com.evo.integration.common.ConstantFactory;import cn.com.evo.integration.qinghai.common.ConstantEnum;import cn.com.evo.integration.qinghai.sdk.request.QingHaiContentRequest;import cn.com.evo.integration.qinghai.sdk.request.QingHaiFindChildColumnRequest;import cn.com.evo.integration.qinghai.sdk.request.QingHaiFindContentsRequest;import cn.com.evo.integration.qinghai.sdk.response.QingHaiFindChildColumnResponse;import cn.com.evo.integration.qinghai.sdk.response.QingHaiFindContentPageResponse;import cn.com.evo.integration.qinghai.sdk.response.QingHaiFindContentResponse;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.google.common.collect.Lists;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import java.util.List;/** * @Description: 青海底层内容类接口封装SDK * @author: lu.xin * @create: 2019-06-24 3:57 PM **/public class ContentSDK {    protected static Logger logger = LogManager.getLogger(ContentSDK.class);    private static final String API_SUCCESS = "success";    /**     * 获取栏目下全部媒资数据     *     * @param columnId     * @return     */    public static List<QingHaiFindContentResponse> findContents(String columnId) {        String pageSize = "10";        String pageNum = "1";        List<QingHaiFindContentResponse> list = Lists.newArrayList();        QingHaiFindContentPageResponse response = findColumnContent(columnId, pageSize, pageNum);        if (response.getData() != null) {            if (response.getData().size() != 0) {                list.addAll(response.getData());                Integer pageNumber = Integer.valueOf(pageNum);                for (int i = pageNumber; i <= response.getTotalPage(); i++) {                    QingHaiFindContentPageResponse temp = findColumnContent(columnId, pageSize, String.valueOf(i));                    if (temp.getData() != null) {                        if (temp.getData().size() != 0) {                            list.addAll(temp.getData());                        }                    }                }            }        }        return list;    }    /**     * 根据配置的栏目id获取子栏目数据     */    public static List<QingHaiFindChildColumnResponse> findChildColumns() {        try {            // 接口请求地址            String url = ConstantFactory.map.get(ConstantEnum.find_child_column_url.getKey()) + "?" + new QingHaiFindChildColumnRequest().toParams();            // 调用接口            String resultStr = HttpUtil.get(url, "根据配置的栏目id获取子栏目数据");            // 处理返回数据            List<QingHaiFindChildColumnResponse> list = JSONArray.parseArray(resultStr, QingHaiFindChildColumnResponse.class);            return list;        } catch (Exception e) {            logger.error("根据配置的栏目id获取子栏目数据异常" + e.getMessage(), e);            throw new RuntimeException("根据配置的栏目id获取子栏目数据异常" + e.getMessage(), e);        }    }    /**     * 获取栏目下媒资数据     */    private static QingHaiFindContentPageResponse findColumnContent(String columnId, String pageSize, String pageNum) {        try {            // 请求参数            QingHaiFindContentsRequest request = new QingHaiFindContentsRequest(columnId, pageSize, pageNum);            // 接口地址            String url = ConstantFactory.map.get(ConstantEnum.find_column_content_url.getKey()) + "?" + request.toParams();            // 调用接口            String resultStr = HttpUtil.get(url, "获取栏目下媒资数据");            // 解析结果            QingHaiFindContentPageResponse response = JSONObject.toJavaObject(JSONObject.parseObject(resultStr),                    QingHaiFindContentPageResponse.class);            return response;        } catch (Exception e) {            logger.error("" + e.getMessage(), e);            throw new RuntimeException("" + e.getMessage(), e);        }    }    /**     * 内容注入接口封装     *     * @param request     */    @Deprecated    public static void insertData(QingHaiContentRequest request) {        String url = ConstantFactory.map.get(ConstantEnum.insert_date_url.getKey());        callContentApi(url, request);    }    /**     * 内容更新接口封装     *     * @param request     */    @Deprecated    public static void updateData(QingHaiContentRequest request) {        String url = ConstantFactory.map.get(ConstantEnum.update_date_url.getKey());        callContentApi(url, request);    }    /**     * 内容删除接口封装     *     * @param request     */    @Deprecated    public static void deleteData(QingHaiContentRequest request) {        String url = ConstantFactory.map.get(ConstantEnum.delete_date_url.getKey());        callContentApi(url, request);    }    /**     * 调用内容注入类接口封装     *     * @param request     */    @Deprecated    private static void callContentApi(String url, QingHaiContentRequest request) {        String resultStr = HttpUtil.post(url, request.toParams(), "请求青海添加媒资接口");        // 接口返回解析        JSONObject resultJson = JSONObject.parseObject(resultStr);        if (resultJson != null) {            String resultCode = resultJson.getString("resultCode");            String msg = resultJson.getString("msg");            if (API_SUCCESS.equals(resultCode)) {                logger.error("接口返回:" + resultCode + "|msg=" + msg);            } else {                logger.error("接口返回:" + resultCode + "|msg=" + msg);                throw new RuntimeException("接口返回:" + resultCode + "|msg=" + msg);            }        } else {            logger.error("接口返回为null,resultStr= " + resultStr);            throw new RuntimeException("接口返回为null,resultStr= " + resultStr);        }    }}