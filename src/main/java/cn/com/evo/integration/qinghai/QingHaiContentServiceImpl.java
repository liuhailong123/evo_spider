package cn.com.evo.integration.qinghai;import cn.com.evo.cms.domain.entity.cms.Content;import cn.com.evo.cms.domain.entity.cms.Source;import cn.com.evo.cms.domain.entity.cms.Video;import cn.com.evo.cms.service.cms.ContentService;import cn.com.evo.cms.service.cms.SourceService;import cn.com.evo.cms.service.cms.VideoService;import cn.com.evo.integration.common.ConstantFactory;import cn.com.evo.integration.qinghai.common.ConstantEnum;import cn.com.evo.integration.qinghai.sdk.ContentSDK;import cn.com.evo.integration.qinghai.sdk.request.QingHaiContentRequest;import cn.com.evo.integration.qinghai.sdk.response.Juji;import cn.com.evo.integration.qinghai.sdk.response.QingHaiFindChildColumnResponse;import cn.com.evo.integration.qinghai.sdk.response.QingHaiFindContentResponse;import cn.com.evo.integration.qinghai.sdk.response.VisitAddress;import cn.com.evo.provincial.service.AbstractProvincialServiceImpl;import com.alibaba.fastjson.JSONArray;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.io.File;import java.util.List;/** * @Description: 青海内容类服务方法 * @author: lu.xin * @create: 2019-06-14 4:22 PM **/@Service@Transactionalpublic class QingHaiContentServiceImpl extends AbstractProvincialServiceImpl {    protected Logger logger = LogManager.getLogger(this.getClass());    @Autowired    private SourceService sourceService;    @Autowired    private VideoService videoService;    @Autowired    private ContentService contentService;    /**     * 拉取媒资数据至本地数据库     * <p>     * 1. 根据栏目id获取子栏目数据     * 2. 根据子栏目id和栏目id获取栏目下内容数据     * 3. 将数据同步同步至本地数据库     */    @Override    public void pull() {        try {            // 1. 先直接查询栏目id下的内容数据            String columnId = ConstantFactory.map.get(ConstantEnum.lm_id.getKey());            List<QingHaiFindContentResponse> contents = ContentSDK.findContents(columnId);            if (contents.size() > 0) {                // 保存相关数据入库                dataSave(contents);            } else {                logger.error("栏目下无内容数据");            }            // 2. 获取栏目下的子栏目数据            List<QingHaiFindChildColumnResponse> childColumns = ContentSDK.findChildColumns();            for (QingHaiFindChildColumnResponse childColumn : childColumns) {                String childColumnId = childColumn.getColumnId();                // 循环获取子栏目下的内容                List<QingHaiFindContentResponse> childContents = ContentSDK.findContents(childColumnId);                if (childContents.size() > 0) {                    // 保存如数据库                    dataSave(childContents);                } else {                    logger.error("子栏目下无内容数据");                }            }        } catch (Exception e) {            logger.error("青海省网媒资拉取异常：" + e.getMessage(), e);            throw new RuntimeException("青海省网媒资拉取异常:" + e.getMessage(), e);        }    }    /**     * 数据处理     *     * @param data     */    private void dataSave(List<QingHaiFindContentResponse> data) {        for (QingHaiFindContentResponse contentResponse : data) {            logger.error("sourceName:" + contentResponse.getMzName());            Source source = sourceService.getByName(contentResponse.getMzName());            if (source == null) {                // 资源不存在                source = new Source();                source.setName(contentResponse.getMzName());                source.setType(1);                source.setInfo(contentResponse.getVodType());                sourceService.save(source);                List<Juji> jujis = JSONArray.parseArray(contentResponse.getJuji(), Juji.class);                for (Juji juji : jujis) {                    List<VisitAddress> visitAddress = juji.getVisitAddress();                    for (VisitAddress address : visitAddress) {                        Video video = new Video();                        video.setSource(source);                        video.setUrl(address.getBfUrl());                        video.setType(1);                        video.setPlatform("11");                        videoService.save(video);                    }                }            } else {                // 资源存在                List<Juji> jujis = JSONArray.parseArray(contentResponse.getJuji(), Juji.class);                for (Juji juji : jujis) {                    List<VisitAddress> visitAddress = juji.getVisitAddress();                    for (VisitAddress address : visitAddress) {                        logger.error(source.getName() + "_url:" + address.getBfUrl());                        Video video = videoService.getByUrlAndSourceId(address.getBfUrl(), source.getId());                        if (video == null) {                            video = new Video();                            video.setSource(source);                            video.setUrl(address.getBfUrl());                            video.setType(1);                            video.setPlatform("11");                            videoService.save(video);                        } else {                            video.setSource(source);                            video.setUrl(address.getBfUrl());                            video.setType(1);                            video.setPlatform("11");                            videoService.update(video);                        }                    }                }            }        }    }    /*下面的方法，由于省网注入逻辑变更，暂时置为过时状态，如果以后有新的需求，可再启用  开始*/    /**     * 视频文件上传     *     * @param localDir      本地临时目录     * @param localFileName 本地文件名     * @param dirName       文件夹名称，例如：HD1080_7 HD720_2 等     * @param definition    清晰度     * @param platform      平台来源     */    @Deprecated    public void videoUpload(String localDir, String localFileName, String dirName,                            Integer definition, String platform) {        // 压缩文件解压        String tempDir = unzipFile(localDir, localFileName);        File[] dirs = new File(tempDir).listFiles();        // 读取目录下文件，移动文件至内容注入目录        for (File dir : dirs) {            // 排除无效文件            if (isUseFulDir(dir.getName())) {                // 文件文件夹名称创建视频资源数据                Source source = sourceService.getByName(dir.getName());                if (source == null) {                    source = new Source();                    source.setName(dir.getName());                    source.setType(1);                    sourceService.save(source);                }                // 根据id创建文件夹                String assetIdDir = "/data/" + source.getId();                mkdir(assetIdDir);                // 根据前台传入文件夹名称创建文件夹                String videoFileDir = assetIdDir + "/" + dirName;                mkdir(videoFileDir);                // 移动文件至局方指定目录                File[] files = dir.listFiles();                for (File file : files) {                    if (isUseFulDir(file.getName())) {                        // 移动文件至局方指定目录                        file.renameTo(new File(videoFileDir + "/" + file.getName()));                    }                }                // 创建video对象                Video video = new Video();                video.setSource(source);                video.setPlatform(platform);                video.setDefinition(definition);                video.setUrl(videoFileDir);                videoService.save(video);            }        }    }    /**     * 电影内容注入     *     * @param contentId     */    @Deprecated    public void registMovie(String contentId) {        try {            Content content = contentService.findById(contentId);            if (content == null) {                throw new RuntimeException("电影内容不存在!!!无法进行注入!!!");            }            // 获取子内容相关视频对象list            List<Video> videos = videoService.findByContentId(content.getId());            if (videos.size() == 0) {                throw new RuntimeException("电影内容对应视频不存在!!!无法进行注入");            }            // 接口请求参数            QingHaiContentRequest request = new QingHaiContentRequest(content.getId(), content.getName(),                    "1", content.getId(), content.getName(), videos.get(0).getUrl());            // 调用接口            ContentSDK.insertData(request);        } catch (Exception e) {            logger.error("电影注入异常：" + e.getMessage());            throw new RuntimeException("电影注入异常：" + e.getMessage(), e);        }    }    /**     * 电影内容更新注入     *     * @param contentId     */    @Deprecated    public void updateMovie(String contentId) {        try {            Content content = contentService.findById(contentId);            if (content == null) {                throw new RuntimeException("电影内容不存在!!!无法进行注入!!!");            }            // 获取子内容相关视频对象list            List<Video> videos = videoService.findByContentId(content.getId());            if (videos.size() == 0) {                throw new RuntimeException("电影内容对应视频不存在!!!无法进行注入");            }            // 接口请求参数            QingHaiContentRequest request = new QingHaiContentRequest(content.getId(), content.getName(),                    "1", content.getId(), content.getName(), videos.get(0).getUrl());            // 调用接口            ContentSDK.updateData(request);        } catch (Exception e) {            logger.error("电影更新注入异常：" + e.getMessage());            throw new RuntimeException("电影更新注入异常：" + e.getMessage(), e);        }    }    /**     * 电影内容删除注入     *     * @param contentId     */    @Deprecated    public void deleteMovie(String contentId) {        try {            Content content = contentService.findById(contentId);            if (content == null) {                throw new RuntimeException("电影内容不存在!!!无法进行注入!!!");            }            // 获取子内容相关视频对象list            List<Video> videos = videoService.findByContentId(content.getId());            if (videos.size() == 0) {                throw new RuntimeException("电影内容对应视频不存在!!!无法进行注入");            }            // 接口请求参数            QingHaiContentRequest request = new QingHaiContentRequest(content.getId(), content.getName(),                    "1", content.getId(), content.getName(), videos.get(0).getUrl());            // 调用接口            ContentSDK.deleteData(request);        } catch (Exception e) {            logger.error("电影删除注入异常：" + e.getMessage());            throw new RuntimeException("电影删除注入异常：" + e.getMessage(), e);        }    }    /**     * 剧集注入     *     * @param contentId     */    @Deprecated    public void registEpisode(String contentId) {        try {            Content content = contentService.findById(contentId);            if (content == null) {                throw new RuntimeException("剧集内容不存在!!!无法进行注入!!!");            }            List<Content> children = contentService.findByPIdOrderBySortAsc(content.getId());            if (children.size() == 0) {                throw new RuntimeException("剧集子集内容不存在!!!无法进行注入!!!");            }            for (Content child : children) {                // 获取子内容相关视频对象list                List<Video> videos = videoService.findByContentId(child.getId());                if (videos.size() == 0) {                    throw new RuntimeException("剧集子集内容关联的视频资源不存在!!!无法进行注入");                }                // 接口请求参数                QingHaiContentRequest request = new QingHaiContentRequest(content.getId(), content.getName(),                        "0", child.getId(), child.getName(), videos.get(0).getUrl());                // 调用接口                ContentSDK.insertData(request);            }        } catch (Exception e) {            logger.error("剧集注入异常：" + e.getMessage());            throw new RuntimeException("剧集注入异常：" + e.getMessage(), e);        }    }    /**     * 剧集更新注入     *     * @param contentId     */    @Deprecated    public void updateEpisode(String contentId) {        try {            Content content = contentService.findById(contentId);            if (content == null) {                throw new RuntimeException("剧集内容不存在!!!无法进行注入!!!");            }            List<Content> children = contentService.findByPIdOrderBySortAsc(content.getId());            if (children.size() == 0) {                throw new RuntimeException("剧集子集内容不存在!!!无法进行注入!!!");            }            for (Content child : children) {                // 获取子内容相关视频对象list                List<Video> videos = videoService.findByContentId(child.getId());                if (videos.size() == 0) {                    throw new RuntimeException("剧集内容对应视频不存在!!!无法进行注入");                }                // 接口请求参数                QingHaiContentRequest request = new QingHaiContentRequest(content.getId(), content.getName(),                        "0", child.getId(), child.getName(), videos.get(0).getUrl());                // 调用接口                ContentSDK.updateData(request);            }        } catch (Exception e) {            logger.error("剧集更新注入异常：" + e.getMessage());            throw new RuntimeException("剧集更新注入异常：" + e.getMessage(), e);        }    }    /**     * 剧集删除注入     *     * @param contentId     */    @Deprecated    public void deleteEpisode(String contentId) {        try {            Content content = contentService.findById(contentId);            if (content == null) {                throw new RuntimeException("剧集内容不存在!!!无法进行注入!!!");            }            List<Content> children = contentService.findByPIdOrderBySortAsc(content.getId());            if (children.size() == 0) {                throw new RuntimeException("剧集子集内容不存在!!!无法进行注入!!!");            }            for (Content child : children) {                // 获取子内容相关视频对象list                List<Video> videos = videoService.findByContentId(child.getId());                if (videos.size() == 0) {                    throw new RuntimeException("剧集内容对应视频不存在!!!无法进行注入");                }                // 接口请求参数                QingHaiContentRequest request = new QingHaiContentRequest(content.getId(), content.getName(),                        "0", child.getId(), child.getName(), videos.get(0).getUrl());                // 调用接口                ContentSDK.deleteData(request);            }        } catch (Exception e) {            logger.error("剧集删除注入异常：" + e.getMessage());            throw new RuntimeException("剧集删除注入异常：" + e.getMessage(), e);        }    }    /**     * 剧集子集单集注入     *     * @param childContentId     */    @Deprecated    public void registEpisodeChild(String childContentId) {        try {            Content child = contentService.findById(childContentId);            if (child == null) {                throw new RuntimeException("剧集子集内容不存在!!!无法进行注入!!!");            }            Content content = contentService.findById(child.getpId());            if (content == null) {                throw new RuntimeException("剧集内容不存在!!!无法进行注入!!!");            }            // 获取子内容相关视频对象list            List<Video> videos = videoService.findByContentId(child.getId());            if (videos.size() == 0) {                throw new RuntimeException("剧集内容对应视频不存在!!!无法进行注入");            }            // 接口请求参数            QingHaiContentRequest request = new QingHaiContentRequest(content.getId(), content.getName(),                    "0", child.getId(), child.getName(), videos.get(0).getUrl());            // 调用接口            ContentSDK.insertData(request);        } catch (Exception e) {            logger.error("剧集子集注入异常：" + e.getMessage());            throw new RuntimeException("剧集子集注入异常：" + e.getMessage(), e);        }    }    /**     * 剧集子集单集更新注入     *     * @param childContentId     */    @Deprecated    public void updateEpisodeChild(String childContentId) {        try {            Content child = contentService.findById(childContentId);            if (child == null) {                throw new RuntimeException("剧集子集内容不存在!!!无法进行注入!!!");            }            Content content = contentService.findById(child.getpId());            if (content == null) {                throw new RuntimeException("剧集内容不存在!!!无法进行注入!!!");            }            // 获取子内容相关视频对象list            List<Video> videos = videoService.findByContentId(child.getId());            if (videos.size() == 0) {                throw new RuntimeException("剧集内容对应视频不存在!!!无法进行注入");            }            // 接口请求参数            QingHaiContentRequest request = new QingHaiContentRequest(content.getId(), content.getName(),                    "0", child.getId(), child.getName(), videos.get(0).getUrl());            // 调用接口            ContentSDK.updateData(request);        } catch (Exception e) {            logger.error("剧集子集更新注入异常：" + e.getMessage());            throw new RuntimeException("剧集子集更新注入异常：" + e.getMessage(), e);        }    }    /**     * 剧集子集单集删除注入     *     * @param childContentId     */    @Deprecated    public void deleteEpisodeChild(String childContentId) {        try {            Content child = contentService.findById(childContentId);            if (child == null) {                throw new RuntimeException("剧集子集内容不存在!!!无法进行注入!!!");            }            Content content = contentService.findById(child.getpId());            if (content == null) {                throw new RuntimeException("剧集内容不存在!!!无法进行注入!!!");            }            // 获取子内容相关视频对象list            List<Video> videos = videoService.findByContentId(child.getId());            if (videos.size() == 0) {                throw new RuntimeException("剧集内容对应视频不存在!!!无法进行注入");            }            // 接口请求参数            QingHaiContentRequest request = new QingHaiContentRequest(content.getId(), content.getName(),                    "0", child.getId(), child.getName(), videos.get(0).getUrl());            // 调用接口            ContentSDK.deleteData(request);        } catch (Exception e) {            logger.error("剧集子集删除注入异常：" + e.getMessage());            throw new RuntimeException("剧集子集删除注入异常：" + e.getMessage(), e);        }    }    /**     * 压缩文件解压     *     * @param localDir      指定目录     * @param localFileName 压缩文件名     * @return string 解压后临时目录     */    @Deprecated    private String unzipFile(String localDir, String localFileName) {        try {            String command = "chmod 777 " + localDir + localFileName;            Runtime.getRuntime().exec(command).waitFor();            // 源文件存在，开始解压            File file = new File(localDir + localFileName);            if (file.exists()) {                String command2 = "unzip -o " + localDir + localFileName + " -d " + localDir + "temp/";                Runtime.getRuntime().exec(command2).waitFor();            }            return localDir + "temp/";        } catch (Exception e) {            throw new RuntimeException("解压视频压缩文件异常：" + e.getMessage(), e);        }    }    /**     * 判断文件夹是否是有效文件夹     *     * @param dirName     * @return     */    @Deprecated    private boolean isUseFulDir(String dirName) {        if (!".DS_Store".equals(dirName) && !"__MACOSX".equals(dirName)) {            return true;        } else {            return false;        }    }    /**     * 创建本地文件夹     *     * @param path     */    @Deprecated    private void mkdir(String path) {        try {            String command = "mkdir " + path;            Runtime.getRuntime().exec(command).waitFor();        } catch (Exception e) {            throw new RuntimeException("创建本地文件夹异常" + e.getMessage(), e);        }    }    /*上面的方法，由于省网注入逻辑变更，暂时置为过时状态，如果以后有新的需求，可再启用  结束*/}