package cn.com.evo.cms.web.api;import cn.com.evo.admin.manage.domain.entity.Province;import cn.com.evo.admin.manage.service.ProvinceService;import cn.com.evo.cms.constant.ProvinceCodeEnum;import cn.com.evo.cms.domain.entity.pay.Order;import cn.com.evo.cms.domain.entity.vip.User;import cn.com.evo.cms.domain.entity.vip.UserAccount;import cn.com.evo.cms.service.pay.OrderService;import cn.com.evo.cms.service.vip.UserAccountService;import cn.com.evo.cms.service.vip.UserServerService;import cn.com.evo.cms.service.vip.UserService;import cn.com.evo.integration.chongqing.CqgdAuthServiceImpl;import cn.com.evo.integration.common.result.PayResult;import cn.com.evo.integration.xjnt.XjntPayServiceImpl;import com.alibaba.fastjson.JSONObject;import com.frameworks.core.web.controller.BaseController;import com.frameworks.core.web.result.DataResultForAPI;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.util.Date;/** * @Description: * @author: lu.xin * @create: 2019-03-18 9:57 AM **/@RestController@RequestMapping("/api/pay")@CrossOrigin(origins = "*", maxAge = 3600)public class PayApi extends BaseController {    @Autowired    private UserAccountService userAccountService;    @Autowired    private UserService userService;    @Autowired    private OrderService orderService;    @Autowired    private UserServerService userServerService;    @Autowired    private ProvinceService provinceService;    @Autowired    private XjntPayServiceImpl xjntPayServiceImpl;    @Autowired    private CqgdAuthServiceImpl cqgdAuthService;    /**     * 支付订购接口     *     * @param type     支付类型 1微信 2支付宝 3电视互动-BOSS 4增值业务-sp 5银联     * @param prodCode 产品套餐编码     * @param appId    应用id     * @param cardNo   卡号     * @param stbNo    机顶盒号     * @param params   JSON其他支付参数     * @return     */    @RequestMapping(value = "/payOrder", method = {RequestMethod.GET, RequestMethod.POST})    public DataResultForAPI payOrder(@RequestParam("type") Integer type, @RequestParam("prodCode") String prodCode, @RequestParam("appId") String appId,                                     @RequestParam("cardNo") String cardNo, @RequestParam(value = "stbNo", required = false) String stbNo,                                     @RequestParam("parmas") String params) {        DataResultForAPI dataRet = new DataResultForAPI();        JSONObject result = new JSONObject();        try {            //判断该用户是否有未到期服务            UserAccount userAccount = userAccountService.getByAccountNoAndAccountType(cardNo, 3, stbNo);            User user = userService.findById(userAccount.getUserId());            Boolean isExpire = userServerService.checkUserServerIsExpire(user.getId(), appId);            // 没开通过／没有未到期 服务            if (isExpire) {                Province province = provinceService.getByEnable(1);                if (province == null) {                    dataRet.pushError("没有可用的省网配置");                } else {                    // 省网code枚举                    ProvinceCodeEnum provinceCodeEnum = ProvinceCodeEnum.getByName(province.getCode());                    switch (provinceCodeEnum) {                        case XinJiang:                            // 新疆广电省网注入逻辑                            PayResult payResult = xjntPayServiceImpl.qrCodePay(type, prodCode, cardNo, stbNo, appId, user, userAccount);                            //返回数据处理                            result.put("orderId", payResult.getOrderId());                            result.put("qrcodeUrl", payResult.getQrcodeUrl());                            result.put("qrcode", payResult.getQrcode());                            result.put("retCode", payResult.getRetCode());                            dataRet.setData(result);                            dataRet.pushOk(payResult.getRetMsg());                            break;                        case SiChuanYiDong:                            // TODO 四川移动省网支付逻辑                            logger.error("暂不支持该省网：【" + province.getName() + "】支付配置");                            result.put("retCode", -2);                            dataRet.setData(result);                            dataRet.pushOk("暂不支持该省网：【" + province.getName() + "】支付配置");                            break;                        case Longjiang:                            // TODO 龙江网络省网支付逻辑                            logger.error("暂不支持该省网：【" + province.getName() + "】支付配置");                            result.put("retCode", -2);                            dataRet.setData(result);                            dataRet.pushOk("暂不支持该省网：【" + province.getName() + "】支付配置");                            break;                        case NingXia:                            // TODO 宁夏广电支付逻辑                            logger.error("暂不支持该省网：【" + province.getName() + "】支付配置");                            result.put("retCode", -2);                            dataRet.setData(result);                            dataRet.pushOk("暂不支持该省网：【" + province.getName() + "】支付配置");                            break;                        case ChongQing:                            // TODO 重庆广电支付逻辑                            cqgdAuthService.pay("I", cardNo, prodCode, appId);                            logger.error("暂不支持该省网：【" + province.getName() + "】支付配置");                            result.put("retCode", -2);                            dataRet.setData(result);                            dataRet.pushOk("暂不支持该省网：【" + province.getName() + "】支付配置");                            break;                        case Evo:                            // TODO 未来媒体支付逻辑                            logger.error("暂不支持该省网：【" + province.getName() + "】支付配置");                            result.put("retCode", -2);                            dataRet.setData(result);                            dataRet.pushOk("暂不支持该省网：【" + province.getName() + "】支付配置");                            break;                        case ERROR:                            logger.error("暂不支持该省网：【" + province.getName() + "】支付配置");                            result.put("retCode", -2);                            dataRet.setData(result);                            dataRet.pushOk("暂不支持该省网：【" + province.getName() + "】支付配置");                            break;                        default:                            logger.error("缺少省网编码配置!!!");                            result.put("retCode", -1);                            dataRet.setData(result);                            dataRet.pushOk("缺少省网编码配置");                            break;                    }                }            } else {                result.put("retCode", -1);                dataRet.setData(result);                dataRet.pushOk("有未到期服务，请勿重复订购");            }        } catch (Exception e) {            dataRet.pushError("失败：" + e.getMessage());            logger.error("获取支付二维码时，发生异常！", e);        }        return dataRet;    }    /**     * 支付回调     *     * @return     */    @RequestMapping(value = "/callback")    public void callback(HttpServletRequest request,                         HttpServletResponse response) {        try {            //订单号            String orderNo = request.getParameter("orderNo");            //处理结果            String status = request.getParameter("status");            Order order = orderService.getByThirdPartyOrderNo(orderNo);            if ("SUCCESS".equals(status)) {                //支付成功                order.setOverDate(new Date());                order.setOrderType(1);                //开通服务                userServerService.openServer(order.getUser().getId(), order.getApp().getId(), order.getProduct().getId());            } else if ("REFUND".equals(status)) {                //已退款                order.setOrderType(3);            } else if ("FAILED".equals(status)) {                //支付失败                order.setOrderType(2);            }            //更新订单状态            orderService.update(order);            response.getWriter().write("success");        } catch (Exception e) {            logger.error("系统发生异常！", e);        }    }    /**     * 根据订单号获取支付结果     *     * @param orderNo     * @return     */    @RequestMapping(value = "/payResult", method = {RequestMethod.GET, RequestMethod.POST})    public DataResultForAPI payResult(@RequestParam("orderNo") String orderNo) {        DataResultForAPI dataRet = new DataResultForAPI();        JSONObject result = new JSONObject();        try {            logger.error("PayApi-payResult-orderNo" + orderNo);            if (StringUtils.isNotBlank(orderNo)) {                Order order = orderService.getByOrderNo(orderNo);                if (order != null) {                    result.put("payResult", order.getOrderType());                    dataRet.setData(result);                    dataRet.pushOk("成功！");                } else {                    dataRet.pushError("订单号不存在");                }            } else {                dataRet.pushError("订单号不能为空");            }        } catch (Exception e) {            dataRet.pushError("失败：" + e.getMessage());            logger.error("根据订单号获取支付结果时，发生异常！", e);        }        return dataRet;    }}