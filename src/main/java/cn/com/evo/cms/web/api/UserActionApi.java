package cn.com.evo.cms.web.api;import cn.com.evo.cms.domain.entity.cms.CatalogueRelation;import cn.com.evo.cms.domain.entity.cms.Column;import cn.com.evo.cms.domain.entity.cms.Content;import cn.com.evo.cms.domain.entity.total.ContentTotal;import cn.com.evo.cms.domain.entity.vip.UserAccount;import cn.com.evo.cms.domain.enums.BusinessTypeEnum;import cn.com.evo.cms.domain.enums.UserActionTypeEnum;import cn.com.evo.cms.service.cms.CatalogueRelationService;import cn.com.evo.cms.service.cms.ColumnService;import cn.com.evo.cms.service.cms.ContentService;import cn.com.evo.cms.service.total.ContentTotalService;import cn.com.evo.cms.service.vip.UserAccountService;import cn.com.evo.cms.web.api.vo.PictureApiVo;import cn.com.evo.cms.web.api.vo.ShowContentApiVo;import cn.com.evo.cms.web.voService.PictureVoService;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.frameworks.core.web.controller.BaseController;import com.frameworks.core.web.result.DataResultForAPI;import com.google.common.collect.Lists;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.*;import java.text.SimpleDateFormat;import java.util.List;/** * @Description: 用户行为接口 * @author: lu.xin * @create: 2018-11-09 6:03 PM **/@RestController@RequestMapping("/api/userAction")@CrossOrigin(origins = "*", maxAge = 3600)public class UserActionApi extends BaseController {    @Autowired    private ContentTotalService contentTotalService;    @Autowired    private ContentService contentService;    @Autowired    private UserAccountService userAccountService;    @Autowired    private ColumnService columnService;    @Autowired    private CatalogueRelationService catalogueRelationService;    @Autowired    private PictureVoService pictureVoService;    /**     * 用户行为     *     * @param appId     应用id     * @param cardNo    用户卡号     * @param contentId 内容id     * @param type      类型 1-播放；2-收藏；3-签到；4-观看; 5-黑名单; 6-搜索关键字     * @param duration  时长(秒)     * @param motion    动作 1-上报；2-删除；3-查询     * @param pageNum   页数     * @param pageSize  每页条数     * @return     * @PARAM NUMBER    集数     */    @RequestMapping(value = "", method = {RequestMethod.GET, RequestMethod.POST})    @ResponseBody    @Deprecated    public DataResultForAPI signSend(@RequestParam("appId") String appId,                                     @RequestParam("cardNo") String cardNo,                                     @RequestParam("type") Integer type,                                     @RequestParam("motion") Integer motion,                                     @RequestParam(value = "contentId", required = false) String contentId,                                     @RequestParam(value = "duration", required = false) Integer duration,                                     @RequestParam(value = "number", required = false) Integer number,                                     @RequestParam(value = "pageNum", required = false) Integer pageNum,                                     @RequestParam(value = "pageSize", required = false) Integer pageSize) {        DataResultForAPI dataRet = new DataResultForAPI();        JSONObject result = new JSONObject();        try {            if (StringUtils.isBlank(contentId)) {                contentId = "";            }            if (duration == null) {                duration = 0;            }            if (number == null) {                number = 1;            }            String userId = "";            if (cardNo != null) {                UserAccount userAccount = userAccountService.getByAccountNoAndAccountType(cardNo, 3, null);                if (userAccount != null) {                    userId = userAccount.getUserId();                }            }            Column app = columnService.findById(appId);            ContentTotal contentTotal = new ContentTotal(contentId, duration + "", userId, app, type, number);            JSONObject json = new JSONObject();            json.put("retCode", "1");            json.put("retMsg", "操作成功");            //动作 1-上报；2-删除；3-查询            switch (motion) {                case 1:                    //上报                    contentTotalService.up(contentTotal);                    dataRet.setData(json);                    break;                case 2:                    //删除                    contentTotalService.delete(appId, userId, contentId, type);                    dataRet.setData(json);                    break;                case 3:                    //查询                    List<ContentTotal> contentTotals = contentTotalService.query(contentTotal, pageNum, pageSize);                    //返回数据解析                    result = analysis(contentTotals, type);                    if (type == UserActionTypeEnum.playRecord.getIndex() ||                            type == UserActionTypeEnum.likeRecord.getIndex() ||                            type == UserActionTypeEnum.blackRecord.getIndex()) {                        Long total = 0L;                        total = contentTotalService.getCountByAppIdAndUserIdAndType(appId, userId, type);                        result.put("total", total);                        result.put("retCode", "1");                        result.put("retMsg", "操作成功");                    }                    dataRet.setData(result);                    break;                default:                    dataRet.pushError("motion参数错误！！！");                    break;            }            dataRet.pushOk("成功！");        } catch (Exception e) {            dataRet.pushError("系统异常");            logger.error("用户行为接口异常", e);        }        return dataRet;    }    /**     * 获取热搜关键词接口     *     * @param appId     * @param count     * @return     */    @RequestMapping(value = "/hotKeyword", method = {RequestMethod.GET, RequestMethod.POST})    @ResponseBody    public DataResultForAPI getHotKeyword(@RequestParam("appId") String appId, @RequestParam("count") Integer count) {        DataResultForAPI dataRet = new DataResultForAPI();        JSONObject result = new JSONObject();        try {            List<ContentTotal> contentTotals = contentTotalService.findKeywordByAppIdAndCount(appId, count);            String[] keyword = new String[0];            if (contentTotals != null) {                if (contentTotals.size() > 0) {                    keyword = new String[contentTotals.size()];                    for (int i = 0; i < contentTotals.size(); i++) {                        keyword[i] = contentTotals.get(i).getBizValue();                    }                }            }            result.put("keyword", keyword);            dataRet.setData(result);            dataRet.pushOk("成功！");        } catch (Exception e) {            dataRet.pushError("系统异常");            logger.error("获取热搜关键词接口异常", e);        }        return dataRet;    }    /**     * 收藏记录上报     *     * @param appId     应用id     * @param cardNo    智能卡号     * @param contentId 内容id     * @return     */    @RequestMapping(value = "/like/add", method = {RequestMethod.GET, RequestMethod.POST})    @ResponseBody    public DataResultForAPI addLike(@RequestParam("appId") String appId,                                    @RequestParam("cardNo") String cardNo,                                    @RequestParam("contentId") String contentId) {        DataResultForAPI dataRet = new DataResultForAPI();        JSONObject result = new JSONObject();        try {            String userId = "";            if (cardNo != null) {                UserAccount userAccount = userAccountService.getByAccountNoAndAccountType(cardNo, 3, null);                if (userAccount != null) {                    userId = userAccount.getUserId();                }            }            Column app = columnService.findById(appId);            // 收藏            ContentTotal contentTotal = new ContentTotal(contentId, "", userId, app, UserActionTypeEnum.likeRecord.getIndex(), null);            contentTotalService.up(contentTotal);            dataRet.setData(result);            dataRet.pushOk("成功！");        } catch (Exception e) {            dataRet.pushError("收藏记录上报异常");            logger.error("收藏记录上报异常", e);        }        return dataRet;    }    /**     * 收藏记录删除     *     * @param appId      应用id     * @param cardNo     智能卡号     * @param contentIds 内容ids。多条记录使用英文逗号分隔     * @return     */    @RequestMapping(value = "/like/del", method = {RequestMethod.GET, RequestMethod.POST})    @ResponseBody    public DataResultForAPI delLike(@RequestParam("appId") String appId,                                    @RequestParam("cardNo") String cardNo,                                    @RequestParam("contentIds") String contentIds) {        DataResultForAPI dataRet = new DataResultForAPI();        JSONObject result = new JSONObject();        try {            String userId = "";            if (cardNo != null) {                UserAccount userAccount = userAccountService.getByAccountNoAndAccountType(cardNo, 3, null);                if (userAccount != null) {                    userId = userAccount.getUserId();                }            }            // 收藏            contentTotalService.delete(appId, userId, contentIds, UserActionTypeEnum.likeRecord.getIndex());            dataRet.setData(result);            dataRet.pushOk("成功！");        } catch (Exception e) {            dataRet.pushError("收藏记录删除异常");            logger.error("收藏记录删除异常", e);        }        return dataRet;    }    /**     * 收藏记录查询     *     * @param appId    应用id     * @param cardNo   智能卡号     * @param pageNum  页数     * @param pageSize 每页条数     * @return     */    @RequestMapping(value = "/like/query", method = {RequestMethod.GET, RequestMethod.POST})    @ResponseBody    public DataResultForAPI queryLike(@RequestParam("appId") String appId,                                      @RequestParam("cardNo") String cardNo,                                      @RequestParam("pageNum") Integer pageNum,                                      @RequestParam("pageSize") Integer pageSize) {        DataResultForAPI dataRet = new DataResultForAPI();        try {            String userId = "";            if (cardNo != null) {                UserAccount userAccount = userAccountService.getByAccountNoAndAccountType(cardNo, 3, null);                if (userAccount != null) {                    userId = userAccount.getUserId();                }            }            // 收藏            Column app = columnService.findById(appId);            ContentTotal contentTotal = new ContentTotal(null, null, userId,                    app, UserActionTypeEnum.likeRecord.getIndex(), null);            List<ContentTotal> contentTotals = contentTotalService.query(contentTotal, pageNum, pageSize);            //返回数据解析            JSONObject result = analysis(contentTotals, UserActionTypeEnum.likeRecord.getIndex());            // 数据总条数            Long total = contentTotalService.getCountByAppIdAndUserIdAndType(appId, userId, UserActionTypeEnum.likeRecord.getIndex());            result.put("total", total);            result.put("retCode", "1");            result.put("retMsg", "操作成功");            dataRet.setData(result);            dataRet.pushOk("成功！");        } catch (Exception e) {            dataRet.pushError("收藏记录查询异常");            logger.error("收藏记录查询异常", e);        }        return dataRet;    }    /**     * 获取某内容的收藏情况     *     * @param appId     * @param cardNo     * @param contentId     * @return     */    @RequestMapping(value = "/like/get", method = {RequestMethod.GET, RequestMethod.POST})    @ResponseBody    public DataResultForAPI getLike(@RequestParam("appId") String appId,                                    @RequestParam("cardNo") String cardNo,                                    @RequestParam("contentId") String contentId) {        DataResultForAPI dataResult = new DataResultForAPI();        try {            String userId = "";            if (cardNo != null) {                UserAccount userAccount = userAccountService.getByAccountNoAndAccountType(cardNo, 3,                        null);                if (userAccount != null) {                    userId = userAccount.getUserId();                }            }            Integer isCollect;            ContentTotal contentTotal = contentTotalService.getByUserIdAndContentId(userId, contentId,                    UserActionTypeEnum.likeRecord.getIndex());            if (contentTotal != null) {                isCollect = 1;            } else {                isCollect = 0;            }            JSONObject result = new JSONObject();            result.put("isCollect", isCollect);            dataResult.setData(result);            dataResult.pushOk("成功！");        } catch (Exception e) {            logger.error("异常:" + e.getMessage(), e);            dataResult.pushError("异常:" + e.getMessage());        }        return dataResult;    }    /**     * 黑名单上报     *     * @param appId     应用id     * @param cardNo    智能卡号     * @param contentId 内容id     * @return     */    @RequestMapping(value = "/black/add", method = {RequestMethod.GET, RequestMethod.POST})    @ResponseBody    public DataResultForAPI addBlack(@RequestParam("appId") String appId,                                     @RequestParam("cardNo") String cardNo,                                     @RequestParam("contentId") String contentId) {        DataResultForAPI dataRet = new DataResultForAPI();        JSONObject result = new JSONObject();        try {            String userId = "";            if (cardNo != null) {                UserAccount userAccount = userAccountService.getByAccountNoAndAccountType(cardNo, 3, null);                if (userAccount != null) {                    userId = userAccount.getUserId();                }            }            Column app = columnService.findById(appId);            // 黑名单            ContentTotal contentTotal = new ContentTotal(contentId, "", userId, app, UserActionTypeEnum.blackRecord.getIndex(), null);            contentTotalService.up(contentTotal);            dataRet.setData(result);            dataRet.pushOk("成功！");        } catch (Exception e) {            dataRet.pushError("黑名单上报异常");            logger.error("黑名单上报异常", e);        }        return dataRet;    }    /**     * 黑名单删除     *     * @param appId      应用id     * @param cardNo     智能卡号     * @param contentIds 内容ids。多条记录使用英文逗号分隔     * @return     */    @RequestMapping(value = "/black/del", method = {RequestMethod.GET, RequestMethod.POST})    @ResponseBody    public DataResultForAPI delBlack(@RequestParam("appId") String appId,                                     @RequestParam("cardNo") String cardNo,                                     @RequestParam("contentIds") String contentIds) {        DataResultForAPI dataRet = new DataResultForAPI();        JSONObject result = new JSONObject();        try {            String userId = "";            if (cardNo != null) {                UserAccount userAccount = userAccountService.getByAccountNoAndAccountType(cardNo, 3, null);                if (userAccount != null) {                    userId = userAccount.getUserId();                }            }            // 黑名单            contentTotalService.delete(appId, userId, contentIds, UserActionTypeEnum.blackRecord.getIndex());            dataRet.setData(result);            dataRet.pushOk("成功！");        } catch (Exception e) {            dataRet.pushError("黑名单删除异常");            logger.error("黑名单删除异常", e);        }        return dataRet;    }    /**     * 黑名单记录查询     *     * @param appId    应用id     * @param cardNo   智能卡号     * @param pageNum  页数     * @param pageSize 每页条数     * @return     */    @RequestMapping(value = "/black/query", method = {RequestMethod.GET, RequestMethod.POST})    @ResponseBody    public DataResultForAPI queryBlack(@RequestParam("appId") String appId,                                       @RequestParam("cardNo") String cardNo,                                       @RequestParam("pageNum") Integer pageNum,                                       @RequestParam("pageSize") Integer pageSize) {        DataResultForAPI dataRet = new DataResultForAPI();        try {            String userId = "";            if (cardNo != null) {                UserAccount userAccount = userAccountService.getByAccountNoAndAccountType(cardNo, 3, null);                if (userAccount != null) {                    userId = userAccount.getUserId();                }            }            // 收藏            Column app = columnService.findById(appId);            ContentTotal contentTotal = new ContentTotal(null, null, userId,                    app, UserActionTypeEnum.blackRecord.getIndex(), null);            List<ContentTotal> contentTotals = contentTotalService.query(contentTotal, pageNum, pageSize);            //返回数据解析            JSONObject result = analysis(contentTotals, UserActionTypeEnum.blackRecord.getIndex());            // 数据总条数            Long total = contentTotalService.getCountByAppIdAndUserIdAndType(appId, userId, UserActionTypeEnum.blackRecord.getIndex());            result.put("total", total);            result.put("retCode", "1");            result.put("retMsg", "操作成功");            dataRet.setData(result);            dataRet.pushOk("成功！");        } catch (Exception e) {            dataRet.pushError("黑名单记录查询异常");            logger.error("黑名单记录查询异常", e);        }        return dataRet;    }    /**     * 获取某内容的黑名单情况     *     * @param appId     * @param cardNo     * @param contentId     * @return     */    @RequestMapping(value = "/black/get", method = {RequestMethod.GET, RequestMethod.POST})    @ResponseBody    public DataResultForAPI getBlack(@RequestParam("appId") String appId,                                     @RequestParam("cardNo") String cardNo,                                     @RequestParam("contentId") String contentId) {        DataResultForAPI dataResult = new DataResultForAPI();        try {            String userId = "";            if (cardNo != null) {                UserAccount userAccount = userAccountService.getByAccountNoAndAccountType(cardNo, 3,                        null);                if (userAccount != null) {                    userId = userAccount.getUserId();                }            }            Integer isBlack;            ContentTotal contentTotal = contentTotalService.getByUserIdAndContentId(userId, contentId,                    UserActionTypeEnum.blackRecord.getIndex());            if (contentTotal != null) {                isBlack = 1;            } else {                isBlack = 0;            }            JSONObject result = new JSONObject();            result.put("isBlack", isBlack);            dataResult.setData(result);            dataResult.pushOk("成功！");        } catch (Exception e) {            logger.error("异常:" + e.getMessage(), e);            dataResult.pushError("异常:" + e.getMessage());        }        return dataResult;    }    /**     * 播放记录上报     *     * @param appId     应用id     * @param cardNo    智能卡号     * @param contentId 内容id     * @param number    集数     * @param duration  观看时长     * @return     */    @RequestMapping(value = "/playRecord/add", method = {RequestMethod.GET, RequestMethod.POST})    @ResponseBody    public DataResultForAPI addPlayRecord(@RequestParam("appId") String appId,                                          @RequestParam("cardNo") String cardNo,                                          @RequestParam("contentId") String contentId,                                          @RequestParam(value = "number", required = false) Integer number,                                          @RequestParam("duration") String duration) {        DataResultForAPI dataRet = new DataResultForAPI();        JSONObject result = new JSONObject();        try {            if (number == null) {                number = 1;            }            String userId = "";            if (cardNo != null) {                UserAccount userAccount = userAccountService.getByAccountNoAndAccountType(cardNo, 3, null);                if (userAccount != null) {                    userId = userAccount.getUserId();                }            }            Column app = columnService.findById(appId);            // 用户播放记录            ContentTotal contentTotal = new ContentTotal(contentId, duration, userId, app, UserActionTypeEnum.playRecord.getIndex(), number);            contentTotalService.up(contentTotal);            // 用户当日观看时长            ContentTotal contentTotal1 = new ContentTotal(null, duration, userId, app, UserActionTypeEnum.timeRecord.getIndex(), null);            contentTotalService.up(contentTotal1);            dataRet.setData(result);            dataRet.pushOk("成功！");        } catch (Exception e) {            dataRet.pushError("播放记录上报异常");            logger.error("播放记录上报异常", e);        }        return dataRet;    }    /**     * 播放记录删除     *     * @param appId      应用id     * @param cardNo     智能卡号     * @param contentIds 内容ids。多条记录使用英文逗号分隔     * @return     */    @RequestMapping(value = "/playRecord/del", method = {RequestMethod.GET, RequestMethod.POST})    @ResponseBody    public DataResultForAPI delPlayRecord(@RequestParam("appId") String appId,                                          @RequestParam("cardNo") String cardNo,                                          @RequestParam("contentIds") String contentIds) {        DataResultForAPI dataRet = new DataResultForAPI();        JSONObject result = new JSONObject();        try {            String userId = "";            if (cardNo != null) {                UserAccount userAccount = userAccountService.getByAccountNoAndAccountType(cardNo, 3, null);                if (userAccount != null) {                    userId = userAccount.getUserId();                }            }            // 播放记录            contentTotalService.delete(appId, userId, contentIds, UserActionTypeEnum.playRecord.getIndex());            dataRet.setData(result);            dataRet.pushOk("成功！");        } catch (Exception e) {            dataRet.pushError("播放记录删除异常");            logger.error("播放记录删除异常", e);        }        return dataRet;    }    /**     * 播放记录查询     *     * @param appId    应用id     * @param cardNo   智能卡号     * @param pageNum  页数     * @param pageSize 每页条数     * @return     */    @RequestMapping(value = "/playRecord/query", method = {RequestMethod.GET, RequestMethod.POST})    @ResponseBody    public DataResultForAPI queryPlayRecord(@RequestParam("appId") String appId,                                            @RequestParam("cardNo") String cardNo,                                            @RequestParam("pageNum") Integer pageNum,                                            @RequestParam("pageSize") Integer pageSize) {        DataResultForAPI dataRet = new DataResultForAPI();        try {            String userId = "";            if (cardNo != null) {                UserAccount userAccount = userAccountService.getByAccountNoAndAccountType(cardNo, 3, null);                if (userAccount != null) {                    userId = userAccount.getUserId();                }            }            // 收藏            Column app = columnService.findById(appId);            ContentTotal contentTotal = new ContentTotal(null, null, userId,                    app, UserActionTypeEnum.playRecord.getIndex(), null);            List<ContentTotal> contentTotals = contentTotalService.query(contentTotal, pageNum, pageSize);            //返回数据解析            JSONObject result = analysis(contentTotals, UserActionTypeEnum.playRecord.getIndex());            // 数据总条数            Long total = contentTotalService.getCountByAppIdAndUserIdAndTypeGroupByBizValue(appId, userId, UserActionTypeEnum.playRecord.getIndex());            result.put("total", total);            result.put("retCode", "1");            result.put("retMsg", "操作成功");            dataRet.setData(result);            dataRet.pushOk("成功！");        } catch (Exception e) {            dataRet.pushError("播放记录查询异常");            logger.error("播放记录查询异常", e);        }        return dataRet;    }    /**     * 获取某内容的播放情况     *     * @param appId     * @param cardNo     * @param contentId     * @return     */    @RequestMapping(value = "/playRecord/get", method = {RequestMethod.GET, RequestMethod.POST})    @ResponseBody    public DataResultForAPI getPlayRecord(@RequestParam("appId") String appId,                                          @RequestParam("cardNo") String cardNo,                                          @RequestParam("contentId") String contentId) {        DataResultForAPI dataResult = new DataResultForAPI();        try {            String userId = "";            if (cardNo != null) {                UserAccount userAccount = userAccountService.getByAccountNoAndAccountType(cardNo, 3,                        null);                if (userAccount != null) {                    userId = userAccount.getUserId();                }            }            // 获取剧集信息            CatalogueRelation catalogueRelation = catalogueRelationService.findById(contentId);            // 获取子集总集数            Long total = contentService.findByPIdTotal(catalogueRelation.getBId());            //集数            Integer number;            //时长            Integer duration;            ContentTotal contentTotal = contentTotalService.getByUserIdAndContentId(userId, contentId, UserActionTypeEnum.playRecord.getIndex());            if (contentTotal != null) {                number = contentTotal.getNumber();                duration = Integer.valueOf(contentTotal.getDuration());            } else {                number = 1;                duration = 0;            }            JSONObject result = new JSONObject();            result.put("total", total);            result.put("number", number);            result.put("duration", duration);            dataResult.setData(result);            dataResult.pushOk("成功！");        } catch (Exception e) {            logger.error("异常:" + e.getMessage(), e);            dataResult.pushError("异常:" + e.getMessage());        }        return dataResult;    }    /**     * 今日观看时长     *     * @param appId  应用id     * @param cardNo 智能卡号     * @return     */    @RequestMapping(value = "/todayTime/query", method = {RequestMethod.GET, RequestMethod.POST})    @ResponseBody    public DataResultForAPI queryTodayTime(@RequestParam("appId") String appId,                                           @RequestParam("cardNo") String cardNo) {        DataResultForAPI dataRet = new DataResultForAPI();        try {            String userId = "";            if (cardNo != null) {                UserAccount userAccount = userAccountService.getByAccountNoAndAccountType(cardNo, 3, null);                if (userAccount != null) {                    userId = userAccount.getUserId();                }            }            // 收藏            Column app = columnService.findById(appId);            ContentTotal contentTotal = new ContentTotal(null, null, userId,                    app, UserActionTypeEnum.timeRecord.getIndex(), null);            List<ContentTotal> contentTotals = contentTotalService.query(contentTotal, 1, 10);            //返回数据解析            JSONObject result = analysis(contentTotals, UserActionTypeEnum.timeRecord.getIndex());            dataRet.setData(result);            dataRet.pushOk("成功！");        } catch (Exception e) {            dataRet.pushError("今日观看时长异常");            logger.error("今日观看时长异常", e);        }        return dataRet;    }    private JSONObject analysis(List<ContentTotal> contentTotals, Integer type) {        JSONObject result = new JSONObject();        List<ShowContentApiVo> apiVos = Lists.newArrayList();        if (type == UserActionTypeEnum.signRecord.getIndex()) {            // 获取签到记录            JSONArray signInList = new JSONArray();            // 设置日期格式            SimpleDateFormat df = new SimpleDateFormat("HH:mm:ss");            for (ContentTotal contentTotal : contentTotals) {                String signInDate = df.format(contentTotal.getCreateDate());                signInList.add(signInDate);            }            result.put("signInRecords", apiVos);        } else if (type == UserActionTypeEnum.timeRecord.getIndex()) {            //获取今日观看时长记录            ContentTotal contentTotal = contentTotals.get(0);            result.put("watchDuration", contentTotal.getDuration());        } else {            // 播放记录、收藏记录、黑名单记录            for (ContentTotal contentTotal : contentTotals) {                CatalogueRelation catalogueRelation = catalogueRelationService.findById(contentTotal.getBizValue());                if(catalogueRelation != null){                    Content content = contentService.findById(catalogueRelation.getBId());                    List<PictureApiVo> pictures = pictureVoService.findPictureApiVosByContentIdAndBusinessType(content.getId(), BusinessTypeEnum.cover.getIndex());                    ShowContentApiVo apiVo = new ShowContentApiVo(content, pictures, catalogueRelation);                    apiVos.add(apiVo);                }            }            result.put("records", apiVos);        }        return result;    }}