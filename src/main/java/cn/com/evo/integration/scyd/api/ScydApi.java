package cn.com.evo.integration.scyd.api;import cn.com.evo.cms.domain.entity.cms.Content;import cn.com.evo.cms.domain.entity.cms.Video;import cn.com.evo.cms.domain.entity.total.ContentOperation;import cn.com.evo.cms.service.cms.ContentService;import cn.com.evo.cms.service.cms.VideoService;import cn.com.evo.cms.service.total.ContentOperationService;import cn.com.evo.integration.common.ConstantFactory;import cn.com.evo.integration.scyd.common.ConstantEnum;import cn.com.evo.integration.scyd.common.ScydUtils;import cn.com.evo.integration.scyd.pay.ScydPaySDK;import cn.com.evo.integration.scyd.pay.dto.ScydBindRequestDto;import cn.com.evo.integration.scyd.pay.dto.ScydResponseDto;import com.frameworks.core.web.controller.BaseController;import com.frameworks.core.web.result.DataResultForAPI;import com.google.common.collect.Lists;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.*;import java.io.File;import java.util.List;import java.util.Map;/** * @Description: * @author: lu.xin * @create: 2019-04-11 10:13 AM **/@Controller@RequestMapping("/api/scyd")@CrossOrigin(origins = "*", maxAge = 3600)public class ScydApi extends BaseController {    /**     * 接口返回成功标识     */    public static final String OK = "ORD-000";    /**     * 内容注入结果通知--成功标识     */    private final static String CMD_RESULT_OK = "0";    @Autowired    private ContentOperationService contentOperationService;    @Autowired    private ContentService contentService;    @Autowired    private VideoService videoService;    /**     * 内容注入结果通知接口     * 局方调用到服务器webservice接口，webservice接口再次调用本接口     *     * @param correlateID     * @param cmdResult     * @param resultFileURL     * @return     */    @RequestMapping(value = "/resultNotify", method = {RequestMethod.GET, RequestMethod.POST})    @ResponseBody    public DataResultForAPI resultNotify(@RequestParam("correlateID") String correlateID,                                         @RequestParam("cmdResult") String cmdResult,                                         @RequestParam("resultFileURL") String resultFileURL) {        DataResultForAPI dataResult = new DataResultForAPI();        try {            // 注入操作id            String correlateId = correlateID;            // 包含真实播放地址的xml的ftp访问路径            if (CMD_RESULT_OK.equals(cmdResult)) {                // 成功                // 根据ftp地址下载xml文件，并解析                if (StringUtils.isNotBlank(resultFileURL)) {                    String localPath = ScydUtils.downFtpFile(resultFileURL, ConstantFactory.map.get(ConstantEnum.content_call_back_xml_dir.getKey()));                    // 解析xml                    Map<String, String> data = ScydUtils.transXmlData(localPath);                    // 中兴cdn地址                    String zxCDNPlayUrl = data.get("ZxCDNPlayUrl");                    // 华为cdn地址                    String hwCDNPlayUrl = data.get("HwCDNPlayUrl");                    // 烽火cdn地址                    String fhCDNPlayUrl = data.get("FhCDNPlayUrl ");                    logger.error("ZxCDNPlayUrl:" + zxCDNPlayUrl);                    logger.error("HwCDNPlayUrl:" + hwCDNPlayUrl);                    logger.error("FhCDNPlayUrl:" + fhCDNPlayUrl);                    ContentOperation contentOperation = contentOperationService.getByCorrelateId(correlateId);                    if (contentOperation != null) {                        // 更新内容注入状态                        Content content = contentOperation.getContent();                        content.setSynType(2);                        contentService.update(content);                        // 更新地址                        List<Video> videos = videoService.findByContentId(content.getId());                        // video临时文件路径                        String videolocalPath = "";                        for (Video video : videos) {                            video.setCdn1Url(zxCDNPlayUrl);                            video.setCdn2Url(hwCDNPlayUrl);                            video.setCdn3Url(fhCDNPlayUrl);                            videolocalPath = video.getUrl();                            videoService.update(video);                        }                        // 更新注入记录状态                        contentOperation.setStatus(2);                        contentOperationService.update(contentOperation);                        // 调用内容与产品绑定接口                        List<Content> contents = Lists.newArrayList();                        contents.add(content);                        ScydBindRequestDto bindRequestDto = new ScydBindRequestDto("REGIST",                                contents);                        ScydResponseDto responseDto = ScydPaySDK.contentBind(bindRequestDto);                        if (responseDto != null) {                            if (OK.equals(responseDto.getResult())) {                                // 调用成功                                logger.error("产品与内容绑定成功：" + responseDto.toString());                                contentOperation.setInfo(contentOperation.getInfo() + "|产品与内容绑定成功" + responseDto.toString());                            } else {                                // 调用失败                                contentOperation.setInfo(contentOperation.getInfo() + "|产品与内容绑定失败" + responseDto.toString());                                logger.error("产品与内容绑定失败：" + responseDto.toString());                            }                        } else {                            logger.error("产品与内容绑定失败");                        }                        contentOperationService.update(contentOperation);                        // 删除本地临时文件                        try {                            File temp = new File(ConstantFactory.map.get(ConstantEnum.video_ftp_dir.getKey()) + videolocalPath);                            if (!temp.isDirectory()) {                                if (temp.exists()) {                                    temp.delete();                                }                            }                        } catch (Exception e) {                            logger.error("删除本地临时视频文件异常" + e.getMessage(), e);                        }                    } else {                        logger.error("内容注入记录不存在:" + correlateId);                    }                } else {                    logger.error(correlateId + "|resultFileURL为空:" + resultFileURL);                }            } else {                // 失败                ContentOperation contentOperation = contentOperationService.getByCorrelateId(correlateId);                if (contentOperation != null) {                    // 更新内容注入状态                    Content content = contentOperation.getContent();                    content.setSynType(3);                    contentService.update(content);                    // 更新注入记录状态                    contentOperation.setStatus(3);                    contentOperationService.update(contentOperation);                } else {                    logger.error("内容注入记录不存在:" + correlateId);                }                dataResult.pushError("内容注入失败!!!");            }        } catch (Exception e) {            logger.error("处理内容注入结果异常:" + e.getMessage(), e);            dataResult.pushError("处理内容注入结果异常:" + e.getMessage());        }        return dataResult;    }    /**     * 栏目内容绑定     *     * @param contentId     * @return     */    @RequestMapping(value = "/bind", method = {RequestMethod.GET, RequestMethod.POST})    @ResponseBody    public String bind(@RequestParam("contentId") String contentId) {        // 调用内容与产品绑定接口        Content content = contentService.findById(contentId);        List<Content> contents = Lists.newArrayList();        contents.add(content);        ScydBindRequestDto bindRequestDto = new ScydBindRequestDto("REGIST",                contents);        ScydResponseDto responseDto = ScydPaySDK.contentBind(bindRequestDto);        if (OK.equals(responseDto.getResult())) {            // 调用成功            logger.error("产品与内容绑定成功：" + responseDto.toString());        } else {            // 调用失败            logger.error("产品与内容绑定失败：" + responseDto.toString());        }        return responseDto.toString();    }}