package cn.com.evo.cms.repository.cms;import cn.com.evo.cms.domain.entity.cms.CatalogueRelation;import cn.com.evo.cms.domain.entity.cms.Content;import cn.com.evo.cms.domain.vo.cms.ContentSearchVo;import cn.com.evo.cms.domain.vo.cms.PublishContentVo;import cn.com.evo.cms.service.cms.CatalogueRelationService;import com.frameworks.core.web.page.Pager;import com.google.common.collect.Lists;import org.apache.commons.lang3.StringUtils;import org.hibernate.SQLQuery;import org.hibernate.transform.Transformers;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import javax.persistence.EntityManager;import javax.persistence.PersistenceContext;import java.util.List;import java.util.Map;/** * @Description: * @author: lu.xin * @create: 2019-01-16 5:09 PM **/@Service@Transactionalpublic class CatalogueRelationRepositoryImpl {    @PersistenceContext    private EntityManager entityManager;    @Autowired    private CatalogueRelationService catalogueRelationService;    /**     * 分页获取电影和剧集内容对象     *     * @param webPage         分页对象     * @param contentSearchVo 内容检索对象     * @return     */    public List<PublishContentVo> findMovieAndEpisodeContent(Pager webPage, ContentSearchVo contentSearchVo) {        String sql = createSql("cms_content", contentSearchVo);        return query(sql, webPage);    }    /**     * 分页获取直播内容对象     *     * @param webPage         分页对象     * @param contentSearchVo 内容检索对象     * @return     */    public List<PublishContentVo> findLiveContent(Pager webPage, ContentSearchVo contentSearchVo) {        String sql = createSql("cms_live_broadcast", contentSearchVo);        return query(sql, webPage);    }    /**     * 分页获取活动内容对象     *     * @param webPage         分页对象     * @param contentSearchVo 内容检索对象     * @return     */    public List<PublishContentVo> findActiveContent(Pager webPage, ContentSearchVo contentSearchVo) {        String sql = createSql("cms_active_info", contentSearchVo);        return query(sql, webPage);    }    /**     * 分页获取图书内容对象     *     * @param webPage         分页对象     * @param contentSearchVo 内容检索对象     * @return     */    public List<PublishContentVo> findBookContent(Pager webPage, ContentSearchVo contentSearchVo) {        String sql = createSql("book_info", contentSearchVo);        return query(sql, webPage);    }    public List<PublishContentVo> findColumnContent(Pager webPage, ContentSearchVo contentSearchVo) {        String sql = createSql("cms_column", contentSearchVo);        return query(sql, webPage);    }    /**     * 根据aId(目录)查询文章内容     * @param webPage     * @param contentSearchVo     * @return     */    public List<PublishContentVo> findSpiderContent(Pager webPage, ContentSearchVo contentSearchVo) {        String sql = createSql("spi_spider_content", contentSearchVo);        return query(sql, webPage);    }    /**     * 创建底层sql     *     * @param tableName     * @param contentSearchVo     * @return     */    public String createSql(String tableName, ContentSearchVo contentSearchVo) {        // 查询sql        String sql = "select i.id,i.name,c.id AS 'columnId',c.NAME AS 'columnName',r.id AS 'relId' from cms_catalogue_relation r," + tableName + " i,cms_column c " +                " where r.bId = i.id and r.aId = c.id";        // 拼接条件        if (contentSearchVo.getType() != null) {            sql += " and r.type = " + contentSearchVo.getType();        }        if (StringUtils.isNotBlank(contentSearchVo.getAId())) {            sql += " and c.id = " + contentSearchVo.getAId();        }        if (contentSearchVo.getContentType() != null) {            sql += " and r.contentType = " + contentSearchVo.getContentType();        }        if (StringUtils.isNotBlank(contentSearchVo.getContentName())) {            sql += " and i.name like '%" + contentSearchVo.getContentName() + "%'";        }        if (contentSearchVo.getEnable() != null) {            sql += " and r.publish = " + contentSearchVo.getEnable();        }        return sql;    }    /**     * 执行通用查询以及转换方法     *     * @param sql     底层sql     * @param webPage 分页对象     * @return     */    public List<PublishContentVo> query(String sql, Pager webPage) {        // 每页条数        int pageSize = Integer.valueOf(webPage.getPageSize());        // 页数        int pageNum = Integer.valueOf(webPage.getPageNumber());        // 分页 起始值        int start = (pageNum - 1) * pageSize;        // 查询分页数据        SQLQuery listSqlQuery = entityManager.createNativeQuery(sql + " limit ?1,?2").setParameter(1, start).setParameter(2, pageSize)                .unwrap(SQLQuery.class);        // 返回接口映射为map        List listTemps = listSqlQuery.setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list();        // 处理list数据        List<PublishContentVo> publishContentVos = Lists.newArrayList();        for (Object obj : listTemps) {            Map row = (Map) obj;            Content content = new Content();            content.setId(row.get("id") + "");            content.setName(row.get("name") + "");            String relId = row.get("relId") + "";            CatalogueRelation entity = catalogueRelationService.findById(relId);            PublishContentVo vo = new PublishContentVo(entity, content);            vo.setColumnId(Integer.valueOf(row.get("columnId").toString()));            vo.setColumnName(row.get("columnName") + "");            publishContentVos.add(vo);        }        // 查询总条数        SQLQuery countSqlQuery = entityManager.createNativeQuery(sql).unwrap(SQLQuery.class);        // 返回接口映射为map        List countTemps = countSqlQuery.setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list();        webPage.setTotalCount(countTemps.size());        return publishContentVos;    }}