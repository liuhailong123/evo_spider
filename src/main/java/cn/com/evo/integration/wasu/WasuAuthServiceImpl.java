package cn.com.evo.integration.wasu;import cn.com.evo.cms.domain.entity.cms.CatalogueRelation;import cn.com.evo.cms.domain.entity.cms.Column;import cn.com.evo.cms.domain.entity.cms.Content;import cn.com.evo.cms.domain.entity.pay.Product;import cn.com.evo.cms.domain.entity.vip.UserAccount;import cn.com.evo.cms.service.cms.CatalogueRelationService;import cn.com.evo.cms.service.cms.ColumnService;import cn.com.evo.cms.service.cms.ContentService;import cn.com.evo.cms.service.pay.LimitFreeService;import cn.com.evo.cms.service.pay.OrderService;import cn.com.evo.cms.service.pay.ProductRelService;import cn.com.evo.cms.service.vip.UserAccountService;import cn.com.evo.cms.service.vip.UserServerService;import cn.com.evo.cms.web.api.vo.VideoApiVo;import cn.com.evo.cms.web.voService.VideoVoService;import cn.com.evo.integration.common.dto.PlayAuthDto;import cn.com.evo.integration.common.request.AuthRequest;import cn.com.evo.integration.common.result.AuthResponse;import cn.com.evo.integration.wasu.common.auth.WasuAuthRequest;import cn.com.evo.integration.wasu.sdk.AuthSDK;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import javax.transaction.Transactional;import java.util.List;/** * @Description: 华数鉴权接口 * @author: lu.xin * @create: 2019-04-04 3:27 PM **/@Service@Transactionalpublic class WasuAuthServiceImpl {    @Autowired    private LimitFreeService limitFreeService;    @Autowired    private UserAccountService userAccountService;    @Autowired    private CatalogueRelationService catalogueRelationService;    @Autowired    private ContentService contentService;    @Autowired    private UserServerService userServerService;    @Autowired    private ProductRelService productRelService;    @Autowired    private OrderService orderService;    @Autowired    private ColumnService columnService;    @Autowired    private VideoVoService videoVoService;    /**     * 播放鉴权     *     * @param authRequest     * @return     */    public AuthResponse playAuth(WasuAuthRequest authRequest) {        AuthResponse response = new AuthResponse();        try {            // 获取用户信息            UserAccount userAccount = userAccountService.getByAccountNoAndAccountType(authRequest.getCardNo(),                    3, null);            if (userAccount == null) {                // 用户不存在或创建失败，返回应用鉴权失败                response.pushUserAuthFail();                return response;            } else {                Column app = columnService.findById(authRequest.getAppId());                // 获取内容对应播放地址                List<VideoApiVo> videos = videoVoService.findVideos(authRequest.getContentId(),                        authRequest.getChildContentId(), app.getPlatform());                // 判断内容是否是剧集如果是剧集则判断是否前三集免费                if (StringUtils.isNotBlank(authRequest.getChildContentId())) {                    // 鉴权内容是剧集                    CatalogueRelation rel = catalogueRelationService.getByAIdAndBIdAndType(authRequest.getColumnId(),                            authRequest.getContentId(), 2);                    if (rel != null) {                        Content child = contentService.findById(authRequest.getChildContentId());                        if (rel.getFreeNum() != null) {                            if (child.getSort() <= rel.getFreeNum()) {                                // 剧集前N集免费                                response.pushLimitFreeSuccess(videos);                                return response;                            }                        }                    }                }                // 栏目是否存在限时免费                boolean isFree = limitFreeService.isFree(authRequest.getColumnId(), authRequest.getAppId());                if (isFree) {                    // 限免，返回限免通过                    response.pushLimitFreeSuccess(videos);                    return response;                } else {                    // 非限免                    // 栏目是否配置产品，如果配置产品则判断产品订购状态                    // 获取有效期内的产品                    List<Product> products = productRelService.findByBizId(authRequest.getColumnId());                    if (products.size() == 0) {                        // 栏目未配置产品定价,开始判断应用服务开通情况                        // 根据serverCode、userId查询服务开通表，判断是否到期                        boolean flag = userServerService.checkUserServer(userAccount.getUserId(),                                "10001", authRequest.getAppId());                        if (!flag) {                            // 服务已开通并且未过期,返回鉴权通过                            response.pushAuthSuccess(videos);                            return response;                        } else {                            // 服务未开通，开始华数特殊逻辑，查询boss接口判断是否存在线下订购行为                            queryOfflineOrder(authRequest, response, videos);                            return response;                        }                    } else {                        // 栏目已配置产品定价,                        // 调用底层逻辑判断产品订购情况                        boolean flag = orderService.orderAuth("10001", userAccount.getUserId(),                                authRequest.getAppId(), products);                        if (!flag) {                            response.pushAuthSuccess(videos);                        } else {                            response.pushOrderAuthFail(products.get(0).getId(), videos);                        }                    }                }            }            return response;        } catch (Exception e) {            throw new RuntimeException("浙江华数省网播放鉴权逻辑异常：" + e.getMessage(), e);        }    }    /**     * 华数线下查询逻辑     *     * @param authRequest     * @param response     */    private void queryOfflineOrder(AuthRequest authRequest, AuthResponse response, List<VideoApiVo> videos) {        // 栏目配置的BOSS产品列表        List<Product> list = productRelService.findByBizIdAndType(authRequest.getAppId(), 2);        if (list.size() > 0) {            boolean flag = AuthSDK.auth(authRequest.getCardNo(), list);            if (flag) {                response.pushAuthSuccess(videos);            } else {                response.pushServerAuthFail(videos);            }        } else {            response.pushServerAuthFail(videos);        }    }    /**     * 华数线下查询逻辑     *     * @param dto     * @param response     */    public void queryOfflineOrder(PlayAuthDto dto, AuthResponse response) {        // 栏目配置的BOSS产品列表        List<Product> list = productRelService.findByBizIdAndType(dto.getAppId(), 2);        if (list.size() > 0) {            boolean flag = AuthSDK.auth(dto.getCardNo(), list);            if (flag) {                response.pushAuthSuccess(dto.getVideos());            }        }    }}