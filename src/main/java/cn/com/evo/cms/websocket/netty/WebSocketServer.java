package cn.com.evo.cms.websocket.netty;import com.google.common.util.concurrent.ThreadFactoryBuilder;import io.netty.bootstrap.ServerBootstrap;import io.netty.channel.Channel;import io.netty.channel.EventLoopGroup;import io.netty.channel.nio.NioEventLoopGroup;import io.netty.channel.socket.nio.NioServerSocketChannel;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.springframework.stereotype.Service;import javax.annotation.PostConstruct;import java.util.concurrent.*;/** * @Description: Netty的WebSocket服务类 * @author: lu.xin * @create: 2019-04-22 10:20 AM **/@Servicepublic class WebSocketServer {    protected Logger logger = LogManager.getLogger(this.getClass());    /**     * WebSocket 端口     */    private static final int PORT = 8999;    /**     * 是否已启动     */    private static boolean isRun = true;    /**     * springMVC 启动完成后执行该方法     */    @PostConstruct    public void run() {        if (!isRun) {            logger.error("WebSocketServer启动");            isRun = true;            // 通过线程池启动WebSocket服务            ThreadFactory namedThreadFactory = new ThreadFactoryBuilder()                    .setNameFormat("webSocketServer-pool-%d").build();            ExecutorService singleThreadPool = new ThreadPoolExecutor(1, 1,                    0L, TimeUnit.MILLISECONDS,                    new LinkedBlockingQueue<Runnable>(1024), namedThreadFactory, new ThreadPoolExecutor.AbortPolicy());            singleThreadPool.execute(() -> webSocketServer());            singleThreadPool.shutdown();        }    }    /**     * WebSocket服务启动方法     */    public void webSocketServer() {        EventLoopGroup bossGroup = new NioEventLoopGroup(1);        EventLoopGroup workerGroup = new NioEventLoopGroup();        try {            ServerBootstrap b = new ServerBootstrap();            b.group(bossGroup, workerGroup)                    .channel(NioServerSocketChannel.class)                    .childHandler(new WebSocketServerInitializer());            Channel ch = b.bind(PORT).sync().channel();            ch.closeFuture().sync();        } catch (InterruptedException e) {            logger.error("WebSocket服务启动异常：" + e.getMessage(), e);        } finally {            bossGroup.shutdownGracefully();            workerGroup.shutdownGracefully();        }    }}