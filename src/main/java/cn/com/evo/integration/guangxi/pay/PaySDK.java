package cn.com.evo.integration.guangxi.pay;import cn.com.evo.cms.utils.HttpUtil;import cn.com.evo.integration.common.ConstantFactory;import cn.com.evo.integration.common.utils.BeanToXml;import cn.com.evo.integration.guangxi.common.ConstantEnum;import cn.com.evo.integration.guangxi.pay.dto.pay.ProductInfo;import cn.com.evo.integration.guangxi.pay.dto.pay.dto.OrderInfo;import cn.com.evo.integration.guangxi.pay.dto.pay.dto.order.OrderProductRequest;import cn.com.evo.integration.guangxi.pay.dto.pay.dto.order.OrderProductResponse;import cn.com.evo.integration.guangxi.pay.dto.pay.dto.query.QueryProductRequest;import cn.com.evo.integration.guangxi.pay.dto.pay.dto.query.QueryResponse;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;/** * @Description: 广西广电支付类接口封装 * @author: lu.xin * @create: 2019-05-15 3:29 PM **/public class PaySDK {    protected static Logger logger = LogManager.getLogger(PaySDK.class);    private static final String RET_OK_CODE = "SUCCESS";    /**     * 查询产品信息接口     *     * @param stbId     机顶盒号     * @param productId 局方配置的产品id     * @return ProductInfo 产品对象     */    public static ProductInfo queryProductInfo(String stbId, String productId) {        try {            QueryProductRequest request = new QueryProductRequest(stbId, productId);            String url = ConstantFactory.map.get(ConstantEnum.product_url.getKey());            String resultStr = HttpUtil.get(url + "?" + request.toParams(), "查询产品信息接口");            logger.error("查询产品信息接口返回：" + resultStr);            QueryResponse response = (QueryResponse) BeanToXml.convertXmlStrToObject(QueryResponse.class, resultStr);            System.out.println(response);            try {                if (RET_OK_CODE.equals(response.getResponse().getRetCode())) {                    String prodId = response.getResponse().getProdInfos().getProdDto().get(0).getProdId();                    String productName = response.getResponse().getProdInfos().getProdDto().get(0).getProdName();                    String tariffid = response.getResponse().getProdInfos().getProdDto().get(0).getTariffs()                            .getTariffDto().get(0).getTariffId();                    String unitPrice = response.getResponse().getProdInfos().getProdDto().get(0).getTariffs()                            .getTariffDto().get(0).getPriceValue();                    ProductInfo productInfo = new ProductInfo(prodId, productName, tariffid, unitPrice);                    return productInfo;                } else {                    return null;                }            } catch (Exception e) {                logger.error("调用查询产品信息接口异常：" + e.getMessage(), e);                return null;            }        } catch (Exception e) {            throw new RuntimeException("调用局方添加媒资绑定产品接口异常" + e.getMessage(), e);        }    }    /**     * 业务开通订单创建接口     *     * @param productId   产品id (产品信息接口获取)     * @param productName 产品名称 (产品信息接口获取)     * @param tariffId    资费id (产品信息接口获取)     * @param qty         订购周期     * @param userId      用户id     * @param stbId       机顶盒号     * @param areaCode    用户区域码     * @param unitPrice   单价 (产品信息接口获取)     * @param isHD        机顶盒类型 "720P"高清,"480P"标清     */    public static OrderInfo orderCreate(String productId, String productName, String tariffId, String qty, String userId,                                        String stbId, String areaCode, String unitPrice, String isHD) {        try {            OrderProductRequest request = new OrderProductRequest(productId, productName, tariffId, qty, userId,                    stbId, areaCode, unitPrice, isHD);            String url = ConstantFactory.map.get(ConstantEnum.product_url.getKey());            String resultStr = HttpUtil.get(url + "?" + request.toParams(), "业务开通订单创建接口");            logger.error("业务开通订单创建接口返回：" + resultStr);            OrderProductResponse response = (OrderProductResponse)                    BeanToXml.convertXmlStrToObject(OrderProductResponse.class, resultStr);            System.out.println(response);            try {                if (RET_OK_CODE.equals(response.getResultCode())) {                    OrderInfo orderInfo = new OrderInfo(response.getOrderId(), response.getOrderUrl());                    return orderInfo;                } else {                    return null;                }            } catch (Exception e) {                logger.error("业务开通订单创建接口异常：" + e.getMessage(), e);                return null;            }        } catch (Exception e) {            logger.error("业务开通订单创建接口" + e.getMessage(), e);            throw new RuntimeException("业务开通订单创建接口异常：" + e.getMessage(), e);        }    }}