package cn.com.evo.integration.scyd.content.xml.model;import cn.com.evo.cms.domain.entity.cms.Content;import cn.com.evo.cms.domain.entity.cms.Video;import cn.com.evo.integration.common.ConstantFactory;import cn.com.evo.integration.scyd.common.ConstantEnum;import com.frameworks.utils.DateUtil;import com.google.common.collect.Lists;import org.apache.commons.codec.digest.DigestUtils;import org.apache.commons.lang3.StringUtils;import javax.xml.bind.annotation.XmlAttribute;import javax.xml.bind.annotation.XmlType;import javax.xml.bind.annotation.XmlValue;import java.io.FileInputStream;import java.io.IOException;import java.util.List;/** * @Description: * @author: lu.xin * @create: 2019-03-05 6:17 PM **/@XmlType(propOrder = {        "name",        "value",})public class Property {    private String name;    private String value;    public Property() {    }    public Property(String name, String value) {        this.name = name;        this.value = value;    }    @XmlAttribute(name = "Name")    public String getName() {        return name;    }    @XmlValue    public String getValue() {        return value;    }    public void setName(String name) {        this.name = name;    }    public void setValue(String value) {        this.value = value;    }    /**     * 创建剧集对象list     *     * @param content     内容对象     * @param pictureUrls 海报地址list（ftp格式）     * @return     */    public static List<Property> createSeriesProperties(Content content, List<String> pictureUrls) {        // 参数校验        checkSeriesParams(content, pictureUrls);        List<Property> list = Lists.newArrayList();        /*必填*/        // 导演        list.add(new Property("actordisplay", content.getDirectorTags()));        // 清晰度        list.add(new Property("definition", "1"));        // 大海报地址        if (pictureUrls.size() > 0) {            list.add(new Property("pictureurl1", pictureUrls.get(0)));        }        // 名称        list.add(new Property("name", content.getName()));        // 语言        list.add(new Property("language", content.getLanguage()));        // 主演        list.add(new Property("writerdisplay", content.getActorTags()));        // 描述        list.add(new Property("description", content.getInfo()));        // 一级分类        list.add(new Property("programtype", "少儿"));        // 二级分类        list.add(new Property("Programtype2", content.getClassifyTags()));        list.add(new Property("volumncount", content.getSumNum() + ""));        // 是否收费        list.add(new Property("isCharge", "0"));        // 全局唯一标识        list.add(new Property("code", "s_" + content.getId()));        // 评分        list.add(new Property("Score", "9"));        list.add(new Property("timeLength", "1"));        list.add(new Property("enname", null));        // 上映年代        list.add(new Property("releaseyear", null));        list.add(new Property("orgairdate", DateUtil.getDateTime()));        // 标签        list.add(new Property("tag", content.getClassifyTags()));        // 国家地区        list.add(new Property("originalcountry", content.getAreaTags()));        list.add(new Property("is3D", null));        list.add(new Property("starlevel", null));        list.add(new Property("chargeDesc", null));        return list;    }    /**     * 创建节目对象list     *     * @param content     内容对象     * @param child       子内容对象     * @param pictureUrls 海报地址（ftp地址）     * @param volumnCount 当前集数     * @return     */    public static List<Property> createProgramProperties(Content content, Content child, List<String> pictureUrls, Integer volumnCount) {        // 参数校验        checkProgramParams(content, child, pictureUrls, volumnCount);        List<Property> list = Lists.newArrayList();        /*必填*/        // 导演        list.add(new Property("actordisplay", content.getDirectorTags()));        // 清晰度        list.add(new Property("definition", "1"));        // 大海报地址        if (pictureUrls.size() > 0) {            list.add(new Property("pictureurl1", pictureUrls.get(0)));        }        // 名称        list.add(new Property("name", child.getName()));        // 语言        if (StringUtils.isBlank(content.getLanguage())) {            list.add(new Property("language", "中文"));        } else {            list.add(new Property("language", content.getLanguage()));        }        // 主演        list.add(new Property("writerdisplay", content.getActorTags()));        // 描述        list.add(new Property("description", content.getInfo()));        // 一级分类        list.add(new Property("programtype", "少儿"));        // 二级分类        list.add(new Property("Programtype2", content.getClassifyTags()));        // 总集数        list.add(new Property("volumncount", child.getSort() + ""));        // 时长        list.add(new Property("duration", child.getRunTime()));        // 全局唯一标识        list.add(new Property("code", "p_" + child.getId()));        list.add(new Property("enname", null));        // 上映年代        list.add(new Property("releaseyear", null));        list.add(new Property("orgairdate", DateUtil.getDateTime()));        // 国家地区        list.add(new Property("originalcountry", content.getAreaTags()));        list.add(new Property("is3D", null));        list.add(new Property("ifPreview", null));        list.add(new Property("contentprovider", null));        list.add(new Property("playurl", null));        return list;    }    /**     * 创建媒体对象list     *     * @param id           唯一标示     * @param playUrl      播放地址     * @param screenFormat 分辨率     * @return     */    public static List<Property> createMovieProperties(String id,                                                       String playUrl,                                                       String screenFormat,                                                       Content content,                                                       Video video) {        // 参数校验        checkMovieParams(id, playUrl, screenFormat, content);        List<Property> list = Lists.newArrayList();        /*必填*/        // 播放地址 http地址        list.add(new Property("playurl", playUrl));        // 清晰度        list.add(new Property("definition", "1"));        list.add(new Property("screenformat", "1280*720"));        // cdn平台 默认 54        list.add(new Property("cdnplatform", "54"));        // 全局唯一标识        list.add(new Property("code", id));        // 文件地址        list.add(new Property("fileurl", playUrl));        // MD5        String md5 = "";        try {            String path = ConstantFactory.map.get(ConstantEnum.video_ftp_dir.getKey()) + getFileName(video.getUrl());            md5 = DigestUtils.md5Hex(new FileInputStream(path));        } catch (IOException e) {            throw new RuntimeException("生成视频MD5值异常:" + e.getMessage(), e);        }        list.add(new Property("md5", md5));        return list;    }    /**     * 检测剧集对象入参     *     * @param content     内容对象     * @param pictureUrls 海报地址     */    private static void checkSeriesParams(Content content, List<String> pictureUrls) {        if (StringUtils.isBlank(content.getDirectorTags())) {            throw new RuntimeException(content.getName() + "|" + "导演标签信息未录入！！！");        }        if (pictureUrls.size() == 0) {            throw new RuntimeException(content.getName() + "|" + "海报地址未录入！！！");        }        if (StringUtils.isBlank(content.getName())) {            throw new RuntimeException(content.getName() + "|" + "名称信息未录入！！！");        }        if (StringUtils.isBlank(content.getLanguage())) {            throw new RuntimeException(content.getName() + "|" + "语言信息未录入！！！");        }        if (StringUtils.isBlank(content.getActorTags())) {            throw new RuntimeException(content.getName() + "|" + "演员信息未录入！！！");        }        if (StringUtils.isBlank(content.getInfo())) {            throw new RuntimeException(content.getName() + "|" + "描述信息未录入！！！");        }        if (StringUtils.isBlank(content.getClassifyTags())) {            throw new RuntimeException(content.getName() + "|" + "分类标签信息未录入！！！");        }        if (content.getSumNum() == null) {            throw new RuntimeException(content.getName() + "|" + "总集数信息未录入！！！");        }        if (StringUtils.isBlank(content.getGrade() + "")) {            throw new RuntimeException(content.getName() + "|" + "评分信息未录入！！！");        }    }    /**     * 检测节目对象入参     *     * @param content     内容对象     * @param pictureUrls 海报地址     * @param volumnCount 当前集数     */    private static void checkProgramParams(Content content, Content child, List<String> pictureUrls, Integer volumnCount) {        if (StringUtils.isBlank(content.getId())) {            throw new RuntimeException(content.getName() + "|" + "内容id信息未录入！！！");        }        if (StringUtils.isBlank(content.getDirectorTags())) {            throw new RuntimeException(content.getName() + "|" + "导演标签信息未录入！！！");        }        if (pictureUrls.size() == 0) {            throw new RuntimeException(content.getName() + "|" + "海报地址信息未录入！！！");        }        if (volumnCount == null) {            throw new RuntimeException(content.getName() + "|" + "当前集数信息未录入！！！");        }        if (StringUtils.isBlank(content.getName())) {            throw new RuntimeException(content.getName() + "|" + "名称信息未录入！！！");        }        if (StringUtils.isBlank(content.getLanguage())) {            throw new RuntimeException(content.getName() + "|" + "语言信息未录入！！！");        }        if (StringUtils.isBlank(content.getActorTags())) {            throw new RuntimeException(content.getName() + "|" + "演员信息未录入！！！");        }        if (StringUtils.isBlank(content.getInfo())) {            throw new RuntimeException(content.getName() + "|" + "描述信息未录入！！！");        }        if (StringUtils.isBlank(content.getClassifyTags())) {            throw new RuntimeException(content.getName() + "|" + "分类标签信息未录入！！！");        }        if (StringUtils.isBlank(child.getRunTime())) {            child.setRunTime("1000");        }    }    /**     * 检测媒体对象入参     *     * @param id           全局唯一标识     * @param playUrl      播放地址     * @param screenFormat 分辨率     */    private static void checkMovieParams(String id,                                         String playUrl,                                         String screenFormat,                                         Content content) {        if (StringUtils.isBlank(id)) {            throw new RuntimeException(content.getName() + "|" + "id信息未录入！！！");        }        if (StringUtils.isBlank(playUrl)) {            throw new RuntimeException(content.getName() + "|" + "播放地址信息未录入！！！");        }        if (StringUtils.isBlank(screenFormat)) {            throw new RuntimeException(content.getName() + "|" + "分辨率信息未录入！！！");        }    }    private static String getFileName(String path) {        return path.substring(path.lastIndexOf("/") + 1);    }}