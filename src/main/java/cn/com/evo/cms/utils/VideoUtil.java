package cn.com.evo.cms.utils;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.regex.Matcher;import java.util.regex.Pattern;/** * @Description: * @author: lu.xin * @create: 2018-05-02 下午4:46 **/public class VideoUtil {    public static void main(String[] args) {        getVideoInfo("http://cdn.evomedia.cn/cms/video/05cb76bbc2fc4abd976f7d8478780040.mp4");//        getVideoInfo("http://cdn.evomedia.cn/cms/video/ecc2e609b78d4110b4e3cef43f237982.mp4");    }    /**     * 获取视频总时间     *     * @param video_path 视频地址     * @return map key:time、bitrate、resolution、size     */    public static Map<String, String> getVideoInfo(String video_path) {        Map<String, String> map = new HashMap<>();        List<String> commands = new ArrayList<>();        commands.add("ffmpeg");        commands.add("-i");        commands.add(video_path);        try {            ProcessBuilder builder = new ProcessBuilder();            builder.command(commands);            Process p = builder.start();            InputStream isInput = p.getInputStream();            int data = 0;            while ((data = isInput.read()) != -1) {                System.out.println((byte) data);            }            // 读取流            BufferedReader br1 = new BufferedReader(new InputStreamReader(p.getInputStream()));            String l = "";            while ((l = br1.readLine()) != null) {                System.out.println(l);            }            br1.close();            //从输入流中读取视频信息            BufferedReader br = new BufferedReader(new InputStreamReader(p.getErrorStream()));            StringBuilder stringBuilder = new StringBuilder();            String line = "";            while ((line = br.readLine()) != null) {                stringBuilder.append(line);            }            br.close();            //从视频信息中解析时长            String regexDuration = "Duration: (.*?), start: (.*?), bitrate: (\\d*) kb\\/s";            Pattern pattern = Pattern.compile(regexDuration);            Matcher m = pattern.matcher(stringBuilder.toString());            if (m.find()) {                int time = getTimelen(m.group(1));                map.put("time", time + "");                map.put("bitrate", m.group(3));                System.out.println("视频时长：" + time + "s , 开始时间：" + m.group(2) + ", 比特率：" + m.group(3) + "kb/s");            }            String regexVideo2 = "Video: (.*?), (.*?), (.*?)[,\\s]";            pattern = Pattern.compile(regexVideo2);            m = pattern.matcher(stringBuilder.toString());            if (m.find()) {                System.out.println("编码格式：" + m.group(1) + ", 视频格式：" + m.group(2) + ", 分辨率：" + m.group(3));                map.put("size", getFileLength(video_path) + "");                if (!m.group(3).contains("x")) {                    String regexVideo = "Video: (.*?), (.*?)\\), (.*?)[,\\s]";                    pattern = Pattern.compile(regexVideo);                    m = pattern.matcher(stringBuilder.toString());                    if (m.find()) {                        System.out.println("编码格式：" + m.group(1) + ", 视频格式：" + m.group(2) + ", 分辨率：" + m.group(3));                    }                }                map.put("resolution", m.group(3));            }            return map;        } catch (Exception e) {            e.printStackTrace();        }        return null;    }    // 格式:"00:00:10.68"    public static int getTimelen(String timelen) {        int min = 0;        String strs[] = timelen.split(":");        if (strs[0].compareTo("0") > 0) {            // 秒            min += Integer.valueOf(strs[0]) * 60 * 60;        }        if (strs[1].compareTo("0") > 0) {            min += Integer.valueOf(strs[1]) * 60;        }        if (strs[2].compareTo("0") > 0) {            min += Math.round(Float.valueOf(strs[2]));        }        return min;    }    /**     * 获取文件大小     *     * @param url1     * @return     * @throws IOException     */    public static int getFileLength(String url1) throws IOException {        int length = 0;        URL url;        try {            url = new URL(url1);            HttpURLConnection urlcon = (HttpURLConnection) url.openConnection();            //根据响应获取文件大小            length = urlcon.getContentLength();            urlcon.disconnect();        } catch (MalformedURLException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }        return length;    }}