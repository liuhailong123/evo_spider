package cn.com.evo.cms.web.voService;import cn.com.evo.admin.manage.domain.entity.DictData;import cn.com.evo.admin.manage.domain.entity.Province;import cn.com.evo.admin.manage.service.DictDataService;import cn.com.evo.admin.manage.service.ProvinceService;import cn.com.evo.cms.domain.entity.cms.Picture;import cn.com.evo.cms.domain.entity.cms.SourceRel;import cn.com.evo.cms.domain.enums.SourceTypeEnum;import cn.com.evo.cms.domain.vo.cms.SourcePictureVo;import cn.com.evo.cms.service.cms.PictureService;import cn.com.evo.cms.service.cms.SourceRelService;import cn.com.evo.cms.web.api.vo.PictureApiVo;import com.google.common.collect.Lists;import org.dozer.Mapper;import org.hibernate.SQLQuery;import org.hibernate.transform.Transformers;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import javax.persistence.EntityManager;import javax.persistence.PersistenceContext;import javax.transaction.Transactional;import java.util.List;import java.util.Map;/** * @Description: * @author: lu.xin * @create: 2018-11-12 5:06 PM **/@Service@Transactionalpublic class PictureVoService {    @PersistenceContext    private EntityManager entityManager;    @Autowired    private DictDataService dictDataService;    @Autowired    private SourceRelService sourceRelService;    @Autowired    private PictureService pictureService;    @Autowired    private ProvinceService provinceService;    @Autowired    private Mapper mapper;    /**     * 图片对象转化图片资源对象     *     * @param entity     * @return     */    public SourcePictureVo getSourcePictureVo(Picture entity) {        SourcePictureVo vo = new SourcePictureVo();        try {            vo = mapper.map(entity, SourcePictureVo.class);            vo.setRandom((int) (Math.random() * 1000000) + "");            vo.setName(entity.getSource().getName());            List<DictData> dictDatas = dictDataService.findByDictClassifyCode("Picture_Type");            for (DictData dictData : dictDatas) {                if (Integer.valueOf(dictData.getCode()).equals(entity.getType())) {                    vo.setTypeName(dictData.getName());                }            }            vo.setPictureId(entity.getId());        } catch (Exception e) {            e.printStackTrace();            throw new RuntimeException(e.getMessage());        }        return vo;    }    /**     * 图片对象List转化图片资源对象List     *     * @param entities     * @return     */    public List<SourcePictureVo> handle(List<Picture> entities) {        //获取当前省网资源服务器配置        Province provice = provinceService.getByEnable(1);        List<SourcePictureVo> sourcePictureVos = Lists.newArrayList();        for (Picture entity : entities) {            SourcePictureVo vo = this.getSourcePictureVo(entity);            vo.setUrl(provice.getImageHost() + entity.getFileName());            sourcePictureVos.add(vo);        }        return sourcePictureVos;    }    /**     * 根据fId获取获取横／竖版图片接口对象     * @param fId     * @param pictureType     * @return     *///    public PictureApiVo getPictureApiVo(String fId, int pictureType) {//        PictureApiVo apiVo = new PictureApiVo();//        List<SourceRel> sourceRels = sourceRelService.findByFId(fId, SourceTypeEnum.image.getIndex());//        for (SourceRel sourceRel : sourceRels) {//            Picture picture = pictureService.findById(sourceRel.getSourceId());//            if (picture.getType() == pictureType) {//                apiVo = new PictureApiVo(picture);//                break;//            }//        }//        return apiVo;//    }    /**     * 根据内容id 获取横竖版海报     * @param fId     * @return     *///    public List<PictureApiVo> getContentPictureApiVos(String fId) {//        List<PictureApiVo> apiVos = Lists.newArrayList();//        PictureApiVo hPicture=this.getPictureApiVo(fId,1);//横版海报//        PictureApiVo sPicture=this.getPictureApiVo(fId,2);//竖版海报//        apiVos.add(hPicture);//        apiVos.add(sPicture);//        return apiVos;//    }    /**     * 根据fId和业务类型获取图片接口对象     *     * @param fId     * @param BusinessType     * @return     */    public PictureApiVo getBusinessPictureApiVo(String fId, int BusinessType) {        PictureApiVo apiVo = new PictureApiVo();        List<SourceRel> sourceRels = sourceRelService.findByFIdAndSourcetypeAndBusinessType(fId,                SourceTypeEnum.image.getIndex(), BusinessType);        if (sourceRels != null) {            if (sourceRels.size() > 0) {                SourceRel sourceRel = sourceRels.get(0);                Picture picture = pictureService.findById(sourceRel.getSourceId());                //获取当前省网资源服务器配置                Province provice = provinceService.getByEnable(1);                apiVo = new PictureApiVo(picture, provice);            }        }        return apiVo;    }    /**     * 获取栏目下关联的图片接口对象     *     * @param columnId     * @return     */    public List<PictureApiVo> getPictureApiVos(String columnId) {        List<PictureApiVo> vos = Lists.newArrayList();        List<SourceRel> sourceRels = sourceRelService.findByFId(columnId, SourceTypeEnum.image.getIndex());        //获取当前省网资源服务器配置        Province provice = provinceService.getByEnable(1);        for (SourceRel sourceRel : sourceRels) {            Picture picture = pictureService.findById(sourceRel.getSourceId());            PictureApiVo vo = new PictureApiVo(picture, provice);            vos.add(vo);        }        return vos;    }    public List<PictureApiVo> findPictureApiVosByContentIdAndBusinessType(String contentId, int businessType) {        List<PictureApiVo> pictures = Lists.newArrayList();        List<Picture> pictureList = pictureService.findByContentIdAndBusinessType(contentId, businessType);        if (pictureList != null) {            if (pictureList.size() > 0) {                //获取当前省网资源服务器配置                Province provice = provinceService.getByEnable(1);                for (Picture picture : pictureList) {                    PictureApiVo vo = new PictureApiVo(picture, provice);                    pictures.add(vo);                }            }        }        return pictures;    }    /**     * 根据内容ids获取对应海报对象     *     * @param contentIds     * @return     */    public List<SourcePictureVo> findPictureByContentIds(List<String> contentIds, int businessType) {        List<SourcePictureVo> lvos = Lists.newArrayList();        if (contentIds != null) {            if (contentIds.size() > 0) {                String contentIdStr = "(";                for (String contentId : contentIds) {                    contentIdStr = contentIdStr + "'" + contentId + "',";                }                contentIdStr = contentIdStr.substring(0, contentIdStr.lastIndexOf(",")) + ")";                StringBuilder sql = new StringBuilder();                sql.append("select sp.fileName,sp.type,r.fId from cms_source_rel r, cms_source_picture sp ")                        .append("where r.sourceId = sp.id ")                        .append("and r.fId in " + contentIdStr + " ")                        .append("AND sourcetype = 2 AND businessType = ?1 order by r.sourceId");                SQLQuery sqlQuery = entityManager.createNativeQuery(sql.toString())                        .setParameter(1, businessType).unwrap(SQLQuery.class);                List temps = sqlQuery.setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list();                for (Object o : temps) {                    Map row = (Map) o;                    String fId = String.valueOf(row.get("fId"));                    String fileName = String.valueOf(row.get("fileName"));                    Integer type = Integer.valueOf(String.valueOf(row.get("type")));                    SourcePictureVo vo = new SourcePictureVo();                    vo.setUrl(fileName);                    vo.setType(type);                    vo.setSourceId(fId);                    lvos.add(vo);                }            }        }        return lvos;    }}