package cn.com.evo.integration.longjiang.content.process;import cn.com.evo.admin.manage.domain.entity.Province;import cn.com.evo.cms.domain.entity.cms.*;import cn.com.evo.cms.domain.enums.BusinessTypeEnum;import cn.com.evo.cms.domain.enums.ContentClassifyEnum;import cn.com.evo.cms.service.cms.*;import cn.com.evo.integration.longjiang.common.request.VoiceSynDataRequest;import cn.com.evo.integration.longjiang.content.xml.XmlRequestOrJsonResponse;import cn.com.evo.integration.longjiang.handle.VoiceSynHandle;import cn.com.evo.provincial.service.AbstractProvincialServiceImpl;import com.alibaba.fastjson.JSONArray;import net.sf.json.JSONObject;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.io.File;import java.util.List;/** * @Description: 龙江网络内容同步服务类 * @author: lu.xin * @create: 2019-03-20 3:34 PM **/@Service@Transactionalpublic class LjContentSynServiceImpl extends AbstractProvincialServiceImpl {    /**     * 语音搜索内容注入返回码(正确)     */    private static String VOICE_RESULT_SUCCESS_CODE = "0";    @Autowired    private SourceService sourceService;    @Autowired    private VideoService videoService;    @Autowired    private PictureService pictureService;    @Autowired    private ContentService contentService;    @Autowired    private CatalogueRelationService catalogueRelationService;    /**     * 龙江网络，移动图片至nginx目录     *     * @param picture 图片对象     */    @Override    public void registImage(Picture picture, Province province, boolean deleteFlag) {        try {            String command = "chmod 777 " + picture.getCloudPath();            Runtime.getRuntime().exec(command).waitFor();            // 获取海报，进行上传            File file = new File(picture.getCloudPath());            if (file.exists()) {                File newFile = new File("/soft/images/" + picture.getFileName());                // 移动文件                boolean flag = file.renameTo(newFile);                if (!flag) {                    throw new RuntimeException("移动图片至【/soft/images/】目录失败!!!");                }            }        } catch (Exception e) {            throw new RuntimeException("上传资源至Nginx目录异常：" + e.getMessage(), e);        }    }    /**     * 拉取资源数据至本地     */    @Override    public void pull() {        try {            // 获取局方资源数据            String resourceStr = XmlRequestOrJsonResponse.findResource("http://172.30.70.84:8080/GetFolderContents?dataType=json", "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><GetFolderContents assetId=\"MANU88500\" portalId=\"1\" account=\"5990781\" client=\"8512010534977593\" includeFolderProperties=\"Y\" includeSubFolder=\"N\" includeSelectableItem=\"Y\" startAt=\"1\" maxItems=\"5000\" mergeTV=\"1\" />");            JSONObject resourceJsonObject = JSONObject.fromObject(resourceStr);            // 获取内容资源的String            String string = resourceJsonObject.getString("selectableItemList");            // 可用资源数组            JSONArray itemJsonArray = JSONArray.parseArray(string);            for (Object itemObject : itemJsonArray) {                // 视频资源对象                JSONObject item = JSONObject.fromObject(itemObject);                if ("1".equals(item.getString("showType"))) {                    // 标识该内容为电影,直接设置内容名称和三方ID保存到库中就可以                    movieProcess(item);                } else {                    // 标识该内容为剧集，则开始剧集逻辑，获取剧集子集。                    seriesProcess(item);                }            }        } catch (Exception e) {            throw new RuntimeException("调用局方接口：拉取资源信息至本地异常" + e.getMessage(), e);        }    }    /**     * 注入龙江网络语音搜索数据逻辑     *     * @param catalogueRelationId     */    @Override    public void dataSyn(String catalogueRelationId) {        VoiceSynDataRequest vsdq = new VoiceSynDataRequest();        CatalogueRelation catalogueRelation = catalogueRelationService.findById(catalogueRelationId);        String contentId = catalogueRelation.getBId();        Content content = contentService.findById(contentId);        // 获取内容对应竖版海报        List<Picture> pictures = pictureService.findByContentIdAndBusinessType(contentId,                BusinessTypeEnum.cover.getIndex());        String pictureUrl = "";        for (Picture picture : pictures) {            if (picture.getType() == 2) {                pictureUrl = pictureService.getImageUrl(picture.getId());                break;            }        }        // 内容分类        ContentClassifyEnum contentClassifyEnum = ContentClassifyEnum.val(content.getClassify());        switch (contentClassifyEnum) {            case movie:                vsdq = new VoiceSynDataRequest(content, null, pictureUrl, "1");                if (!VOICE_RESULT_SUCCESS_CODE.equals(getVoiceResultCode(vsdq))) {                    throw new RuntimeException("语音搜索内容上线失败 ! ! !");                }                break;            case episode:                //获取所有的子剧集数据                List<Content> children = contentService.findByPIdAndClassifyOrderBySortAsc(contentId,                        ContentClassifyEnum.episode_child.getIndex());                for (Content child : children) {                    vsdq = new VoiceSynDataRequest(content, String.valueOf(child.getSort()), pictureUrl,                            "1");                    if (!VOICE_RESULT_SUCCESS_CODE.equals(getVoiceResultCode(vsdq))) {                        throw new RuntimeException("语音搜索内容上线失败 ! ! !第" + child.getSort() + "集出错");                    }                }                break;            default:                break;        }    }    /**     * 调用局方语音搜索服务接口,解析返回数据获取CODE     *     * @param movieEntity     * @return     */    private String getVoiceResultCode(VoiceSynDataRequest movieEntity) {        String code = "";        String result = VoiceSynHandle.create(movieEntity).call();        if (result != null) {            //获取到请求            //解析返回数据            com.alibaba.fastjson.JSONObject json = com.alibaba.fastjson.JSONObject.parseObject(result);            code = json.getString("code");        }        return code;    }    /**     * 电影逻辑     *     * @param item 资源对象     */    private void movieProcess(JSONObject item) {        try {            // 名称            String titleFull = item.getString("titleFull");            // 第三方资源id，即局方资源id            String assetId = item.getString("assetId");            // 是否存在source对象            Source source = sourceService.getByName(titleFull);            // 保存数据            saveOrUpdateSource(source, titleFull, assetId);        } catch (Exception e) {            throw new RuntimeException("从龙江CMS系统同步电影数据异常：" + e.getMessage(), e);        }    }    /**     * 剧集逻辑     *     * @param item 资源对象     */    private void seriesProcess(JSONObject item) {        try {            // 剧集资源id            String seriesRequest = item.getString("assetId");            // 获取剧集子集String            String series = XmlRequestOrJsonResponse.findResource("http://172.30.70.84:8080/GetFolderContents?dataType=json", "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><GetFolderContents assetId=\"" + seriesRequest + "\" portalId=\"1\" account=\"5990781\" client=\"8512010534977593\" includeFolderProperties=\"Y\" includeSubFolder=\"Y\" includeSelectableItem=\"Y\" startAt=\"1\" maxItems=\"5000\" />");            JSONObject seriesJsonObject = JSONObject.fromObject(series);            //电视剧单集信息集合字符串            String seriesSelectableItemList = seriesJsonObject.getString("selectableItemList");            JSONArray itemJsonArray = JSONArray.parseArray(seriesSelectableItemList);            for (Object itemObject : itemJsonArray) {                JSONObject seriesJO = JSONObject.fromObject(itemObject);                //名称                String titleFull = item.getString("titleFull");                // 第三方资源id，即局方资源id                String assetId = item.getString("assetId");                // 是否存在source对象                Source source = sourceService.getByName(titleFull);                // 保存数据                saveOrUpdateSource(source, titleFull, assetId);            }        } catch (Exception e) {            throw new RuntimeException("从龙江CMS系统同步剧集数据异常：" + e.getMessage(), e);        }    }    /**     * 保存资源数据     *     * @param source     * @param titleFull     * @param assetId     */    private void saveOrUpdateSource(Source source, String titleFull, String assetId) {        try {            if (source == null) {                // 如果资源主表数据不存在                source = new Source();                source.setName(titleFull);                source.setType(1);                sourceService.save(source);                Video video = new Video();                video.setSource(source);                video.setType(1);                video.setDefinition(3);                // url设置为第三方资源id                video.setUrl(assetId);                videoService.save(video);            } else {                List<Video> videos = videoService.findBySourceId(source.getId());                if (videos.size() == 0) {                    Video video = new Video();                    video.setSource(source);                    video.setType(1);                    video.setDefinition(3);                    // url设置为第三方资源id                    video.setUrl(assetId);                    videoService.save(video);                } else {                    Video video = videos.get(0);                    video.setSource(source);                    video.setType(1);                    video.setDefinition(3);                    // url设置为第三方资源id                    video.setUrl(assetId);                    videoService.update(video);                }            }        } catch (Exception e) {            throw new RuntimeException("保存或更新资源数据异常!!!" + e.getMessage(), e);        }    }}